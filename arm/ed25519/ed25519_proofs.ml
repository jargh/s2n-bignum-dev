needs "arm/ed25519/ed25519_spec_proofs.ml";;
needs "arm/sha512/sha512_proofs.ml";;
needs "arm/proofs/bignum_le.ml";;
needs "arm/proofs/bignum_madd_n25519_alt.ml";;
needs "arm/proofs/bignum_mod_n25519.ml";;
needs "arm/proofs/bignum_neg_p25519.ml";;
needs "arm/proofs/edwards25519_decode_alt.ml";;
needs "arm/proofs/edwards25519_encode.ml";;
needs "arm/proofs/edwards25519_scalarmulbase_alt.ml";;
needs "arm/proofs/edwards25519_scalarmuldouble_alt.ml";;

(*****************************************************************************)

(* ------------------------------------------------------------------------- *)
(* Starting proofs about the machine code.                                   *)
(* ------------------------------------------------------------------------- *)

(*****************************************************************************)

(*
print_literal_relocs_from_elf "arm/ed25519/code/ed25519.o";;

save_literal_relocs_from_elf
  "arm/ed25519/literal_relocs.txt"
  "arm/ed25519/code/ed25519.o";;
*)

let ed25519_mc,ed25519_const_data_list =
  define_assert_relocs_from_elf
    ~map_symbol_name:(function
      | "WHOLE_READONLY" -> "ed25519_WHOLE_READONLY_data"
      | "K"
        -> "K_data"
      | "edwards25519_scalarmulbase_alt_constant"
        -> "edwards25519_scalarmulbase_alt_constant_data"
      | "edwards25519_scalarmuldouble_alt_constant"
        -> "edwards25519_scalarmuldouble_alt_constant_data"
      | s -> failwith ("unknown symbol: " ^ s))
    "ed25519_mc"
    "arm/ed25519/code/ed25519.o"
(fun w BL ADR ADRP ADD_rri64 -> [
  w 0xa9a953f3;         (* arm_STP X19 X20 SP (Preimmediate_Offset (iword (-- &368))) *)
  w 0xf9000bfe;         (* arm_STR X30 SP (Immediate_Offset (word 16)) *)
  w 0xaa0003f3;         (* arm_MOV X19 X0 *)
  w 0xaa0103f4;         (* arm_MOV X20 X1 *)
  w 0x910063e0;         (* arm_ADD X0 SP (rvalue (word 24)) *)
  w 0x9400244e;         (* arm_BL (word 37176) *)
  w 0x910063e0;         (* arm_ADD X0 SP (rvalue (word 24)) *)
  w 0xaa1403e1;         (* arm_MOV X1 X20 *)
  w 0xd2800402;         (* arm_MOV X2 (rvalue (word 32)) *)
  w 0x94002472;         (* arm_BL (word 37320) *)
  w 0x9103c3e0;         (* arm_ADD X0 SP (rvalue (word 240)) *)
  w 0x910063e1;         (* arm_ADD X1 SP (rvalue (word 24)) *)
  w 0x940024a9;         (* arm_BL (word 37540) *)
  w 0x3943c3e0;         (* arm_LDRB W0 SP (Immediate_Offset (word 240)) *)
  w 0x121d1000;         (* arm_AND W0 W0 (rvalue (word 248)) *)
  w 0x3903c3e0;         (* arm_STRB W0 SP (Immediate_Offset (word 240)) *)
  w 0x39443fe0;         (* arm_LDRB W0 SP (Immediate_Offset (word 271)) *)
  w 0x12001800;         (* arm_AND W0 W0 (rvalue (word 127)) *)
  w 0x321a0000;         (* arm_ORR W0 W0 (rvalue (word 64)) *)
  w 0x39043fe0;         (* arm_STRB W0 SP (Immediate_Offset (word 271)) *)
  w 0x9104c3e0;         (* arm_ADD X0 SP (rvalue (word 304)) *)
  w 0x9103c3e1;         (* arm_ADD X1 SP (rvalue (word 240)) *)
  w 0x940004e6;         (* arm_BL (word 5016) *)
  w 0xaa1303e0;         (* arm_MOV X0 X19 *)
  w 0x9104c3e1;         (* arm_ADD X1 SP (rvalue (word 304)) *)
  w 0x940004a1;         (* arm_BL (word 4740) *)
  w 0xf9400bfe;         (* arm_LDR X30 SP (Immediate_Offset (word 16)) *)
  w 0xa8d753f3;         (* arm_LDP X19 X20 SP (Postimmediate_Offset (iword (&368))) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xd10843ff;         (* arm_SUB SP SP (rvalue (word 528)) *)
  w 0xa90053f3;         (* arm_STP X19 X20 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9015bf5;         (* arm_STP X21 X22 SP (Immediate_Offset (iword (&16))) *)
  w 0xa90263f7;         (* arm_STP X23 X24 SP (Immediate_Offset (iword (&32))) *)
  w 0xf9001bfe;         (* arm_STR X30 SP (Immediate_Offset (word 48)) *)
  w 0xaa0003f3;         (* arm_MOV X19 X0 *)
  w 0xaa0103f4;         (* arm_MOV X20 X1 *)
  w 0xaa0203f5;         (* arm_MOV X21 X2 *)
  w 0xaa0303f6;         (* arm_MOV X22 X3 *)
  w 0xaa0403f7;         (* arm_MOV X23 X4 *)
  w 0xaa0503f8;         (* arm_MOV X24 X5 *)
  w 0x9100e3e0;         (* arm_ADD X0 SP (rvalue (word 56)) *)
  w 0x9400242a;         (* arm_BL (word 37032) *)
  w 0x9100e3e0;         (* arm_ADD X0 SP (rvalue (word 56)) *)
  w 0xaa1603e1;         (* arm_MOV X1 X22 *)
  w 0xd2800402;         (* arm_MOV X2 (rvalue (word 32)) *)
  w 0x9400244e;         (* arm_BL (word 37176) *)
  w 0x910443e0;         (* arm_ADD X0 SP (rvalue (word 272)) *)
  w 0x9100e3e1;         (* arm_ADD X1 SP (rvalue (word 56)) *)
  w 0x94002485;         (* arm_BL (word 37396) *)
  w 0x394443e0;         (* arm_LDRB W0 SP (Immediate_Offset (word 272)) *)
  w 0x121d1000;         (* arm_AND W0 W0 (rvalue (word 248)) *)
  w 0x390443e0;         (* arm_STRB W0 SP (Immediate_Offset (word 272)) *)
  w 0x3944bfe0;         (* arm_LDRB W0 SP (Immediate_Offset (word 303)) *)
  w 0x12001800;         (* arm_AND W0 W0 (rvalue (word 127)) *)
  w 0x321a0000;         (* arm_ORR W0 W0 (rvalue (word 64)) *)
  w 0x3904bfe0;         (* arm_STRB W0 SP (Immediate_Offset (word 303)) *)
  w 0x9100e3e0;         (* arm_ADD X0 SP (rvalue (word 56)) *)
  w 0x9400241a;         (* arm_BL (word 36968) *)
  w 0xb40000b8;         (* arm_CBZ X24 (word 20) *)
  w 0x9100e3e0;         (* arm_ADD X0 SP (rvalue (word 56)) *)
  w 0xaa1703e1;         (* arm_MOV X1 X23 *)
  w 0xaa1803e2;         (* arm_MOV X2 X24 *)
  w 0x9400243d;         (* arm_BL (word 37108) *)
  w 0x9100e3e0;         (* arm_ADD X0 SP (rvalue (word 56)) *)
  w 0x9104c3e1;         (* arm_ADD X1 SP (rvalue (word 304)) *)
  w 0xd2800402;         (* arm_MOV X2 (rvalue (word 32)) *)
  w 0x94002439;         (* arm_BL (word 37092) *)
  w 0x9100e3e0;         (* arm_ADD X0 SP (rvalue (word 56)) *)
  w 0xaa1403e1;         (* arm_MOV X1 X20 *)
  w 0xaa1503e2;         (* arm_MOV X2 X21 *)
  w 0x94002435;         (* arm_BL (word 37076) *)
  w 0x910543e0;         (* arm_ADD X0 SP (rvalue (word 336)) *)
  w 0x9100e3e1;         (* arm_ADD X1 SP (rvalue (word 56)) *)
  w 0x9400246c;         (* arm_BL (word 37296) *)
  w 0x910543e0;         (* arm_ADD X0 SP (rvalue (word 336)) *)
  w 0xd2800101;         (* arm_MOV X1 (rvalue (word 8)) *)
  w 0xaa0003e2;         (* arm_MOV X2 X0 *)
  w 0x94000221;         (* arm_BL (word 2180) *)
  w 0x910643e0;         (* arm_ADD X0 SP (rvalue (word 400)) *)
  w 0x910543e1;         (* arm_ADD X1 SP (rvalue (word 336)) *)
  w 0x940004ac;         (* arm_BL (word 4784) *)
  w 0xaa1303e0;         (* arm_MOV X0 X19 *)
  w 0x910643e1;         (* arm_ADD X1 SP (rvalue (word 400)) *)
  w 0x94000467;         (* arm_BL (word 4508) *)
  w 0x9100e3e0;         (* arm_ADD X0 SP (rvalue (word 56)) *)
  w 0x940023fe;         (* arm_BL (word 36856) *)
  w 0xb40000b8;         (* arm_CBZ X24 (word 20) *)
  w 0x9100e3e0;         (* arm_ADD X0 SP (rvalue (word 56)) *)
  w 0xaa1703e1;         (* arm_MOV X1 X23 *)
  w 0xaa1803e2;         (* arm_MOV X2 X24 *)
  w 0x94002421;         (* arm_BL (word 36996) *)
  w 0x9100e3e0;         (* arm_ADD X0 SP (rvalue (word 56)) *)
  w 0xaa1303e1;         (* arm_MOV X1 X19 *)
  w 0xd2800402;         (* arm_MOV X2 (rvalue (word 32)) *)
  w 0x9400241d;         (* arm_BL (word 36980) *)
  w 0x9100e3e0;         (* arm_ADD X0 SP (rvalue (word 56)) *)
  w 0x910082c1;         (* arm_ADD X1 X22 (rvalue (word 32)) *)
  w 0xd2800402;         (* arm_MOV X2 (rvalue (word 32)) *)
  w 0x94002419;         (* arm_BL (word 36964) *)
  w 0x9100e3e0;         (* arm_ADD X0 SP (rvalue (word 56)) *)
  w 0xaa1403e1;         (* arm_MOV X1 X20 *)
  w 0xaa1503e2;         (* arm_MOV X2 X21 *)
  w 0x94002415;         (* arm_BL (word 36948) *)
  w 0x910743e0;         (* arm_ADD X0 SP (rvalue (word 464)) *)
  w 0x9100e3e1;         (* arm_ADD X1 SP (rvalue (word 56)) *)
  w 0x9400244c;         (* arm_BL (word 37168) *)
  w 0x910743e0;         (* arm_ADD X0 SP (rvalue (word 464)) *)
  w 0xd2800101;         (* arm_MOV X1 (rvalue (word 8)) *)
  w 0xaa0003e2;         (* arm_MOV X2 X0 *)
  w 0x94000201;         (* arm_BL (word 2052) *)
  w 0x91008260;         (* arm_ADD X0 X19 (rvalue (word 32)) *)
  w 0x910743e1;         (* arm_ADD X1 SP (rvalue (word 464)) *)
  w 0x910443e2;         (* arm_ADD X2 SP (rvalue (word 272)) *)
  w 0x910543e3;         (* arm_ADD X3 SP (rvalue (word 336)) *)
  w 0x94000139;         (* arm_BL (word 1252) *)
  w 0xa94053f3;         (* arm_LDP X19 X20 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9415bf5;         (* arm_LDP X21 X22 SP (Immediate_Offset (iword (&16))) *)
  w 0xa94263f7;         (* arm_LDP X23 X24 SP (Immediate_Offset (iword (&32))) *)
  w 0xf9401bfe;         (* arm_LDR X30 SP (Immediate_Offset (word 48)) *)
  w 0x910843ff;         (* arm_ADD SP SP (rvalue (word 528)) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xd10843ff;         (* arm_SUB SP SP (rvalue (word 528)) *)
  w 0xa90053f3;         (* arm_STP X19 X20 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9015bf5;         (* arm_STP X21 X22 SP (Immediate_Offset (iword (&16))) *)
  w 0xa90263f7;         (* arm_STP X23 X24 SP (Immediate_Offset (iword (&32))) *)
  w 0xf9001bfe;         (* arm_STR X30 SP (Immediate_Offset (word 48)) *)
  w 0xaa0003f3;         (* arm_MOV X19 X0 *)
  w 0xaa0103f4;         (* arm_MOV X20 X1 *)
  w 0xaa0203f5;         (* arm_MOV X21 X2 *)
  w 0xaa0303f6;         (* arm_MOV X22 X3 *)
  w 0xaa0403f7;         (* arm_MOV X23 X4 *)
  w 0xaa0503f8;         (* arm_MOV X24 X5 *)
  w 0xd29a7da0;         (* arm_MOV X0 (rvalue (word 54253)) *)
  w 0xf2ab9ea0;         (* arm_MOVK X0 (word 23797) 16 *)
  w 0xf2cc6340;         (* arm_MOVK X0 (word 25370) 32 *)
  w 0xf2eb0240;         (* arm_MOVK X0 (word 22546) 48 *)
  w 0xd2939ac1;         (* arm_MOV X1 (rvalue (word 40150)) *)
  w 0xf2b45ee1;         (* arm_MOVK X1 (word 41719) 16 *)
  w 0xf2df3bc1;         (* arm_MOVK X1 (word 63966) 32 *)
  w 0xf2e29bc1;         (* arm_MOVK X1 (word 5342) 48 *)
  w 0xa90387e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&56))) *)
  w 0xaa1f03e0;         (* arm_MOV X0 XZR *)
  w 0xd2800021;         (* arm_MOV X1 (rvalue (word 1)) *)
  w 0xd3440c21;         (* arm_LSL X1 X1 60 *)
  w 0xa90487e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&72))) *)
  w 0xd2800080;         (* arm_MOV X0 (rvalue (word 4)) *)
  w 0x9100e3e1;         (* arm_ADD X1 SP (rvalue (word 56)) *)
  w 0xd2800082;         (* arm_MOV X2 (rvalue (word 4)) *)
  w 0x910082a3;         (* arm_ADD X3 X21 (rvalue (word 32)) *)
  w 0x940000f4;         (* arm_BL (word 976) *)
  w 0xb5000720;         (* arm_CBNZ X0 (word 228) *)
  w 0x910163e0;         (* arm_ADD X0 SP (rvalue (word 88)) *)
  w 0xaa1603e1;         (* arm_MOV X1 X22 *)
  w 0x94000235;         (* arm_BL (word 2260) *)
  w 0xb50006a0;         (* arm_CBNZ X0 (word 212) *)
  w 0x910263e0;         (* arm_ADD X0 SP (rvalue (word 152)) *)
  w 0x940023b7;         (* arm_BL (word 36572) *)
  w 0xb40000b8;         (* arm_CBZ X24 (word 20) *)
  w 0x910263e0;         (* arm_ADD X0 SP (rvalue (word 152)) *)
  w 0xaa1703e1;         (* arm_MOV X1 X23 *)
  w 0xaa1803e2;         (* arm_MOV X2 X24 *)
  w 0x940023da;         (* arm_BL (word 36712) *)
  w 0x910263e0;         (* arm_ADD X0 SP (rvalue (word 152)) *)
  w 0xaa1503e1;         (* arm_MOV X1 X21 *)
  w 0xd2800402;         (* arm_MOV X2 (rvalue (word 32)) *)
  w 0x940023d6;         (* arm_BL (word 36696) *)
  w 0x910263e0;         (* arm_ADD X0 SP (rvalue (word 152)) *)
  w 0xaa1603e1;         (* arm_MOV X1 X22 *)
  w 0xd2800402;         (* arm_MOV X2 (rvalue (word 32)) *)
  w 0x940023d2;         (* arm_BL (word 36680) *)
  w 0x910263e0;         (* arm_ADD X0 SP (rvalue (word 152)) *)
  w 0xaa1303e1;         (* arm_MOV X1 X19 *)
  w 0xaa1403e2;         (* arm_MOV X2 X20 *)
  w 0x940023ce;         (* arm_BL (word 36664) *)
  w 0x9105c3e0;         (* arm_ADD X0 SP (rvalue (word 368)) *)
  w 0x910263e1;         (* arm_ADD X1 SP (rvalue (word 152)) *)
  w 0x94002405;         (* arm_BL (word 36884) *)
  w 0x910163e0;         (* arm_ADD X0 SP (rvalue (word 88)) *)
  w 0xaa0003e1;         (* arm_MOV X1 X0 *)
  w 0x94000207;         (* arm_BL (word 2076) *)
  w 0x9105c3e0;         (* arm_ADD X0 SP (rvalue (word 368)) *)
  w 0xd2800101;         (* arm_MOV X1 (rvalue (word 8)) *)
  w 0xaa0003e2;         (* arm_MOV X2 X0 *)
  w 0x940001b7;         (* arm_BL (word 1756) *)
  w 0x9106c3e0;         (* arm_ADD X0 SP (rvalue (word 432)) *)
  w 0x9105c3e1;         (* arm_ADD X1 SP (rvalue (word 368)) *)
  w 0x910163e2;         (* arm_ADD X2 SP (rvalue (word 88)) *)
  w 0x910082a3;         (* arm_ADD X3 X21 (rvalue (word 32)) *)
  w 0x94000d48;         (* arm_BL (word 13600) *)
  w 0x9107c3e0;         (* arm_ADD X0 SP (rvalue (word 496)) *)
  w 0x9106c3e1;         (* arm_ADD X1 SP (rvalue (word 432)) *)
  w 0x940003fb;         (* arm_BL (word 4076) *)
  w 0xa95f07e0;         (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&496))) *)
  w 0xa9400ea2;         (* arm_LDP X2 X3 X21 (Immediate_Offset (iword (&0))) *)
  w 0xeb02001f;         (* arm_CMP X0 X2 *)
  w 0x54000181;         (* arm_BNE (word 48) *)
  w 0xeb03003f;         (* arm_CMP X1 X3 *)
  w 0x54000141;         (* arm_BNE (word 40) *)
  w 0x910803e4;         (* arm_ADD X4 SP (rvalue (word 512)) *)
  w 0xa9400480;         (* arm_LDP X0 X1 X4 (Immediate_Offset (iword (&0))) *)
  w 0xa9410ea2;         (* arm_LDP X2 X3 X21 (Immediate_Offset (iword (&16))) *)
  w 0xeb02001f;         (* arm_CMP X0 X2 *)
  w 0x540000a1;         (* arm_BNE (word 20) *)
  w 0xeb03003f;         (* arm_CMP X1 X3 *)
  w 0x54000061;         (* arm_BNE (word 12) *)
  w 0xd2800020;         (* arm_MOV X0 (rvalue (word 1)) *)
  w 0x14000002;         (* arm_B (word 8) *)
  w 0xaa1f03e0;         (* arm_MOV X0 XZR *)
  w 0xa94053f3;         (* arm_LDP X19 X20 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9415bf5;         (* arm_LDP X21 X22 SP (Immediate_Offset (iword (&16))) *)
  w 0xa94263f7;         (* arm_LDP X23 X24 SP (Immediate_Offset (iword (&32))) *)
  w 0xf9401bfe;         (* arm_LDR X30 SP (Immediate_Offset (word 48)) *)
  w 0x910843ff;         (* arm_ADD SP SP (rvalue (word 528)) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xa9bf7bfd;         (* arm_STP X29 X30 SP (Preimmediate_Offset (iword (-- &16))) *)
  w 0xaa1f03e4;         (* arm_MOV X4 XZR *)
  w 0xaa1f03e5;         (* arm_MOV X5 XZR *)
  w 0x97ffff44;         (* arm_BL (word 268434704) *)
  w 0xd2800020;         (* arm_MOV X0 (rvalue (word 1)) *)
  w 0xa8c17bfd;         (* arm_LDP X29 X30 SP (Postimmediate_Offset (iword (&16))) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xa9bf7bfd;         (* arm_STP X29 X30 SP (Preimmediate_Offset (iword (-- &16))) *)
  w 0xaa1f03e4;         (* arm_MOV X4 XZR *)
  w 0xaa1f03e5;         (* arm_MOV X5 XZR *)
  w 0x97ffff99;         (* arm_BL (word 268435044) *)
  w 0xa8c17bfd;         (* arm_LDP X29 X30 SP (Postimmediate_Offset (iword (&16))) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xd28d2a64;         (* arm_MOV X4 (rvalue (word 26963)) *)
  w 0xf2a8ace4;         (* arm_MOVK X4 (word 17767) 16 *)
  w 0xf2c64c84;         (* arm_MOVK X4 (word 12900) 32 *)
  w 0xf2e6a6a4;         (* arm_MOVK X4 (word 13621) 48 *)
  w 0xd2872625;         (* arm_MOV X5 (rvalue (word 14641)) *)
  w 0xf2adc405;         (* arm_MOVK X5 (word 28192) 16 *)
  w 0xf2c40de5;         (* arm_MOVK X5 (word 8303) 32 *)
  w 0xf2ec88a5;         (* arm_MOVK X5 (word 25669) 48 *)
  w 0xa9001404;         (* arm_STP X4 X5 X0 (Immediate_Offset (iword (&0))) *)
  w 0xd286a644;         (* arm_MOV X4 (rvalue (word 13618)) *)
  w 0xf2a626a4;         (* arm_MOVK X4 (word 12597) 16 *)
  w 0xf2c40724;         (* arm_MOVK X4 (word 8249) 32 *)
  w 0xf2edec64;         (* arm_MOVK X4 (word 28515) 48 *)
  w 0xd28d8d85;         (* arm_MOV X5 (rvalue (word 27756)) *)
  w 0xf2ae6d25;         (* arm_MOVK X5 (word 29545) 16 *)
  w 0xf2cded25;         (* arm_MOVK X5 (word 28521) 32 *)
  w 0xf2ee6dc5;         (* arm_MOVK X5 (word 29550) 48 *)
  w 0xa9011404;         (* arm_STP X4 X5 X0 (Immediate_Offset (iword (&16))) *)
  w 0x39008001;         (* arm_STRB W1 X0 (Immediate_Offset (word 32)) *)
  w 0x39008403;         (* arm_STRB W3 X0 (Immediate_Offset (word 33)) *)
  w 0x91008804;         (* arm_ADD X4 X0 (rvalue (word 34)) *)
  w 0xaa1f03e5;         (* arm_MOV X5 XZR *)
  w 0x14000004;         (* arm_B (word 16) *)
  w 0x38656846;         (* arm_LDRB W6 X2 (Register_Offset X5) *)
  w 0x38256886;         (* arm_STRB W6 X4 (Register_Offset X5) *)
  w 0x910004a5;         (* arm_ADD X5 X5 (rvalue (word 1)) *)
  w 0xeb05007f;         (* arm_CMP X3 X5 *)
  w 0x54ffff81;         (* arm_BNE (word 2097136) *)
  w 0x91008860;         (* arm_ADD X0 X3 (rvalue (word 34)) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xa9ab53f3;         (* arm_STP X19 X20 SP (Preimmediate_Offset (iword (-- &336))) *)
  w 0xa9015bf5;         (* arm_STP X21 X22 SP (Immediate_Offset (iword (&16))) *)
  w 0xf90013fe;         (* arm_STR X30 SP (Immediate_Offset (word 32)) *)
  w 0xaa0003f3;         (* arm_MOV X19 X0 *)
  w 0xaa0103f4;         (* arm_MOV X20 X1 *)
  w 0xaa0203f5;         (* arm_MOV X21 X2 *)
  w 0xaa0303f6;         (* arm_MOV X22 X3 *)
  w 0xb4000225;         (* arm_CBZ X5 (word 68) *)
  w 0xf103fcbf;         (* arm_CMP X5 (rvalue (word 255)) *)
  w 0x540001e8;         (* arm_BHI (word 60) *)
  w 0x9100a3e0;         (* arm_ADD X0 SP (rvalue (word 40)) *)
  w 0xaa1f03e1;         (* arm_MOV X1 XZR *)
  w 0xaa0403e2;         (* arm_MOV X2 X4 *)
  w 0xaa0503e3;         (* arm_MOV X3 X5 *)
  w 0x97ffffd4;         (* arm_BL (word 268435280) *)
  w 0xaa0003e5;         (* arm_MOV X5 X0 *)
  w 0xaa1303e0;         (* arm_MOV X0 X19 *)
  w 0xaa1403e1;         (* arm_MOV X1 X20 *)
  w 0xaa1503e2;         (* arm_MOV X2 X21 *)
  w 0xaa1603e3;         (* arm_MOV X3 X22 *)
  w 0x9100a3e4;         (* arm_ADD X4 SP (rvalue (word 40)) *)
  w 0x97ffff07;         (* arm_BL (word 268434460) *)
  w 0xd2800020;         (* arm_MOV X0 (rvalue (word 1)) *)
  w 0x14000002;         (* arm_B (word 8) *)
  w 0xaa1f03e0;         (* arm_MOV X0 XZR *)
  w 0xa9415bf5;         (* arm_LDP X21 X22 SP (Immediate_Offset (iword (&16))) *)
  w 0xf94013fe;         (* arm_LDR X30 SP (Immediate_Offset (word 32)) *)
  w 0xa8d553f3;         (* arm_LDP X19 X20 SP (Postimmediate_Offset (iword (&336))) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xa9ab53f3;         (* arm_STP X19 X20 SP (Preimmediate_Offset (iword (-- &336))) *)
  w 0xa9015bf5;         (* arm_STP X21 X22 SP (Immediate_Offset (iword (&16))) *)
  w 0xf90013fe;         (* arm_STR X30 SP (Immediate_Offset (word 32)) *)
  w 0xaa0003f3;         (* arm_MOV X19 X0 *)
  w 0xaa0103f4;         (* arm_MOV X20 X1 *)
  w 0xaa0203f5;         (* arm_MOV X21 X2 *)
  w 0xaa0303f6;         (* arm_MOV X22 X3 *)
  w 0xb4000205;         (* arm_CBZ X5 (word 64) *)
  w 0xf103fcbf;         (* arm_CMP X5 (rvalue (word 255)) *)
  w 0x540001c8;         (* arm_BHI (word 56) *)
  w 0x9100a3e0;         (* arm_ADD X0 SP (rvalue (word 40)) *)
  w 0xaa1f03e1;         (* arm_MOV X1 XZR *)
  w 0xaa0403e2;         (* arm_MOV X2 X4 *)
  w 0xaa0503e3;         (* arm_MOV X3 X5 *)
  w 0x97ffffb7;         (* arm_BL (word 268435164) *)
  w 0xaa0003e5;         (* arm_MOV X5 X0 *)
  w 0xaa1303e0;         (* arm_MOV X0 X19 *)
  w 0xaa1403e1;         (* arm_MOV X1 X20 *)
  w 0xaa1503e2;         (* arm_MOV X2 X21 *)
  w 0xaa1603e3;         (* arm_MOV X3 X22 *)
  w 0x9100a3e4;         (* arm_ADD X4 SP (rvalue (word 40)) *)
  w 0x97ffff46;         (* arm_BL (word 268434712) *)
  w 0x14000002;         (* arm_B (word 8) *)
  w 0xaa1f03e0;         (* arm_MOV X0 XZR *)
  w 0xa9415bf5;         (* arm_LDP X21 X22 SP (Immediate_Offset (iword (&16))) *)
  w 0xf94013fe;         (* arm_LDR X30 SP (Immediate_Offset (word 32)) *)
  w 0xa8d553f3;         (* arm_LDP X19 X20 SP (Postimmediate_Offset (iword (&336))) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xd109c3ff;         (* arm_SUB SP SP (rvalue (word 624)) *)
  w 0xa90053f3;         (* arm_STP X19 X20 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9015bf5;         (* arm_STP X21 X22 SP (Immediate_Offset (iword (&16))) *)
  w 0xf90013fe;         (* arm_STR X30 SP (Immediate_Offset (word 32)) *)
  w 0xaa0003f3;         (* arm_MOV X19 X0 *)
  w 0xaa0103f4;         (* arm_MOV X20 X1 *)
  w 0xaa0203f5;         (* arm_MOV X21 X2 *)
  w 0xaa0303f6;         (* arm_MOV X22 X3 *)
  w 0xf103fcbf;         (* arm_CMP X5 (rvalue (word 255)) *)
  w 0x54000328;         (* arm_BHI (word 100) *)
  w 0x9100a3e0;         (* arm_ADD X0 SP (rvalue (word 40)) *)
  w 0xd2800021;         (* arm_MOV X1 (rvalue (word 1)) *)
  w 0xaa0403e2;         (* arm_MOV X2 X4 *)
  w 0xaa0503e3;         (* arm_MOV X3 X5 *)
  w 0x97ffff9b;         (* arm_BL (word 268435052) *)
  w 0xf900abe0;         (* arm_STR X0 SP (Immediate_Offset (word 336)) *)
  w 0x910563e0;         (* arm_ADD X0 SP (rvalue (word 344)) *)
  w 0x94002308;         (* arm_BL (word 35872) *)
  w 0x910563e0;         (* arm_ADD X0 SP (rvalue (word 344)) *)
  w 0xaa1403e1;         (* arm_MOV X1 X20 *)
  w 0xaa1503e2;         (* arm_MOV X2 X21 *)
  w 0x9400232c;         (* arm_BL (word 36016) *)
  w 0x9108c3e0;         (* arm_ADD X0 SP (rvalue (word 560)) *)
  w 0x910563e1;         (* arm_ADD X1 SP (rvalue (word 344)) *)
  w 0x94002363;         (* arm_BL (word 36236) *)
  w 0xaa1303e0;         (* arm_MOV X0 X19 *)
  w 0x9108c3e1;         (* arm_ADD X1 SP (rvalue (word 560)) *)
  w 0xd2800802;         (* arm_MOV X2 (rvalue (word 64)) *)
  w 0xaa1603e3;         (* arm_MOV X3 X22 *)
  w 0x9100a3e4;         (* arm_ADD X4 SP (rvalue (word 40)) *)
  w 0xf940abe5;         (* arm_LDR X5 SP (Immediate_Offset (word 336)) *)
  w 0x97fffec4;         (* arm_BL (word 268434192) *)
  w 0xd2800020;         (* arm_MOV X0 (rvalue (word 1)) *)
  w 0x14000002;         (* arm_B (word 8) *)
  w 0xaa1f03e0;         (* arm_MOV X0 XZR *)
  w 0xa94053f3;         (* arm_LDP X19 X20 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9415bf5;         (* arm_LDP X21 X22 SP (Immediate_Offset (iword (&16))) *)
  w 0xf94013fe;         (* arm_LDR X30 SP (Immediate_Offset (word 32)) *)
  w 0x9109c3ff;         (* arm_ADD SP SP (rvalue (word 624)) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xd109c3ff;         (* arm_SUB SP SP (rvalue (word 624)) *)
  w 0xa90053f3;         (* arm_STP X19 X20 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9015bf5;         (* arm_STP X21 X22 SP (Immediate_Offset (iword (&16))) *)
  w 0xf90013fe;         (* arm_STR X30 SP (Immediate_Offset (word 32)) *)
  w 0xaa0003f3;         (* arm_MOV X19 X0 *)
  w 0xaa0103f4;         (* arm_MOV X20 X1 *)
  w 0xaa0203f5;         (* arm_MOV X21 X2 *)
  w 0xaa0303f6;         (* arm_MOV X22 X3 *)
  w 0xf103fcbf;         (* arm_CMP X5 (rvalue (word 255)) *)
  w 0x54000308;         (* arm_BHI (word 96) *)
  w 0x9100a3e0;         (* arm_ADD X0 SP (rvalue (word 40)) *)
  w 0xd2800021;         (* arm_MOV X1 (rvalue (word 1)) *)
  w 0xaa0403e2;         (* arm_MOV X2 X4 *)
  w 0xaa0503e3;         (* arm_MOV X3 X5 *)
  w 0x97ffff73;         (* arm_BL (word 268434892) *)
  w 0xf900abe0;         (* arm_STR X0 SP (Immediate_Offset (word 336)) *)
  w 0x910563e0;         (* arm_ADD X0 SP (rvalue (word 344)) *)
  w 0x940022e0;         (* arm_BL (word 35712) *)
  w 0x910563e0;         (* arm_ADD X0 SP (rvalue (word 344)) *)
  w 0xaa1303e1;         (* arm_MOV X1 X19 *)
  w 0xaa1403e2;         (* arm_MOV X2 X20 *)
  w 0x94002304;         (* arm_BL (word 35856) *)
  w 0x9108c3e0;         (* arm_ADD X0 SP (rvalue (word 560)) *)
  w 0x910563e1;         (* arm_ADD X1 SP (rvalue (word 344)) *)
  w 0x9400233b;         (* arm_BL (word 36076) *)
  w 0x9108c3e0;         (* arm_ADD X0 SP (rvalue (word 560)) *)
  w 0xd2800801;         (* arm_MOV X1 (rvalue (word 64)) *)
  w 0xaa1503e2;         (* arm_MOV X2 X21 *)
  w 0xaa1603e3;         (* arm_MOV X3 X22 *)
  w 0x9100a3e4;         (* arm_ADD X4 SP (rvalue (word 40)) *)
  w 0xf940abe5;         (* arm_LDR X5 SP (Immediate_Offset (word 336)) *)
  w 0x97fffef8;         (* arm_BL (word 268434400) *)
  w 0x14000002;         (* arm_B (word 8) *)
  w 0xaa1f03e0;         (* arm_MOV X0 XZR *)
  w 0xa94053f3;         (* arm_LDP X19 X20 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9415bf5;         (* arm_LDP X21 X22 SP (Immediate_Offset (iword (&16))) *)
  w 0xf94013fe;         (* arm_LDR X30 SP (Immediate_Offset (word 32)) *)
  w 0x9109c3ff;         (* arm_ADD SP SP (rvalue (word 624)) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xaa1f03e4;         (* arm_MOV X4 XZR *)
  w 0xeb000042;         (* arm_SUBS X2 X2 X0 *)
  w 0x54000203;         (* arm_BCC (word 64) *)
  w 0xb40000e0;         (* arm_CBZ X0 (word 28) *)
  w 0xf8647865;         (* arm_LDR X5 X3 (Shiftreg_Offset X4 3) *)
  w 0xf8647826;         (* arm_LDR X6 X1 (Shiftreg_Offset X4 3) *)
  w 0xfa0600bf;         (* arm_SBCS XZR X5 X6 *)
  w 0x91000484;         (* arm_ADD X4 X4 (rvalue (word 1)) *)
  w 0xd1000400;         (* arm_SUB X0 X0 (rvalue (word 1)) *)
  w 0xb5ffff60;         (* arm_CBNZ X0 (word 2097132) *)
  w 0xb40000c2;         (* arm_CBZ X2 (word 24) *)
  w 0xf8647865;         (* arm_LDR X5 X3 (Shiftreg_Offset X4 3) *)
  w 0xfa1f00bf;         (* arm_SBCS XZR X5 XZR *)
  w 0x91000484;         (* arm_ADD X4 X4 (rvalue (word 1)) *)
  w 0xd1000442;         (* arm_SUB X2 X2 (rvalue (word 1)) *)
  w 0xb5ffff82;         (* arm_CBNZ X2 (word 2097136) *)
  w 0x9a9f37e0;         (* arm_CSET X0 Condition_CS *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0xb4000102;         (* arm_CBZ X2 (word 32) *)
  w 0xcb020000;         (* arm_SUB X0 X0 X2 *)
  w 0xf8647865;         (* arm_LDR X5 X3 (Shiftreg_Offset X4 3) *)
  w 0xf8647826;         (* arm_LDR X6 X1 (Shiftreg_Offset X4 3) *)
  w 0xfa0600bf;         (* arm_SBCS XZR X5 X6 *)
  w 0x91000484;         (* arm_ADD X4 X4 (rvalue (word 1)) *)
  w 0xd1000442;         (* arm_SUB X2 X2 (rvalue (word 1)) *)
  w 0xb5ffff62;         (* arm_CBNZ X2 (word 2097132) *)
  w 0xf8647825;         (* arm_LDR X5 X1 (Shiftreg_Offset X4 3) *)
  w 0xfa0503ff;         (* arm_NGCS XZR X5 *)
  w 0x91000484;         (* arm_ADD X4 X4 (rvalue (word 1)) *)
  w 0xd1000400;         (* arm_SUB X0 X0 (rvalue (word 1)) *)
  w 0xb5ffff80;         (* arm_CBNZ X0 (word 2097136) *)
  w 0x9a9f37e0;         (* arm_CSET X0 Condition_CS *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xa9bf53f3;         (* arm_STP X19 X20 SP (Preimmediate_Offset (iword (-- &16))) *)
  w 0xaa0003f3;         (* arm_MOV X19 X0 *)
  w 0xa940382d;         (* arm_LDP X13 X14 X1 (Immediate_Offset (iword (&0))) *)
  w 0xa9400047;         (* arm_LDP X7 X0 X2 (Immediate_Offset (iword (&0))) *)
  w 0x9b077da8;         (* arm_MUL X8 X13 X7 *)
  w 0x9bc77da9;         (* arm_UMULH X9 X13 X7 *)
  w 0x9b007db0;         (* arm_MUL X16 X13 X0 *)
  w 0x9bc07daa;         (* arm_UMULH X10 X13 X0 *)
  w 0xab100129;         (* arm_ADDS X9 X9 X16 *)
  w 0xa9411444;         (* arm_LDP X4 X5 X2 (Immediate_Offset (iword (&16))) *)
  w 0x9b047db0;         (* arm_MUL X16 X13 X4 *)
  w 0x9bc47dab;         (* arm_UMULH X11 X13 X4 *)
  w 0xba10014a;         (* arm_ADCS X10 X10 X16 *)
  w 0x9b057db0;         (* arm_MUL X16 X13 X5 *)
  w 0x9bc57dac;         (* arm_UMULH X12 X13 X5 *)
  w 0xba10016b;         (* arm_ADCS X11 X11 X16 *)
  w 0x9a1f018c;         (* arm_ADC X12 X12 XZR *)
  w 0xa940186f;         (* arm_LDP X15 X6 X3 (Immediate_Offset (iword (&0))) *)
  w 0xab0f0108;         (* arm_ADDS X8 X8 X15 *)
  w 0xba060129;         (* arm_ADCS X9 X9 X6 *)
  w 0xa941186f;         (* arm_LDP X15 X6 X3 (Immediate_Offset (iword (&16))) *)
  w 0xba0f014a;         (* arm_ADCS X10 X10 X15 *)
  w 0xba06016b;         (* arm_ADCS X11 X11 X6 *)
  w 0x9a1f018c;         (* arm_ADC X12 X12 XZR *)
  w 0xa941182f;         (* arm_LDP X15 X6 X1 (Immediate_Offset (iword (&16))) *)
  w 0x9b077dd0;         (* arm_MUL X16 X14 X7 *)
  w 0xab100129;         (* arm_ADDS X9 X9 X16 *)
  w 0x9b007dd0;         (* arm_MUL X16 X14 X0 *)
  w 0xba10014a;         (* arm_ADCS X10 X10 X16 *)
  w 0x9b047dd0;         (* arm_MUL X16 X14 X4 *)
  w 0xba10016b;         (* arm_ADCS X11 X11 X16 *)
  w 0x9b057dd0;         (* arm_MUL X16 X14 X5 *)
  w 0xba10018c;         (* arm_ADCS X12 X12 X16 *)
  w 0x9bc57dcd;         (* arm_UMULH X13 X14 X5 *)
  w 0x9a1f01ad;         (* arm_ADC X13 X13 XZR *)
  w 0x9bc77dd0;         (* arm_UMULH X16 X14 X7 *)
  w 0xab10014a;         (* arm_ADDS X10 X10 X16 *)
  w 0x9bc07dd0;         (* arm_UMULH X16 X14 X0 *)
  w 0xba10016b;         (* arm_ADCS X11 X11 X16 *)
  w 0x9bc47dd0;         (* arm_UMULH X16 X14 X4 *)
  w 0xba10018c;         (* arm_ADCS X12 X12 X16 *)
  w 0x9a1f01ad;         (* arm_ADC X13 X13 XZR *)
  w 0x9b077df0;         (* arm_MUL X16 X15 X7 *)
  w 0xab10014a;         (* arm_ADDS X10 X10 X16 *)
  w 0x9b007df0;         (* arm_MUL X16 X15 X0 *)
  w 0xba10016b;         (* arm_ADCS X11 X11 X16 *)
  w 0x9b047df0;         (* arm_MUL X16 X15 X4 *)
  w 0xba10018c;         (* arm_ADCS X12 X12 X16 *)
  w 0x9b057df0;         (* arm_MUL X16 X15 X5 *)
  w 0xba1001ad;         (* arm_ADCS X13 X13 X16 *)
  w 0x9bc57dee;         (* arm_UMULH X14 X15 X5 *)
  w 0x9a1f01ce;         (* arm_ADC X14 X14 XZR *)
  w 0x9bc77df0;         (* arm_UMULH X16 X15 X7 *)
  w 0xab10016b;         (* arm_ADDS X11 X11 X16 *)
  w 0x9bc07df0;         (* arm_UMULH X16 X15 X0 *)
  w 0xba10018c;         (* arm_ADCS X12 X12 X16 *)
  w 0x9bc47df0;         (* arm_UMULH X16 X15 X4 *)
  w 0xba1001ad;         (* arm_ADCS X13 X13 X16 *)
  w 0x9a1f01ce;         (* arm_ADC X14 X14 XZR *)
  w 0x9b077cd0;         (* arm_MUL X16 X6 X7 *)
  w 0xab10016b;         (* arm_ADDS X11 X11 X16 *)
  w 0x9b007cd0;         (* arm_MUL X16 X6 X0 *)
  w 0xba10018c;         (* arm_ADCS X12 X12 X16 *)
  w 0x9b047cd0;         (* arm_MUL X16 X6 X4 *)
  w 0xba1001ad;         (* arm_ADCS X13 X13 X16 *)
  w 0x9b057cd0;         (* arm_MUL X16 X6 X5 *)
  w 0xba1001ce;         (* arm_ADCS X14 X14 X16 *)
  w 0x9bc57ccf;         (* arm_UMULH X15 X6 X5 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0x9bc77cd0;         (* arm_UMULH X16 X6 X7 *)
  w 0xab10018c;         (* arm_ADDS X12 X12 X16 *)
  w 0x9bc07cd0;         (* arm_UMULH X16 X6 X0 *)
  w 0xba1001ad;         (* arm_ADCS X13 X13 X16 *)
  w 0x9bc47cd0;         (* arm_UMULH X16 X6 X4 *)
  w 0xba1001ce;         (* arm_ADCS X14 X14 X16 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xd29a7da3;         (* arm_MOV X3 (rvalue (word 54253)) *)
  w 0xf2ab9ea3;         (* arm_MOVK X3 (word 23797) 16 *)
  w 0xf2cc6343;         (* arm_MOVK X3 (word 25370) 32 *)
  w 0xf2eb0243;         (* arm_MOVK X3 (word 22546) 48 *)
  w 0xd2939ac4;         (* arm_MOV X4 (rvalue (word 40150)) *)
  w 0xf2b45ee4;         (* arm_MOVK X4 (word 41719) 16 *)
  w 0xf2df3bc4;         (* arm_MOVK X4 (word 63966) 32 *)
  w 0xf2e29bc4;         (* arm_MOVK X4 (word 5342) 48 *)
  w 0xd37cfde2;         (* arm_LSR X2 X15 60 *)
  w 0x9240edef;         (* arm_AND X15 X15 (rvalue (word 1152921504606846975)) *)
  w 0x9b027c65;         (* arm_MUL X5 X3 X2 *)
  w 0x9b027c86;         (* arm_MUL X6 X4 X2 *)
  w 0x9bc27c67;         (* arm_UMULH X7 X3 X2 *)
  w 0xab0700c6;         (* arm_ADDS X6 X6 X7 *)
  w 0x9bc27c87;         (* arm_UMULH X7 X4 X2 *)
  w 0x9a1f00e7;         (* arm_ADC X7 X7 XZR *)
  w 0xeb05018c;         (* arm_SUBS X12 X12 X5 *)
  w 0xfa0601ad;         (* arm_SBCS X13 X13 X6 *)
  w 0xfa0701ce;         (* arm_SBCS X14 X14 X7 *)
  w 0xfa1f01ef;         (* arm_SBCS X15 X15 XZR *)
  w 0x9a9f3065;         (* arm_CSEL X5 X3 XZR Condition_CC *)
  w 0x9a9f3086;         (* arm_CSEL X6 X4 XZR Condition_CC *)
  w 0xab05018c;         (* arm_ADDS X12 X12 X5 *)
  w 0x924400a7;         (* arm_AND X7 X5 (rvalue (word 1152921504606846976)) *)
  w 0xba0601ad;         (* arm_ADCS X13 X13 X6 *)
  w 0xba1f01ce;         (* arm_ADCS X14 X14 XZR *)
  w 0x9a0701ef;         (* arm_ADC X15 X15 X7 *)
  w 0x93cef1e2;         (* arm_EXTR X2 X15 X14 60 *)
  w 0x9240edce;         (* arm_AND X14 X14 (rvalue (word 1152921504606846975)) *)
  w 0xcb4ff042;         (* arm_SUB X2 X2 (Shiftedreg X15 LSR 60) *)
  w 0x92440de5;         (* arm_AND X5 X15 (rvalue (word 17293822569102704640)) *)
  w 0x8b0501ce;         (* arm_ADD X14 X14 X5 *)
  w 0x9b027c65;         (* arm_MUL X5 X3 X2 *)
  w 0x9b027c86;         (* arm_MUL X6 X4 X2 *)
  w 0x9bc27c67;         (* arm_UMULH X7 X3 X2 *)
  w 0xab0700c6;         (* arm_ADDS X6 X6 X7 *)
  w 0x9bc27c87;         (* arm_UMULH X7 X4 X2 *)
  w 0x9a1f00e7;         (* arm_ADC X7 X7 XZR *)
  w 0xeb05016b;         (* arm_SUBS X11 X11 X5 *)
  w 0xfa06018c;         (* arm_SBCS X12 X12 X6 *)
  w 0xfa0701ad;         (* arm_SBCS X13 X13 X7 *)
  w 0xfa1f01ce;         (* arm_SBCS X14 X14 XZR *)
  w 0x9a9f3065;         (* arm_CSEL X5 X3 XZR Condition_CC *)
  w 0x9a9f3086;         (* arm_CSEL X6 X4 XZR Condition_CC *)
  w 0xab05016b;         (* arm_ADDS X11 X11 X5 *)
  w 0x924400a7;         (* arm_AND X7 X5 (rvalue (word 1152921504606846976)) *)
  w 0xba06018c;         (* arm_ADCS X12 X12 X6 *)
  w 0xba1f01ad;         (* arm_ADCS X13 X13 XZR *)
  w 0x9a0701ce;         (* arm_ADC X14 X14 X7 *)
  w 0x93cdf1c2;         (* arm_EXTR X2 X14 X13 60 *)
  w 0x9240edad;         (* arm_AND X13 X13 (rvalue (word 1152921504606846975)) *)
  w 0xcb4ef042;         (* arm_SUB X2 X2 (Shiftedreg X14 LSR 60) *)
  w 0x92440dc5;         (* arm_AND X5 X14 (rvalue (word 17293822569102704640)) *)
  w 0x8b0501ad;         (* arm_ADD X13 X13 X5 *)
  w 0x9b027c65;         (* arm_MUL X5 X3 X2 *)
  w 0x9b027c86;         (* arm_MUL X6 X4 X2 *)
  w 0x9bc27c67;         (* arm_UMULH X7 X3 X2 *)
  w 0xab0700c6;         (* arm_ADDS X6 X6 X7 *)
  w 0x9bc27c87;         (* arm_UMULH X7 X4 X2 *)
  w 0x9a1f00e7;         (* arm_ADC X7 X7 XZR *)
  w 0xeb05014a;         (* arm_SUBS X10 X10 X5 *)
  w 0xfa06016b;         (* arm_SBCS X11 X11 X6 *)
  w 0xfa07018c;         (* arm_SBCS X12 X12 X7 *)
  w 0xfa1f01ad;         (* arm_SBCS X13 X13 XZR *)
  w 0x9a9f3065;         (* arm_CSEL X5 X3 XZR Condition_CC *)
  w 0x9a9f3086;         (* arm_CSEL X6 X4 XZR Condition_CC *)
  w 0xab05014a;         (* arm_ADDS X10 X10 X5 *)
  w 0x924400a7;         (* arm_AND X7 X5 (rvalue (word 1152921504606846976)) *)
  w 0xba06016b;         (* arm_ADCS X11 X11 X6 *)
  w 0xba1f018c;         (* arm_ADCS X12 X12 XZR *)
  w 0x9a0701ad;         (* arm_ADC X13 X13 X7 *)
  w 0x93ccf1a2;         (* arm_EXTR X2 X13 X12 60 *)
  w 0x9240ed8c;         (* arm_AND X12 X12 (rvalue (word 1152921504606846975)) *)
  w 0xcb4df042;         (* arm_SUB X2 X2 (Shiftedreg X13 LSR 60) *)
  w 0x92440da5;         (* arm_AND X5 X13 (rvalue (word 17293822569102704640)) *)
  w 0x8b05018c;         (* arm_ADD X12 X12 X5 *)
  w 0x9b027c65;         (* arm_MUL X5 X3 X2 *)
  w 0x9b027c86;         (* arm_MUL X6 X4 X2 *)
  w 0x9bc27c67;         (* arm_UMULH X7 X3 X2 *)
  w 0xab0700c6;         (* arm_ADDS X6 X6 X7 *)
  w 0x9bc27c87;         (* arm_UMULH X7 X4 X2 *)
  w 0x9a1f00e7;         (* arm_ADC X7 X7 XZR *)
  w 0xeb050129;         (* arm_SUBS X9 X9 X5 *)
  w 0xfa06014a;         (* arm_SBCS X10 X10 X6 *)
  w 0xfa07016b;         (* arm_SBCS X11 X11 X7 *)
  w 0xfa1f018c;         (* arm_SBCS X12 X12 XZR *)
  w 0x9a9f3065;         (* arm_CSEL X5 X3 XZR Condition_CC *)
  w 0x9a9f3086;         (* arm_CSEL X6 X4 XZR Condition_CC *)
  w 0xab050129;         (* arm_ADDS X9 X9 X5 *)
  w 0x924400a7;         (* arm_AND X7 X5 (rvalue (word 1152921504606846976)) *)
  w 0xba06014a;         (* arm_ADCS X10 X10 X6 *)
  w 0xba1f016b;         (* arm_ADCS X11 X11 XZR *)
  w 0x9a07018c;         (* arm_ADC X12 X12 X7 *)
  w 0x93cbf182;         (* arm_EXTR X2 X12 X11 60 *)
  w 0x9240ed6b;         (* arm_AND X11 X11 (rvalue (word 1152921504606846975)) *)
  w 0xcb4cf042;         (* arm_SUB X2 X2 (Shiftedreg X12 LSR 60) *)
  w 0x92440d85;         (* arm_AND X5 X12 (rvalue (word 17293822569102704640)) *)
  w 0x8b05016b;         (* arm_ADD X11 X11 X5 *)
  w 0x9b027c65;         (* arm_MUL X5 X3 X2 *)
  w 0x9b027c86;         (* arm_MUL X6 X4 X2 *)
  w 0x9bc27c67;         (* arm_UMULH X7 X3 X2 *)
  w 0xab0700c6;         (* arm_ADDS X6 X6 X7 *)
  w 0x9bc27c87;         (* arm_UMULH X7 X4 X2 *)
  w 0x9a1f00e7;         (* arm_ADC X7 X7 XZR *)
  w 0xeb050108;         (* arm_SUBS X8 X8 X5 *)
  w 0xfa060129;         (* arm_SBCS X9 X9 X6 *)
  w 0xfa07014a;         (* arm_SBCS X10 X10 X7 *)
  w 0xfa1f016b;         (* arm_SBCS X11 X11 XZR *)
  w 0x9a9f3065;         (* arm_CSEL X5 X3 XZR Condition_CC *)
  w 0x9a9f3086;         (* arm_CSEL X6 X4 XZR Condition_CC *)
  w 0xab050108;         (* arm_ADDS X8 X8 X5 *)
  w 0x924400a7;         (* arm_AND X7 X5 (rvalue (word 1152921504606846976)) *)
  w 0xba060129;         (* arm_ADCS X9 X9 X6 *)
  w 0xba1f014a;         (* arm_ADCS X10 X10 XZR *)
  w 0x9a07016b;         (* arm_ADC X11 X11 X7 *)
  w 0xa9002668;         (* arm_STP X8 X9 X19 (Immediate_Offset (iword (&0))) *)
  w 0xa9012e6a;         (* arm_STP X10 X11 X19 (Immediate_Offset (iword (&16))) *)
  w 0xa8c153f3;         (* arm_LDP X19 X20 SP (Postimmediate_Offset (iword (&16))) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xf100103f;         (* arm_CMP X1 (rvalue (word 4)) *)
  w 0x540007c3;         (* arm_BCC (word 248) *)
  w 0xd1001021;         (* arm_SUB X1 X1 (rvalue (word 4)) *)
  w 0xd37df027;         (* arm_LSL X7 X1 3 *)
  w 0x8b0200e7;         (* arm_ADD X7 X7 X2 *)
  w 0xa94118e5;         (* arm_LDP X5 X6 X7 (Immediate_Offset (iword (&16))) *)
  w 0xa94010e3;         (* arm_LDP X3 X4 X7 (Immediate_Offset (iword (&0))) *)
  w 0xd29a7dab;         (* arm_MOV X11 (rvalue (word 54253)) *)
  w 0xf2ab9eab;         (* arm_MOVK X11 (word 23797) 16 *)
  w 0xf2cc634b;         (* arm_MOVK X11 (word 25370) 32 *)
  w 0xf2eb024b;         (* arm_MOVK X11 (word 22546) 48 *)
  w 0xd2939acc;         (* arm_MOV X12 (rvalue (word 40150)) *)
  w 0xf2b45eec;         (* arm_MOVK X12 (word 41719) 16 *)
  w 0xf2df3bcc;         (* arm_MOVK X12 (word 63966) 32 *)
  w 0xf2e29bcc;         (* arm_MOVK X12 (word 5342) 48 *)
  w 0xd37cfccd;         (* arm_LSR X13 X6 60 *)
  w 0x9240ecc6;         (* arm_AND X6 X6 (rvalue (word 1152921504606846975)) *)
  w 0x9b0d7d67;         (* arm_MUL X7 X11 X13 *)
  w 0x9b0d7d88;         (* arm_MUL X8 X12 X13 *)
  w 0x9bcd7d69;         (* arm_UMULH X9 X11 X13 *)
  w 0xab090108;         (* arm_ADDS X8 X8 X9 *)
  w 0x9bcd7d89;         (* arm_UMULH X9 X12 X13 *)
  w 0x9a1f0129;         (* arm_ADC X9 X9 XZR *)
  w 0xeb070063;         (* arm_SUBS X3 X3 X7 *)
  w 0xfa080084;         (* arm_SBCS X4 X4 X8 *)
  w 0xfa0900a5;         (* arm_SBCS X5 X5 X9 *)
  w 0xfa1f00c6;         (* arm_SBCS X6 X6 XZR *)
  w 0x9a9f3167;         (* arm_CSEL X7 X11 XZR Condition_CC *)
  w 0x9a9f3188;         (* arm_CSEL X8 X12 XZR Condition_CC *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0x924400e7;         (* arm_AND X7 X7 (rvalue (word 1152921504606846976)) *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a0700c6;         (* arm_ADC X6 X6 X7 *)
  w 0xb4000341;         (* arm_CBZ X1 (word 104) *)
  w 0x93c5f0cd;         (* arm_EXTR X13 X6 X5 60 *)
  w 0x9240eca5;         (* arm_AND X5 X5 (rvalue (word 1152921504606846975)) *)
  w 0xcb46f1ad;         (* arm_SUB X13 X13 (Shiftedreg X6 LSR 60) *)
  w 0x92440cc6;         (* arm_AND X6 X6 (rvalue (word 17293822569102704640)) *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x9b0d7d67;         (* arm_MUL X7 X11 X13 *)
  w 0x9b0d7d88;         (* arm_MUL X8 X12 X13 *)
  w 0x9bcd7d69;         (* arm_UMULH X9 X11 X13 *)
  w 0xab090108;         (* arm_ADDS X8 X8 X9 *)
  w 0x9bcd7d89;         (* arm_UMULH X9 X12 X13 *)
  w 0x9a1f0129;         (* arm_ADC X9 X9 XZR *)
  w 0xd1000421;         (* arm_SUB X1 X1 (rvalue (word 1)) *)
  w 0xf861784d;         (* arm_LDR X13 X2 (Shiftreg_Offset X1 3) *)
  w 0xeb0701a7;         (* arm_SUBS X7 X13 X7 *)
  w 0xfa080068;         (* arm_SBCS X8 X3 X8 *)
  w 0xfa090089;         (* arm_SBCS X9 X4 X9 *)
  w 0xfa1f00aa;         (* arm_SBCS X10 X5 XZR *)
  w 0x9a9f3163;         (* arm_CSEL X3 X11 XZR Condition_CC *)
  w 0x9a9f3184;         (* arm_CSEL X4 X12 XZR Condition_CC *)
  w 0xab0300e3;         (* arm_ADDS X3 X7 X3 *)
  w 0x92440086;         (* arm_AND X6 X4 (rvalue (word 1152921504606846976)) *)
  w 0xba040104;         (* arm_ADCS X4 X8 X4 *)
  w 0xba1f0125;         (* arm_ADCS X5 X9 XZR *)
  w 0x9a060146;         (* arm_ADC X6 X10 X6 *)
  w 0xb5fffd01;         (* arm_CBNZ X1 (word 2097056) *)
  w 0xa9001003;         (* arm_STP X3 X4 X0 (Immediate_Offset (iword (&0))) *)
  w 0xa9011805;         (* arm_STP X5 X6 X0 (Immediate_Offset (iword (&16))) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xaa1f03e3;         (* arm_MOV X3 XZR *)
  w 0xaa1f03e4;         (* arm_MOV X4 XZR *)
  w 0xaa1f03e5;         (* arm_MOV X5 XZR *)
  w 0xaa1f03e6;         (* arm_MOV X6 XZR *)
  w 0xb4ffff21;         (* arm_CBZ X1 (word 2097124) *)
  w 0xf9400043;         (* arm_LDR X3 X2 (Immediate_Offset (word 0)) *)
  w 0xf1000421;         (* arm_SUBS X1 X1 (rvalue (word 1)) *)
  w 0x54fffec0;         (* arm_BEQ (word 2097112) *)
  w 0xf9400444;         (* arm_LDR X4 X2 (Immediate_Offset (word 8)) *)
  w 0xf1000421;         (* arm_SUBS X1 X1 (rvalue (word 1)) *)
  w 0x54fffe60;         (* arm_BEQ (word 2097100) *)
  w 0xf9400845;         (* arm_LDR X5 X2 (Immediate_Offset (word 16)) *)
  w 0x17fffff1;         (* arm_B (word 268435396) *)
  w 0xa9400c22;         (* arm_LDP X2 X3 X1 (Immediate_Offset (iword (&0))) *)
  w 0x92800247;         (* arm_MOVN X7 (word 18) 0 *)
  w 0xaa030046;         (* arm_ORR X6 X2 X3 *)
  w 0xeb0200e2;         (* arm_SUBS X2 X7 X2 *)
  w 0x92800007;         (* arm_MOVN X7 (word 0) 0 *)
  w 0xfa0300e3;         (* arm_SBCS X3 X7 X3 *)
  w 0xa9411424;         (* arm_LDP X4 X5 X1 (Immediate_Offset (iword (&16))) *)
  w 0xaa0400c6;         (* arm_ORR X6 X6 X4 *)
  w 0xfa0400e4;         (* arm_SBCS X4 X7 X4 *)
  w 0x92f00007;         (* arm_MOVN X7 (word 32768) 48 *)
  w 0xaa0500c6;         (* arm_ORR X6 X6 X5 *)
  w 0xda0500e5;         (* arm_SBC X5 X7 X5 *)
  w 0xeb1f00df;         (* arm_CMP X6 XZR *)
  w 0x9a9f1042;         (* arm_CSEL X2 X2 XZR Condition_NE *)
  w 0x9a9f1063;         (* arm_CSEL X3 X3 XZR Condition_NE *)
  w 0x9a9f1084;         (* arm_CSEL X4 X4 XZR Condition_NE *)
  w 0x9a9f10a5;         (* arm_CSEL X5 X5 XZR Condition_NE *)
  w 0xa9000c02;         (* arm_STP X2 X3 X0 (Immediate_Offset (iword (&0))) *)
  w 0xa9011404;         (* arm_STP X4 X5 X0 (Immediate_Offset (iword (&16))) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xa9bf53f3;         (* arm_STP X19 X20 SP (Preimmediate_Offset (iword (-- &16))) *)
  w 0xa9bf7bf5;         (* arm_STP X21 X30 SP (Preimmediate_Offset (iword (-- &16))) *)
  w 0xd10303ff;         (* arm_SUB SP SP (rvalue (word 192)) *)
  w 0xaa0003f3;         (* arm_MOV X19 X0 *)
  w 0x39400020;         (* arm_LDRB W0 X1 (Immediate_Offset (word 0)) *)
  w 0xd3481c04;         (* arm_LSL X4 X0 56 *)
  w 0x39400420;         (* arm_LDRB W0 X1 (Immediate_Offset (word 1)) *)
  w 0x93c42004;         (* arm_EXTR X4 X0 X4 8 *)
  w 0x39400820;         (* arm_LDRB W0 X1 (Immediate_Offset (word 2)) *)
  w 0x93c42004;         (* arm_EXTR X4 X0 X4 8 *)
  w 0x39400c20;         (* arm_LDRB W0 X1 (Immediate_Offset (word 3)) *)
  w 0x93c42004;         (* arm_EXTR X4 X0 X4 8 *)
  w 0x39401020;         (* arm_LDRB W0 X1 (Immediate_Offset (word 4)) *)
  w 0x93c42004;         (* arm_EXTR X4 X0 X4 8 *)
  w 0x39401420;         (* arm_LDRB W0 X1 (Immediate_Offset (word 5)) *)
  w 0x93c42004;         (* arm_EXTR X4 X0 X4 8 *)
  w 0x39401820;         (* arm_LDRB W0 X1 (Immediate_Offset (word 6)) *)
  w 0x93c42004;         (* arm_EXTR X4 X0 X4 8 *)
  w 0x39401c20;         (* arm_LDRB W0 X1 (Immediate_Offset (word 7)) *)
  w 0x93c42004;         (* arm_EXTR X4 X0 X4 8 *)
  w 0x39402020;         (* arm_LDRB W0 X1 (Immediate_Offset (word 8)) *)
  w 0xd3481c05;         (* arm_LSL X5 X0 56 *)
  w 0x39402420;         (* arm_LDRB W0 X1 (Immediate_Offset (word 9)) *)
  w 0x93c52005;         (* arm_EXTR X5 X0 X5 8 *)
  w 0x39402820;         (* arm_LDRB W0 X1 (Immediate_Offset (word 10)) *)
  w 0x93c52005;         (* arm_EXTR X5 X0 X5 8 *)
  w 0x39402c20;         (* arm_LDRB W0 X1 (Immediate_Offset (word 11)) *)
  w 0x93c52005;         (* arm_EXTR X5 X0 X5 8 *)
  w 0x39403020;         (* arm_LDRB W0 X1 (Immediate_Offset (word 12)) *)
  w 0x93c52005;         (* arm_EXTR X5 X0 X5 8 *)
  w 0x39403420;         (* arm_LDRB W0 X1 (Immediate_Offset (word 13)) *)
  w 0x93c52005;         (* arm_EXTR X5 X0 X5 8 *)
  w 0x39403820;         (* arm_LDRB W0 X1 (Immediate_Offset (word 14)) *)
  w 0x93c52005;         (* arm_EXTR X5 X0 X5 8 *)
  w 0x39403c20;         (* arm_LDRB W0 X1 (Immediate_Offset (word 15)) *)
  w 0x93c52005;         (* arm_EXTR X5 X0 X5 8 *)
  w 0x39404020;         (* arm_LDRB W0 X1 (Immediate_Offset (word 16)) *)
  w 0xd3481c06;         (* arm_LSL X6 X0 56 *)
  w 0x39404420;         (* arm_LDRB W0 X1 (Immediate_Offset (word 17)) *)
  w 0x93c62006;         (* arm_EXTR X6 X0 X6 8 *)
  w 0x39404820;         (* arm_LDRB W0 X1 (Immediate_Offset (word 18)) *)
  w 0x93c62006;         (* arm_EXTR X6 X0 X6 8 *)
  w 0x39404c20;         (* arm_LDRB W0 X1 (Immediate_Offset (word 19)) *)
  w 0x93c62006;         (* arm_EXTR X6 X0 X6 8 *)
  w 0x39405020;         (* arm_LDRB W0 X1 (Immediate_Offset (word 20)) *)
  w 0x93c62006;         (* arm_EXTR X6 X0 X6 8 *)
  w 0x39405420;         (* arm_LDRB W0 X1 (Immediate_Offset (word 21)) *)
  w 0x93c62006;         (* arm_EXTR X6 X0 X6 8 *)
  w 0x39405820;         (* arm_LDRB W0 X1 (Immediate_Offset (word 22)) *)
  w 0x93c62006;         (* arm_EXTR X6 X0 X6 8 *)
  w 0x39405c20;         (* arm_LDRB W0 X1 (Immediate_Offset (word 23)) *)
  w 0x93c62006;         (* arm_EXTR X6 X0 X6 8 *)
  w 0x39406020;         (* arm_LDRB W0 X1 (Immediate_Offset (word 24)) *)
  w 0xd3481c07;         (* arm_LSL X7 X0 56 *)
  w 0x39406420;         (* arm_LDRB W0 X1 (Immediate_Offset (word 25)) *)
  w 0x93c72007;         (* arm_EXTR X7 X0 X7 8 *)
  w 0x39406820;         (* arm_LDRB W0 X1 (Immediate_Offset (word 26)) *)
  w 0x93c72007;         (* arm_EXTR X7 X0 X7 8 *)
  w 0x39406c20;         (* arm_LDRB W0 X1 (Immediate_Offset (word 27)) *)
  w 0x93c72007;         (* arm_EXTR X7 X0 X7 8 *)
  w 0x39407020;         (* arm_LDRB W0 X1 (Immediate_Offset (word 28)) *)
  w 0x93c72007;         (* arm_EXTR X7 X0 X7 8 *)
  w 0x39407420;         (* arm_LDRB W0 X1 (Immediate_Offset (word 29)) *)
  w 0x93c72007;         (* arm_EXTR X7 X0 X7 8 *)
  w 0x39407820;         (* arm_LDRB W0 X1 (Immediate_Offset (word 30)) *)
  w 0x93c72007;         (* arm_EXTR X7 X0 X7 8 *)
  w 0x39407c20;         (* arm_LDRB W0 X1 (Immediate_Offset (word 31)) *)
  w 0x93c72007;         (* arm_EXTR X7 X0 X7 8 *)
  w 0xa90017e4;         (* arm_STP X4 X5 SP (Immediate_Offset (iword (&0))) *)
  w 0xd37ffcf4;         (* arm_LSR X20 X7 63 *)
  w 0x9240f8e7;         (* arm_AND X7 X7 (rvalue (word 9223372036854775807)) *)
  w 0xa9011fe6;         (* arm_STP X6 X7 SP (Immediate_Offset (iword (&16))) *)
  w 0xb1004c9f;         (* arm_CMN X4 (rvalue (word 19)) *)
  w 0xba1f00bf;         (* arm_ADCS XZR X5 XZR *)
  w 0xba1f00df;         (* arm_ADCS XZR X6 XZR *)
  w 0xba1f00ff;         (* arm_ADCS XZR X7 XZR *)
  w 0x9a9f57f5;         (* arm_CSET X21 Condition_MI *)
  w 0x910203e0;         (* arm_ADD X0 SP (rvalue (word 128)) *)
  w 0xd2800021;         (* arm_MOV X1 (rvalue (word 1)) *)
  w 0x910003e2;         (* arm_ADD X2 SP (rvalue (word 0)) *)
  w 0x94000147;         (* arm_BL (word 1308) *)
  w 0xa94807e0;         (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9490fe2;         (* arm_LDP X2 X3 SP (Immediate_Offset (iword (&144))) *)
  w 0xd2f00004;         (* arm_MOVZ X4 (word 32768) 48 *)
  w 0xf1005000;         (* arm_SUBS X0 X0 (rvalue (word 20)) *)
  w 0xfa1f0021;         (* arm_SBCS X1 X1 XZR *)
  w 0xfa1f0042;         (* arm_SBCS X2 X2 XZR *)
  w 0xda040063;         (* arm_SBC X3 X3 X4 *)
  w 0xa90607e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&96))) *)
  w 0xa9070fe2;         (* arm_STP X2 X3 SP (Immediate_Offset (iword (&112))) *)
  w 0xd28f1460;         (* arm_MOV X0 (rvalue (word 30883)) *)
  w 0xf2a26b20;         (* arm_MOVK X0 (word 4953) 16 *)
  w 0xf2c9b940;         (* arm_MOVK X0 (word 19914) 32 *)
  w 0xf2eebd60;         (* arm_MOVK X0 (word 30187) 48 *)
  w 0xd29b1561;         (* arm_MOV X1 (rvalue (word 55467)) *)
  w 0xf2a82821;         (* arm_MOVK X1 (word 16705) 16 *)
  w 0xf2c149a1;         (* arm_MOVK X1 (word 2637) 32 *)
  w 0xf2e00e01;         (* arm_MOVK X1 (word 112) 48 *)
  w 0xd29d1302;         (* arm_MOV X2 (rvalue (word 59544)) *)
  w 0xf2aeef22;         (* arm_MOVK X2 (word 30585) 16 *)
  w 0xf2c80f22;         (* arm_MOVK X2 (word 16505) 32 *)
  w 0xf2f198e2;         (* arm_MOVK X2 (word 36039) 48 *)
  w 0xd29fce63;         (* arm_MOV X3 (rvalue (word 65139)) *)
  w 0xf2a56de3;         (* arm_MOVK X3 (word 11119) 16 *)
  w 0xf2cd9dc3;         (* arm_MOVK X3 (word 27886) 32 *)
  w 0xf2ea4063;         (* arm_MOVK X3 (word 20995) 48 *)
  w 0xa90a07e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&160))) *)
  w 0xa90b0fe2;         (* arm_STP X2 X3 SP (Immediate_Offset (iword (&176))) *)
  w 0x910203e0;         (* arm_ADD X0 SP (rvalue (word 128)) *)
  w 0x910283e1;         (* arm_ADD X1 SP (rvalue (word 160)) *)
  w 0x910203e2;         (* arm_ADD X2 SP (rvalue (word 128)) *)
  w 0x940000c3;         (* arm_BL (word 780) *)
  w 0xa94807e0;         (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9490fe2;         (* arm_LDP X2 X3 SP (Immediate_Offset (iword (&144))) *)
  w 0xb1000400;         (* arm_ADDS X0 X0 (rvalue (word 1)) *)
  w 0xba1f0021;         (* arm_ADCS X1 X1 XZR *)
  w 0xba1f0042;         (* arm_ADCS X2 X2 XZR *)
  w 0xba1f0063;         (* arm_ADCS X3 X3 XZR *)
  w 0xa90807e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9090fe2;         (* arm_STP X2 X3 SP (Immediate_Offset (iword (&144))) *)
  w 0x910283e0;         (* arm_ADD X0 SP (rvalue (word 160)) *)
  w 0x910183e1;         (* arm_ADD X1 SP (rvalue (word 96)) *)
  w 0x910203e2;         (* arm_ADD X2 SP (rvalue (word 128)) *)
  w 0x940000b7;         (* arm_BL (word 732) *)
  w 0x910103e0;         (* arm_ADD X0 SP (rvalue (word 64)) *)
  w 0xd2800021;         (* arm_MOV X1 (rvalue (word 1)) *)
  w 0x910283e2;         (* arm_ADD X2 SP (rvalue (word 160)) *)
  w 0x94000118;         (* arm_BL (word 1120) *)
  w 0x910103e0;         (* arm_ADD X0 SP (rvalue (word 64)) *)
  w 0x910103e1;         (* arm_ADD X1 SP (rvalue (word 64)) *)
  w 0x910283e2;         (* arm_ADD X2 SP (rvalue (word 160)) *)
  w 0x940000af;         (* arm_BL (word 700) *)
  w 0x910083e0;         (* arm_ADD X0 SP (rvalue (word 32)) *)
  w 0xd2800041;         (* arm_MOV X1 (rvalue (word 2)) *)
  w 0x910103e2;         (* arm_ADD X2 SP (rvalue (word 64)) *)
  w 0x94000110;         (* arm_BL (word 1088) *)
  w 0x910103e0;         (* arm_ADD X0 SP (rvalue (word 64)) *)
  w 0x910083e1;         (* arm_ADD X1 SP (rvalue (word 32)) *)
  w 0x910103e2;         (* arm_ADD X2 SP (rvalue (word 64)) *)
  w 0x940000a7;         (* arm_BL (word 668) *)
  w 0x910083e0;         (* arm_ADD X0 SP (rvalue (word 32)) *)
  w 0xd2800021;         (* arm_MOV X1 (rvalue (word 1)) *)
  w 0x910103e2;         (* arm_ADD X2 SP (rvalue (word 64)) *)
  w 0x94000108;         (* arm_BL (word 1056) *)
  w 0x910203e0;         (* arm_ADD X0 SP (rvalue (word 128)) *)
  w 0x910083e1;         (* arm_ADD X1 SP (rvalue (word 32)) *)
  w 0x910283e2;         (* arm_ADD X2 SP (rvalue (word 160)) *)
  w 0x9400009f;         (* arm_BL (word 636) *)
  w 0x910083e0;         (* arm_ADD X0 SP (rvalue (word 32)) *)
  w 0xd28000a1;         (* arm_MOV X1 (rvalue (word 5)) *)
  w 0x910203e2;         (* arm_ADD X2 SP (rvalue (word 128)) *)
  w 0x94000100;         (* arm_BL (word 1024) *)
  w 0x910103e0;         (* arm_ADD X0 SP (rvalue (word 64)) *)
  w 0x910083e1;         (* arm_ADD X1 SP (rvalue (word 32)) *)
  w 0x910203e2;         (* arm_ADD X2 SP (rvalue (word 128)) *)
  w 0x94000097;         (* arm_BL (word 604) *)
  w 0x910083e0;         (* arm_ADD X0 SP (rvalue (word 32)) *)
  w 0xd2800141;         (* arm_MOV X1 (rvalue (word 10)) *)
  w 0x910103e2;         (* arm_ADD X2 SP (rvalue (word 64)) *)
  w 0x940000f8;         (* arm_BL (word 992) *)
  w 0x910103e0;         (* arm_ADD X0 SP (rvalue (word 64)) *)
  w 0x910083e1;         (* arm_ADD X1 SP (rvalue (word 32)) *)
  w 0x910103e2;         (* arm_ADD X2 SP (rvalue (word 64)) *)
  w 0x9400008f;         (* arm_BL (word 572) *)
  w 0x910083e0;         (* arm_ADD X0 SP (rvalue (word 32)) *)
  w 0xd28000a1;         (* arm_MOV X1 (rvalue (word 5)) *)
  w 0x910103e2;         (* arm_ADD X2 SP (rvalue (word 64)) *)
  w 0x940000f0;         (* arm_BL (word 960) *)
  w 0x910203e0;         (* arm_ADD X0 SP (rvalue (word 128)) *)
  w 0x910083e1;         (* arm_ADD X1 SP (rvalue (word 32)) *)
  w 0x910203e2;         (* arm_ADD X2 SP (rvalue (word 128)) *)
  w 0x94000087;         (* arm_BL (word 540) *)
  w 0x910083e0;         (* arm_ADD X0 SP (rvalue (word 32)) *)
  w 0xd2800321;         (* arm_MOV X1 (rvalue (word 25)) *)
  w 0x910203e2;         (* arm_ADD X2 SP (rvalue (word 128)) *)
  w 0x940000e8;         (* arm_BL (word 928) *)
  w 0x910103e0;         (* arm_ADD X0 SP (rvalue (word 64)) *)
  w 0x910083e1;         (* arm_ADD X1 SP (rvalue (word 32)) *)
  w 0x910203e2;         (* arm_ADD X2 SP (rvalue (word 128)) *)
  w 0x9400007f;         (* arm_BL (word 508) *)
  w 0x910083e0;         (* arm_ADD X0 SP (rvalue (word 32)) *)
  w 0xd2800641;         (* arm_MOV X1 (rvalue (word 50)) *)
  w 0x910103e2;         (* arm_ADD X2 SP (rvalue (word 64)) *)
  w 0x940000e0;         (* arm_BL (word 896) *)
  w 0x910103e0;         (* arm_ADD X0 SP (rvalue (word 64)) *)
  w 0x910083e1;         (* arm_ADD X1 SP (rvalue (word 32)) *)
  w 0x910103e2;         (* arm_ADD X2 SP (rvalue (word 64)) *)
  w 0x94000077;         (* arm_BL (word 476) *)
  w 0x910083e0;         (* arm_ADD X0 SP (rvalue (word 32)) *)
  w 0xd2800321;         (* arm_MOV X1 (rvalue (word 25)) *)
  w 0x910103e2;         (* arm_ADD X2 SP (rvalue (word 64)) *)
  w 0x940000d8;         (* arm_BL (word 864) *)
  w 0x910203e0;         (* arm_ADD X0 SP (rvalue (word 128)) *)
  w 0x910083e1;         (* arm_ADD X1 SP (rvalue (word 32)) *)
  w 0x910203e2;         (* arm_ADD X2 SP (rvalue (word 128)) *)
  w 0x9400006f;         (* arm_BL (word 444) *)
  w 0x910083e0;         (* arm_ADD X0 SP (rvalue (word 32)) *)
  w 0xd2800fa1;         (* arm_MOV X1 (rvalue (word 125)) *)
  w 0x910203e2;         (* arm_ADD X2 SP (rvalue (word 128)) *)
  w 0x940000d0;         (* arm_BL (word 832) *)
  w 0x910203e0;         (* arm_ADD X0 SP (rvalue (word 128)) *)
  w 0x910083e1;         (* arm_ADD X1 SP (rvalue (word 32)) *)
  w 0x910203e2;         (* arm_ADD X2 SP (rvalue (word 128)) *)
  w 0x94000067;         (* arm_BL (word 412) *)
  w 0x910083e0;         (* arm_ADD X0 SP (rvalue (word 32)) *)
  w 0xd2800041;         (* arm_MOV X1 (rvalue (word 2)) *)
  w 0x910203e2;         (* arm_ADD X2 SP (rvalue (word 128)) *)
  w 0x940000c8;         (* arm_BL (word 800) *)
  w 0x910083e0;         (* arm_ADD X0 SP (rvalue (word 32)) *)
  w 0x910083e1;         (* arm_ADD X1 SP (rvalue (word 32)) *)
  w 0x910283e2;         (* arm_ADD X2 SP (rvalue (word 160)) *)
  w 0x9400005f;         (* arm_BL (word 380) *)
  w 0x910203e0;         (* arm_ADD X0 SP (rvalue (word 128)) *)
  w 0xd2800021;         (* arm_MOV X1 (rvalue (word 1)) *)
  w 0x910083e2;         (* arm_ADD X2 SP (rvalue (word 32)) *)
  w 0x940000c0;         (* arm_BL (word 768) *)
  w 0x910203e0;         (* arm_ADD X0 SP (rvalue (word 128)) *)
  w 0x910203e1;         (* arm_ADD X1 SP (rvalue (word 128)) *)
  w 0x910283e2;         (* arm_ADD X2 SP (rvalue (word 160)) *)
  w 0x94000057;         (* arm_BL (word 348) *)
  w 0x910083e0;         (* arm_ADD X0 SP (rvalue (word 32)) *)
  w 0x910183e1;         (* arm_ADD X1 SP (rvalue (word 96)) *)
  w 0x910083e2;         (* arm_ADD X2 SP (rvalue (word 32)) *)
  w 0x94000053;         (* arm_BL (word 332) *)
  w 0xd2941600;         (* arm_MOV X0 (rvalue (word 41136)) *)
  w 0xf2a941c0;         (* arm_MOVK X0 (word 18958) 16 *)
  w 0xf2c364e0;         (* arm_MOVK X0 (word 6951) 32 *)
  w 0xf2f89dc0;         (* arm_MOVK X0 (word 50414) 48 *)
  w 0xd29c8f01;         (* arm_MOV X1 (rvalue (word 58488)) *)
  w 0xf2b5a5e1;         (* arm_MOVK X1 (word 44335) 16 *)
  w 0xf2c300c1;         (* arm_MOVK X1 (word 6150) 32 *)
  w 0xf2e5e861;         (* arm_MOVK X1 (word 12099) 48 *)
  w 0xd29af4e2;         (* arm_MOV X2 (rvalue (word 55207)) *)
  w 0xf2a7bf62;         (* arm_MOVK X2 (word 15867) 16 *)
  w 0xf2c01322;         (* arm_MOVK X2 (word 153) 32 *)
  w 0xf2e569a2;         (* arm_MOVK X2 (word 11085) 48 *)
  w 0xd29be163;         (* arm_MOV X3 (rvalue (word 57099)) *)
  w 0xf2a9f823;         (* arm_MOVK X3 (word 20417) 16 *)
  w 0xf2c49003;         (* arm_MOVK X3 (word 9344) 32 *)
  w 0xf2e57063;         (* arm_MOVK X3 (word 11139) 48 *)
  w 0xa90407e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&64))) *)
  w 0xa9050fe2;         (* arm_STP X2 X3 SP (Immediate_Offset (iword (&80))) *)
  w 0x910103e0;         (* arm_ADD X0 SP (rvalue (word 64)) *)
  w 0x910083e1;         (* arm_ADD X1 SP (rvalue (word 32)) *)
  w 0x910103e2;         (* arm_ADD X2 SP (rvalue (word 64)) *)
  w 0x9400003d;         (* arm_BL (word 244) *)
  w 0xa94807e0;         (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9490fe2;         (* arm_LDP X2 X3 SP (Immediate_Offset (iword (&144))) *)
  w 0x927ff804;         (* arm_AND X4 X0 (rvalue (word 18446744073709551614)) *)
  w 0xaa010084;         (* arm_ORR X4 X4 X1 *)
  w 0xaa030045;         (* arm_ORR X5 X2 X3 *)
  w 0xaa050084;         (* arm_ORR X4 X4 X5 *)
  w 0x91005000;         (* arm_ADD X0 X0 (rvalue (word 20)) *)
  w 0x91000421;         (* arm_ADD X1 X1 (rvalue (word 1)) *)
  w 0xaa010000;         (* arm_ORR X0 X0 X1 *)
  w 0x91000442;         (* arm_ADD X2 X2 (rvalue (word 1)) *)
  w 0xd240f863;         (* arm_EOR X3 X3 (rvalue (word 9223372036854775807)) *)
  w 0xaa030042;         (* arm_ORR X2 X2 X3 *)
  w 0xaa020000;         (* arm_ORR X0 X0 X2 *)
  w 0xeb1f009f;         (* arm_CMP X4 XZR *)
  w 0xa9422fea;         (* arm_LDP X10 X11 SP (Immediate_Offset (iword (&32))) *)
  w 0xa9443fee;         (* arm_LDP X14 X15 SP (Immediate_Offset (iword (&64))) *)
  w 0x9a8e014a;         (* arm_CSEL X10 X10 X14 Condition_EQ *)
  w 0x9a8f016b;         (* arm_CSEL X11 X11 X15 Condition_EQ *)
  w 0xa94337ec;         (* arm_LDP X12 X13 SP (Immediate_Offset (iword (&48))) *)
  w 0xa94547f0;         (* arm_LDP X16 X17 SP (Immediate_Offset (iword (&80))) *)
  w 0x9a90018c;         (* arm_CSEL X12 X12 X16 Condition_EQ *)
  w 0x9a9101ad;         (* arm_CSEL X13 X13 X17 Condition_EQ *)
  w 0xa9022fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&32))) *)
  w 0xa90337ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&48))) *)
  w 0xfa5f1004;         (* arm_CCMP X0 XZR (word 4) Condition_NE *)
  w 0x9a9f07e0;         (* arm_CSET X0 Condition_NE *)
  w 0xaa0002b5;         (* arm_ORR X21 X21 X0 *)
  w 0xa94207e0;         (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&32))) *)
  w 0xa9430fe2;         (* arm_LDP X2 X3 SP (Immediate_Offset (iword (&48))) *)
  w 0x92800244;         (* arm_MOVN X4 (word 18) 0 *)
  w 0xeb000084;         (* arm_SUBS X4 X4 X0 *)
  w 0x92800006;         (* arm_MOVN X6 (word 0) 0 *)
  w 0xfa0100c5;         (* arm_SBCS X5 X6 X1 *)
  w 0xfa0200c6;         (* arm_SBCS X6 X6 X2 *)
  w 0x92f00007;         (* arm_MOVN X7 (word 32768) 48 *)
  w 0xda0300e7;         (* arm_SBC X7 X7 X3 *)
  w 0x92400009;         (* arm_AND X9 X0 (rvalue (word 1)) *)
  w 0xca140134;         (* arm_EOR X20 X9 X20 *)
  w 0xaa010008;         (* arm_ORR X8 X0 X1 *)
  w 0xaa030049;         (* arm_ORR X9 X2 X3 *)
  w 0xaa090108;         (* arm_ORR X8 X8 X9 *)
  w 0xaa1402aa;         (* arm_ORR X10 X21 X20 *)
  w 0xeb1f011f;         (* arm_CMP X8 XZR *)
  w 0x9a950155;         (* arm_CSEL X21 X10 X21 Condition_EQ *)
  w 0xfa5f1284;         (* arm_CCMP X20 XZR (word 4) Condition_NE *)
  w 0x9a840000;         (* arm_CSEL X0 X0 X4 Condition_EQ *)
  w 0x9a850021;         (* arm_CSEL X1 X1 X5 Condition_EQ *)
  w 0x9a860042;         (* arm_CSEL X2 X2 X6 Condition_EQ *)
  w 0x9a870063;         (* arm_CSEL X3 X3 X7 Condition_EQ *)
  w 0xa94027e8;         (* arm_LDP X8 X9 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9412fea;         (* arm_LDP X10 X11 SP (Immediate_Offset (iword (&16))) *)
  w 0xa9000660;         (* arm_STP X0 X1 X19 (Immediate_Offset (iword (&0))) *)
  w 0xa9010e62;         (* arm_STP X2 X3 X19 (Immediate_Offset (iword (&16))) *)
  w 0xa9022668;         (* arm_STP X8 X9 X19 (Immediate_Offset (iword (&32))) *)
  w 0xa9032e6a;         (* arm_STP X10 X11 X19 (Immediate_Offset (iword (&48))) *)
  w 0xaa1503e0;         (* arm_MOV X0 X21 *)
  w 0x910303ff;         (* arm_ADD SP SP (rvalue (word 192)) *)
  w 0xa8c17bf5;         (* arm_LDP X21 X30 SP (Postimmediate_Offset (iword (&16))) *)
  w 0xa8c153f3;         (* arm_LDP X19 X20 SP (Postimmediate_Offset (iword (&16))) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xa9401023;         (* arm_LDP X3 X4 X1 (Immediate_Offset (iword (&0))) *)
  w 0xa9402047;         (* arm_LDP X7 X8 X2 (Immediate_Offset (iword (&0))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9412849;         (* arm_LDP X9 X10 X2 (Immediate_Offset (iword (&16))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9411825;         (* arm_LDP X5 X6 X1 (Immediate_Offset (iword (&16))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0xb24101ef;         (* arm_ORR X15 X15 (rvalue (word 9223372036854775808)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b081ceb;         (* arm_MADD X11 X7 X8 X7 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0xba1f01ef;         (* arm_ADCS X15 X15 XZR *)
  w 0x9a9f30e7;         (* arm_CSEL X7 X7 XZR Condition_CC *)
  w 0xeb07018c;         (* arm_SUBS X12 X12 X7 *)
  w 0xfa1f01ad;         (* arm_SBCS X13 X13 XZR *)
  w 0xfa1f01ce;         (* arm_SBCS X14 X14 XZR *)
  w 0xda1f01ef;         (* arm_SBC X15 X15 XZR *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0xa900340c;         (* arm_STP X12 X13 X0 (Immediate_Offset (iword (&0))) *)
  w 0xa9013c0e;         (* arm_STP X14 X15 X0 (Immediate_Offset (iword (&16))) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xa9400c46;         (* arm_LDP X6 X3 X2 (Immediate_Offset (iword (&0))) *)
  w 0xa9411444;         (* arm_LDP X4 X5 X2 (Immediate_Offset (iword (&16))) *)
  w 0xaa0603e2;         (* arm_MOV X2 X6 *)
  w 0x9b037c49;         (* arm_MUL X9 X2 X3 *)
  w 0x9bc37c4a;         (* arm_UMULH X10 X2 X3 *)
  w 0x9b057c4b;         (* arm_MUL X11 X2 X5 *)
  w 0x9bc57c4c;         (* arm_UMULH X12 X2 X5 *)
  w 0x9b047c47;         (* arm_MUL X7 X2 X4 *)
  w 0x9bc47c46;         (* arm_UMULH X6 X2 X4 *)
  w 0xab07014a;         (* arm_ADDS X10 X10 X7 *)
  w 0xba06016b;         (* arm_ADCS X11 X11 X6 *)
  w 0x9b047c67;         (* arm_MUL X7 X3 X4 *)
  w 0x9bc47c66;         (* arm_UMULH X6 X3 X4 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07016b;         (* arm_ADDS X11 X11 X7 *)
  w 0x9b057c8d;         (* arm_MUL X13 X4 X5 *)
  w 0x9bc57c8e;         (* arm_UMULH X14 X4 X5 *)
  w 0xba06018c;         (* arm_ADCS X12 X12 X6 *)
  w 0x9b057c67;         (* arm_MUL X7 X3 X5 *)
  w 0x9bc57c66;         (* arm_UMULH X6 X3 X5 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07018c;         (* arm_ADDS X12 X12 X7 *)
  w 0xba0601ad;         (* arm_ADCS X13 X13 X6 *)
  w 0x9a1f01ce;         (* arm_ADC X14 X14 XZR *)
  w 0xab090129;         (* arm_ADDS X9 X9 X9 *)
  w 0xba0a014a;         (* arm_ADCS X10 X10 X10 *)
  w 0xba0b016b;         (* arm_ADCS X11 X11 X11 *)
  w 0xba0c018c;         (* arm_ADCS X12 X12 X12 *)
  w 0xba0d01ad;         (* arm_ADCS X13 X13 X13 *)
  w 0xba0e01ce;         (* arm_ADCS X14 X14 X14 *)
  w 0x9a9f37e6;         (* arm_CSET X6 Condition_CS *)
  w 0x9bc27c47;         (* arm_UMULH X7 X2 X2 *)
  w 0x9b027c48;         (* arm_MUL X8 X2 X2 *)
  w 0xab070129;         (* arm_ADDS X9 X9 X7 *)
  w 0x9b037c67;         (* arm_MUL X7 X3 X3 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9bc37c67;         (* arm_UMULH X7 X3 X3 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9b047c87;         (* arm_MUL X7 X4 X4 *)
  w 0xba07018c;         (* arm_ADCS X12 X12 X7 *)
  w 0x9bc47c87;         (* arm_UMULH X7 X4 X4 *)
  w 0xba0701ad;         (* arm_ADCS X13 X13 X7 *)
  w 0x9b057ca7;         (* arm_MUL X7 X5 X5 *)
  w 0xba0701ce;         (* arm_ADCS X14 X14 X7 *)
  w 0x9bc57ca7;         (* arm_UMULH X7 X5 X5 *)
  w 0x9a0700c6;         (* arm_ADC X6 X6 X7 *)
  w 0xd28004c3;         (* arm_MOV X3 (rvalue (word 38)) *)
  w 0x9b0c7c67;         (* arm_MUL X7 X3 X12 *)
  w 0x9bcc7c64;         (* arm_UMULH X4 X3 X12 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0x9b0d7c67;         (* arm_MUL X7 X3 X13 *)
  w 0x9bcd7c6d;         (* arm_UMULH X13 X3 X13 *)
  w 0xba070129;         (* arm_ADCS X9 X9 X7 *)
  w 0x9b0e7c67;         (* arm_MUL X7 X3 X14 *)
  w 0x9bce7c6e;         (* arm_UMULH X14 X3 X14 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9b067c67;         (* arm_MUL X7 X3 X6 *)
  w 0x9bc67c66;         (* arm_UMULH X6 X3 X6 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9a9f37ec;         (* arm_CSET X12 Condition_CS *)
  w 0xab0e016b;         (* arm_ADDS X11 X11 X14 *)
  w 0x9a06018c;         (* arm_ADC X12 X12 X6 *)
  w 0xab0b017f;         (* arm_CMN X11 X11 *)
  w 0x9240f96b;         (* arm_AND X11 X11 (rvalue (word 9223372036854775807)) *)
  w 0x9a0c0182;         (* arm_ADC X2 X12 X12 *)
  w 0xd2800263;         (* arm_MOV X3 (rvalue (word 19)) *)
  w 0x9b027c67;         (* arm_MUL X7 X3 X2 *)
  w 0xab070102;         (* arm_ADDS X2 X8 X7 *)
  w 0xba040123;         (* arm_ADCS X3 X9 X4 *)
  w 0xba0d0144;         (* arm_ADCS X4 X10 X13 *)
  w 0x9a1f0165;         (* arm_ADC X5 X11 XZR *)
  w 0xf1000421;         (* arm_SUBS X1 X1 (rvalue (word 1)) *)
  w 0x54fff761;         (* arm_BNE (word 2096876) *)
  w 0xb1004c46;         (* arm_ADDS X6 X2 (rvalue (word 19)) *)
  w 0xba1f0067;         (* arm_ADCS X7 X3 XZR *)
  w 0xba1f0088;         (* arm_ADCS X8 X4 XZR *)
  w 0xba1f00a9;         (* arm_ADCS X9 X5 XZR *)
  w 0x9a865042;         (* arm_CSEL X2 X2 X6 Condition_PL *)
  w 0x9a875063;         (* arm_CSEL X3 X3 X7 Condition_PL *)
  w 0x9a885084;         (* arm_CSEL X4 X4 X8 Condition_PL *)
  w 0x9a8950a5;         (* arm_CSEL X5 X5 X9 Condition_PL *)
  w 0x9240f8a5;         (* arm_AND X5 X5 (rvalue (word 9223372036854775807)) *)
  w 0xa9000c02;         (* arm_STP X2 X3 X0 (Immediate_Offset (iword (&0))) *)
  w 0xa9011404;         (* arm_STP X4 X5 X0 (Immediate_Offset (iword (&16))) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xf9400026;         (* arm_LDR X6 X1 (Immediate_Offset (word 0)) *)
  w 0xa9420c22;         (* arm_LDP X2 X3 X1 (Immediate_Offset (iword (&32))) *)
  w 0xa9431424;         (* arm_LDP X4 X5 X1 (Immediate_Offset (iword (&48))) *)
  w 0x9240f8a5;         (* arm_AND X5 X5 (rvalue (word 9223372036854775807)) *)
  w 0xaa06fca5;         (* arm_ORR X5 X5 (Shiftedreg X6 LSL 63) *)
  w 0x39000002;         (* arm_STRB W2 X0 (Immediate_Offset (word 0)) *)
  w 0xd348fc42;         (* arm_LSR X2 X2 8 *)
  w 0x39000402;         (* arm_STRB W2 X0 (Immediate_Offset (word 1)) *)
  w 0xd348fc42;         (* arm_LSR X2 X2 8 *)
  w 0x39000802;         (* arm_STRB W2 X0 (Immediate_Offset (word 2)) *)
  w 0xd348fc42;         (* arm_LSR X2 X2 8 *)
  w 0x39000c02;         (* arm_STRB W2 X0 (Immediate_Offset (word 3)) *)
  w 0xd348fc42;         (* arm_LSR X2 X2 8 *)
  w 0x39001002;         (* arm_STRB W2 X0 (Immediate_Offset (word 4)) *)
  w 0xd348fc42;         (* arm_LSR X2 X2 8 *)
  w 0x39001402;         (* arm_STRB W2 X0 (Immediate_Offset (word 5)) *)
  w 0xd348fc42;         (* arm_LSR X2 X2 8 *)
  w 0x39001802;         (* arm_STRB W2 X0 (Immediate_Offset (word 6)) *)
  w 0xd348fc42;         (* arm_LSR X2 X2 8 *)
  w 0x39001c02;         (* arm_STRB W2 X0 (Immediate_Offset (word 7)) *)
  w 0x39002003;         (* arm_STRB W3 X0 (Immediate_Offset (word 8)) *)
  w 0xd348fc63;         (* arm_LSR X3 X3 8 *)
  w 0x39002403;         (* arm_STRB W3 X0 (Immediate_Offset (word 9)) *)
  w 0xd348fc63;         (* arm_LSR X3 X3 8 *)
  w 0x39002803;         (* arm_STRB W3 X0 (Immediate_Offset (word 10)) *)
  w 0xd348fc63;         (* arm_LSR X3 X3 8 *)
  w 0x39002c03;         (* arm_STRB W3 X0 (Immediate_Offset (word 11)) *)
  w 0xd348fc63;         (* arm_LSR X3 X3 8 *)
  w 0x39003003;         (* arm_STRB W3 X0 (Immediate_Offset (word 12)) *)
  w 0xd348fc63;         (* arm_LSR X3 X3 8 *)
  w 0x39003403;         (* arm_STRB W3 X0 (Immediate_Offset (word 13)) *)
  w 0xd348fc63;         (* arm_LSR X3 X3 8 *)
  w 0x39003803;         (* arm_STRB W3 X0 (Immediate_Offset (word 14)) *)
  w 0xd348fc63;         (* arm_LSR X3 X3 8 *)
  w 0x39003c03;         (* arm_STRB W3 X0 (Immediate_Offset (word 15)) *)
  w 0x39004004;         (* arm_STRB W4 X0 (Immediate_Offset (word 16)) *)
  w 0xd348fc84;         (* arm_LSR X4 X4 8 *)
  w 0x39004404;         (* arm_STRB W4 X0 (Immediate_Offset (word 17)) *)
  w 0xd348fc84;         (* arm_LSR X4 X4 8 *)
  w 0x39004804;         (* arm_STRB W4 X0 (Immediate_Offset (word 18)) *)
  w 0xd348fc84;         (* arm_LSR X4 X4 8 *)
  w 0x39004c04;         (* arm_STRB W4 X0 (Immediate_Offset (word 19)) *)
  w 0xd348fc84;         (* arm_LSR X4 X4 8 *)
  w 0x39005004;         (* arm_STRB W4 X0 (Immediate_Offset (word 20)) *)
  w 0xd348fc84;         (* arm_LSR X4 X4 8 *)
  w 0x39005404;         (* arm_STRB W4 X0 (Immediate_Offset (word 21)) *)
  w 0xd348fc84;         (* arm_LSR X4 X4 8 *)
  w 0x39005804;         (* arm_STRB W4 X0 (Immediate_Offset (word 22)) *)
  w 0xd348fc84;         (* arm_LSR X4 X4 8 *)
  w 0x39005c04;         (* arm_STRB W4 X0 (Immediate_Offset (word 23)) *)
  w 0x39006005;         (* arm_STRB W5 X0 (Immediate_Offset (word 24)) *)
  w 0xd348fca5;         (* arm_LSR X5 X5 8 *)
  w 0x39006405;         (* arm_STRB W5 X0 (Immediate_Offset (word 25)) *)
  w 0xd348fca5;         (* arm_LSR X5 X5 8 *)
  w 0x39006805;         (* arm_STRB W5 X0 (Immediate_Offset (word 26)) *)
  w 0xd348fca5;         (* arm_LSR X5 X5 8 *)
  w 0x39006c05;         (* arm_STRB W5 X0 (Immediate_Offset (word 27)) *)
  w 0xd348fca5;         (* arm_LSR X5 X5 8 *)
  w 0x39007005;         (* arm_STRB W5 X0 (Immediate_Offset (word 28)) *)
  w 0xd348fca5;         (* arm_LSR X5 X5 8 *)
  w 0x39007405;         (* arm_STRB W5 X0 (Immediate_Offset (word 29)) *)
  w 0xd348fca5;         (* arm_LSR X5 X5 8 *)
  w 0x39007805;         (* arm_STRB W5 X0 (Immediate_Offset (word 30)) *)
  w 0xd348fca5;         (* arm_LSR X5 X5 8 *)
  w 0x39007c05;         (* arm_STRB W5 X0 (Immediate_Offset (word 31)) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xa9bf53f3;         (* arm_STP X19 X20 SP (Preimmediate_Offset (iword (-- &16))) *)
  w 0xa9bf5bf5;         (* arm_STP X21 X22 SP (Preimmediate_Offset (iword (-- &16))) *)
  w 0xa9bf63f7;         (* arm_STP X23 X24 SP (Preimmediate_Offset (iword (-- &16))) *)
  w 0xd10703ff;         (* arm_SUB SP SP (rvalue (word 448)) *)
  w 0xaa0003f7;         (* arm_MOV X23 X0 *)
  w 0xa9402c2a;         (* arm_LDP X10 X11 X1 (Immediate_Offset (iword (&0))) *)
  w 0xa941342c;         (* arm_LDP X12 X13 X1 (Immediate_Offset (iword (&16))) *)
  w 0xd37cfda9;         (* arm_LSR X9 X13 60 *)
  w 0xd29a7da0;         (* arm_MOV X0 (rvalue (word 54253)) *)
  w 0xf2ab9ea0;         (* arm_MOVK X0 (word 23797) 16 *)
  w 0xf2cc6340;         (* arm_MOVK X0 (word 25370) 32 *)
  w 0xf2eb0240;         (* arm_MOVK X0 (word 22546) 48 *)
  w 0xd2939ac1;         (* arm_MOV X1 (rvalue (word 40150)) *)
  w 0xf2b45ee1;         (* arm_MOVK X1 (word 41719) 16 *)
  w 0xf2df3bc1;         (* arm_MOVK X1 (word 63966) 32 *)
  w 0xf2e29bc1;         (* arm_MOVK X1 (word 5342) 48 *)
  w 0x9b007d22;         (* arm_MUL X2 X9 X0 *)
  w 0x9b017d23;         (* arm_MUL X3 X9 X1 *)
  w 0x9bc07d24;         (* arm_UMULH X4 X9 X0 *)
  w 0x9bc17d25;         (* arm_UMULH X5 X9 X1 *)
  w 0xab040063;         (* arm_ADDS X3 X3 X4 *)
  w 0x9a1f00a4;         (* arm_ADC X4 X5 XZR *)
  w 0xd3440d25;         (* arm_LSL X5 X9 60 *)
  w 0xeb02014a;         (* arm_SUBS X10 X10 X2 *)
  w 0xfa03016b;         (* arm_SBCS X11 X11 X3 *)
  w 0xfa04018c;         (* arm_SBCS X12 X12 X4 *)
  w 0xfa0501ad;         (* arm_SBCS X13 X13 X5 *)
  w 0xda9f23e9;         (* arm_CSETM X9 Condition_CC *)
  w 0xab09013f;         (* arm_CMN X9 X9 *)
  w 0xca09014a;         (* arm_EOR X10 X10 X9 *)
  w 0xba1f014a;         (* arm_ADCS X10 X10 XZR *)
  w 0xca09016b;         (* arm_EOR X11 X11 X9 *)
  w 0xba1f016b;         (* arm_ADCS X11 X11 XZR *)
  w 0xca09018c;         (* arm_EOR X12 X12 X9 *)
  w 0xba1f018c;         (* arm_ADCS X12 X12 XZR *)
  w 0xca0901ad;         (* arm_EOR X13 X13 X9 *)
  w 0x9a1f01ad;         (* arm_ADC X13 X13 XZR *)
  w 0x92410129;         (* arm_AND X9 X9 (rvalue (word 9223372036854775808)) *)
  w 0xaa0901ad;         (* arm_ORR X13 X13 X9 *)
  w 0xa9002fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&0))) *)
  w 0xf24501bf;         (* arm_TST X13 (rvalue (word 576460752303423488)) *)
  w 0x9244f9ad;         (* arm_AND X13 X13 (rvalue (word 17870283321406128127)) *)
  w 0xa90137ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&16))) *)
  ADRP (mk_var("edwards25519_scalarmulbase_alt_constant_data",`:num`),0,5276,19);
  ADD_rri64 (mk_var("edwards25519_scalarmulbase_alt_constant_data",`:num`),0,19,19);
  w 0xa9400660;         (* arm_LDP X0 X1 X19 (Immediate_Offset (iword (&0))) *)
  w 0xa9460e62;         (* arm_LDP X2 X3 X19 (Immediate_Offset (iword (&96))) *)
  w 0x9a820000;         (* arm_CSEL X0 X0 X2 Condition_EQ *)
  w 0x9a830021;         (* arm_CSEL X1 X1 X3 Condition_EQ *)
  w 0xa90807e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9410660;         (* arm_LDP X0 X1 X19 (Immediate_Offset (iword (&16))) *)
  w 0xa9470e62;         (* arm_LDP X2 X3 X19 (Immediate_Offset (iword (&112))) *)
  w 0x9a820000;         (* arm_CSEL X0 X0 X2 Condition_EQ *)
  w 0x9a830021;         (* arm_CSEL X1 X1 X3 Condition_EQ *)
  w 0xa90907e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&144))) *)
  w 0xa9420660;         (* arm_LDP X0 X1 X19 (Immediate_Offset (iword (&32))) *)
  w 0xa9480e62;         (* arm_LDP X2 X3 X19 (Immediate_Offset (iword (&128))) *)
  w 0x9a820000;         (* arm_CSEL X0 X0 X2 Condition_EQ *)
  w 0x9a830021;         (* arm_CSEL X1 X1 X3 Condition_EQ *)
  w 0xa90a07e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&160))) *)
  w 0xa9430660;         (* arm_LDP X0 X1 X19 (Immediate_Offset (iword (&48))) *)
  w 0xa9490e62;         (* arm_LDP X2 X3 X19 (Immediate_Offset (iword (&144))) *)
  w 0x9a820000;         (* arm_CSEL X0 X0 X2 Condition_EQ *)
  w 0x9a830021;         (* arm_CSEL X1 X1 X3 Condition_EQ *)
  w 0xa90b07e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&176))) *)
  w 0xd2800020;         (* arm_MOV X0 (rvalue (word 1)) *)
  w 0xa90c7fe0;         (* arm_STP X0 XZR SP (Immediate_Offset (iword (&192))) *)
  w 0xa90d7fff;         (* arm_STP XZR XZR SP (Immediate_Offset (iword (&208))) *)
  w 0xa9440660;         (* arm_LDP X0 X1 X19 (Immediate_Offset (iword (&64))) *)
  w 0xa94a0e62;         (* arm_LDP X2 X3 X19 (Immediate_Offset (iword (&160))) *)
  w 0x9a820000;         (* arm_CSEL X0 X0 X2 Condition_EQ *)
  w 0x9a830021;         (* arm_CSEL X1 X1 X3 Condition_EQ *)
  w 0xa90e07e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&224))) *)
  w 0xa9450660;         (* arm_LDP X0 X1 X19 (Immediate_Offset (iword (&80))) *)
  w 0xa94b0e62;         (* arm_LDP X2 X3 X19 (Immediate_Offset (iword (&176))) *)
  w 0x9a820000;         (* arm_CSEL X0 X0 X2 Condition_EQ *)
  w 0x9a830021;         (* arm_CSEL X1 X1 X3 Condition_EQ *)
  w 0xa90f07e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&240))) *)
  w 0xd2800014;         (* arm_MOV X20 (rvalue (word 0)) *)
  w 0x91030273;         (* arm_ADD X19 X19 (rvalue (word 192)) *)
  w 0xaa1f03f5;         (* arm_MOV X21 XZR *)
  w 0xd346fe80;         (* arm_LSR X0 X20 6 *)
  w 0xf8607be2;         (* arm_LDR X2 SP (Shiftreg_Offset X0 3) *)
  w 0x9ad42442;         (* arm_LSRV X2 X2 X20 *)
  w 0x92400c42;         (* arm_AND X2 X2 (rvalue (word 15)) *)
  w 0x8b150056;         (* arm_ADD X22 X2 X21 *)
  w 0xf10026df;         (* arm_CMP X22 (rvalue (word 9)) *)
  w 0x9a9f37f5;         (* arm_CSET X21 Condition_CS *)
  w 0xd2800200;         (* arm_MOV X0 (rvalue (word 16)) *)
  w 0xcb160000;         (* arm_SUB X0 X0 X22 *)
  w 0xeb1f02bf;         (* arm_CMP X21 XZR *)
  w 0x9a961016;         (* arm_CSEL X22 X0 X22 Condition_NE *)
  w 0xd2800020;         (* arm_MOV X0 (rvalue (word 1)) *)
  w 0xaa1f03e1;         (* arm_MOV X1 XZR *)
  w 0xaa1f03e2;         (* arm_MOV X2 XZR *)
  w 0xaa1f03e3;         (* arm_MOV X3 XZR *)
  w 0xd2800024;         (* arm_MOV X4 (rvalue (word 1)) *)
  w 0xaa1f03e5;         (* arm_MOV X5 XZR *)
  w 0xaa1f03e6;         (* arm_MOV X6 XZR *)
  w 0xaa1f03e7;         (* arm_MOV X7 XZR *)
  w 0xaa1f03e8;         (* arm_MOV X8 XZR *)
  w 0xaa1f03e9;         (* arm_MOV X9 XZR *)
  w 0xaa1f03ea;         (* arm_MOV X10 XZR *)
  w 0xaa1f03eb;         (* arm_MOV X11 XZR *)
  w 0xf10006df;         (* arm_CMP X22 (rvalue (word 1)) *)
  w 0xa940366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa941366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa942366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa943366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa944366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa945366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x91018273;         (* arm_ADD X19 X19 (rvalue (word 96)) *)
  w 0xf1000adf;         (* arm_CMP X22 (rvalue (word 2)) *)
  w 0xa940366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa941366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa942366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa943366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa944366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa945366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x91018273;         (* arm_ADD X19 X19 (rvalue (word 96)) *)
  w 0xf1000edf;         (* arm_CMP X22 (rvalue (word 3)) *)
  w 0xa940366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa941366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa942366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa943366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa944366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa945366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x91018273;         (* arm_ADD X19 X19 (rvalue (word 96)) *)
  w 0xf10012df;         (* arm_CMP X22 (rvalue (word 4)) *)
  w 0xa940366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa941366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa942366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa943366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa944366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa945366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x91018273;         (* arm_ADD X19 X19 (rvalue (word 96)) *)
  w 0xf10016df;         (* arm_CMP X22 (rvalue (word 5)) *)
  w 0xa940366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa941366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa942366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa943366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa944366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa945366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x91018273;         (* arm_ADD X19 X19 (rvalue (word 96)) *)
  w 0xf1001adf;         (* arm_CMP X22 (rvalue (word 6)) *)
  w 0xa940366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa941366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa942366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa943366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa944366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa945366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x91018273;         (* arm_ADD X19 X19 (rvalue (word 96)) *)
  w 0xf1001edf;         (* arm_CMP X22 (rvalue (word 7)) *)
  w 0xa940366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa941366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa942366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa943366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa944366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa945366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x91018273;         (* arm_ADD X19 X19 (rvalue (word 96)) *)
  w 0xf10022df;         (* arm_CMP X22 (rvalue (word 8)) *)
  w 0xa940366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa941366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa942366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa943366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa944366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa945366c;         (* arm_LDP X12 X13 X19 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x91018273;         (* arm_ADD X19 X19 (rvalue (word 96)) *)
  w 0xf10002bf;         (* arm_CMP X21 (rvalue (word 0)) *)
  w 0x9a84000c;         (* arm_CSEL X12 X0 X4 Condition_EQ *)
  w 0x9a85002d;         (* arm_CSEL X13 X1 X5 Condition_EQ *)
  w 0x9a86004e;         (* arm_CSEL X14 X2 X6 Condition_EQ *)
  w 0x9a87006f;         (* arm_CSEL X15 X3 X7 Condition_EQ *)
  w 0xa90237ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&32))) *)
  w 0xa9033fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&48))) *)
  w 0x9a84100c;         (* arm_CSEL X12 X0 X4 Condition_NE *)
  w 0x9a85102d;         (* arm_CSEL X13 X1 X5 Condition_NE *)
  w 0x9a86104e;         (* arm_CSEL X14 X2 X6 Condition_NE *)
  w 0x9a87106f;         (* arm_CSEL X15 X3 X7 Condition_NE *)
  w 0xa90437ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&64))) *)
  w 0xa9053fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&80))) *)
  w 0x92800240;         (* arm_MOVN X0 (word 18) 0 *)
  w 0xeb080000;         (* arm_SUBS X0 X0 X8 *)
  w 0x92800002;         (* arm_MOVN X2 (word 0) 0 *)
  w 0xfa090041;         (* arm_SBCS X1 X2 X9 *)
  w 0xfa0a0042;         (* arm_SBCS X2 X2 X10 *)
  w 0x92f00003;         (* arm_MOVN X3 (word 32768) 48 *)
  w 0xda0b0063;         (* arm_SBC X3 X3 X11 *)
  w 0xeb1f02df;         (* arm_CMP X22 XZR *)
  w 0xfa5f12a4;         (* arm_CCMP X21 XZR (word 4) Condition_NE *)
  w 0x9a881000;         (* arm_CSEL X0 X0 X8 Condition_NE *)
  w 0x9a891021;         (* arm_CSEL X1 X1 X9 Condition_NE *)
  w 0xa90607e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&96))) *)
  w 0x9a8a1042;         (* arm_CSEL X2 X2 X10 Condition_NE *)
  w 0x9a8b1063;         (* arm_CSEL X3 X3 X11 Condition_NE *)
  w 0xa9070fe2;         (* arm_STP X2 X3 SP (Immediate_Offset (iword (&112))) *)
  w 0xa94c13e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&192))) *)
  w 0xab030063;         (* arm_ADDS X3 X3 X3 *)
  w 0xba040084;         (* arm_ADCS X4 X4 X4 *)
  w 0xa94d1be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&208))) *)
  w 0xba0500a5;         (* arm_ADCS X5 X5 X5 *)
  w 0xba0600c6;         (* arm_ADCS X6 X6 X6 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa91013e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&256))) *)
  w 0xa9111be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&272))) *)
  w 0xa94a1be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&160))) *)
  w 0xa9480fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&128))) *)
  w 0xeb0400a5;         (* arm_SUBS X5 X5 X4 *)
  w 0xfa0300c6;         (* arm_SBCS X6 X6 X3 *)
  w 0xa94b23e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&176))) *)
  w 0xa9490fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&144))) *)
  w 0xfa0400e7;         (* arm_SBCS X7 X7 X4 *)
  w 0xfa030108;         (* arm_SBCS X8 X8 X3 *)
  w 0xd28004c4;         (* arm_MOV X4 (rvalue (word 38)) *)
  w 0x9a9f3083;         (* arm_CSEL X3 X4 XZR Condition_CC *)
  w 0xeb0300a5;         (* arm_SUBS X5 X5 X3 *)
  w 0xfa1f00c6;         (* arm_SBCS X6 X6 XZR *)
  w 0xfa1f00e7;         (* arm_SBCS X7 X7 XZR *)
  w 0xda1f0108;         (* arm_SBC X8 X8 XZR *)
  w 0xa9121be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&288))) *)
  w 0xa91323e7;         (* arm_STP X7 X8 SP (Immediate_Offset (iword (&304))) *)
  w 0xa94a13e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&160))) *)
  w 0xa94823e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&128))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa94b1be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&176))) *)
  w 0xa94923e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&144))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa91413e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&320))) *)
  w 0xa9151be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&336))) *)
  w 0xa94e13e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&224))) *)
  w 0xa94623e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&96))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9472be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&112))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa94f1be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&240))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa91637ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&352))) *)
  w 0xa9173fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&368))) *)
  w 0xa95213e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&288))) *)
  w 0xa94223e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&32))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9432be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&48))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9531be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&304))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa91237ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&288))) *)
  w 0xa9133fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&304))) *)
  w 0xa95413e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&320))) *)
  w 0xa94423e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&64))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9452be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&80))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9551be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&336))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa91437ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&320))) *)
  w 0xa9153fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&336))) *)
  w 0xa9501be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&256))) *)
  w 0xa9560fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&352))) *)
  w 0xeb0400a5;         (* arm_SUBS X5 X5 X4 *)
  w 0xfa0300c6;         (* arm_SBCS X6 X6 X3 *)
  w 0xa95123e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&272))) *)
  w 0xa9570fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&368))) *)
  w 0xfa0400e7;         (* arm_SBCS X7 X7 X4 *)
  w 0xfa030108;         (* arm_SBCS X8 X8 X3 *)
  w 0xd28004c4;         (* arm_MOV X4 (rvalue (word 38)) *)
  w 0x9a9f3083;         (* arm_CSEL X3 X4 XZR Condition_CC *)
  w 0xeb0300a5;         (* arm_SUBS X5 X5 X3 *)
  w 0xfa1f00c6;         (* arm_SBCS X6 X6 XZR *)
  w 0xfa1f00e7;         (* arm_SBCS X7 X7 XZR *)
  w 0xda1f0108;         (* arm_SBC X8 X8 XZR *)
  w 0xa9181be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&384))) *)
  w 0xa91923e7;         (* arm_STP X7 X8 SP (Immediate_Offset (iword (&400))) *)
  w 0xa95013e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&256))) *)
  w 0xa95623e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&352))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa9511be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&272))) *)
  w 0xa95723e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&368))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa91013e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&256))) *)
  w 0xa9111be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&272))) *)
  w 0xa9541be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&320))) *)
  w 0xa9520fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&288))) *)
  w 0xeb0400a5;         (* arm_SUBS X5 X5 X4 *)
  w 0xfa0300c6;         (* arm_SBCS X6 X6 X3 *)
  w 0xa95523e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&336))) *)
  w 0xa9530fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&304))) *)
  w 0xfa0400e7;         (* arm_SBCS X7 X7 X4 *)
  w 0xfa030108;         (* arm_SBCS X8 X8 X3 *)
  w 0xd28004c4;         (* arm_MOV X4 (rvalue (word 38)) *)
  w 0x9a9f3083;         (* arm_CSEL X3 X4 XZR Condition_CC *)
  w 0xeb0300a5;         (* arm_SUBS X5 X5 X3 *)
  w 0xfa1f00c6;         (* arm_SBCS X6 X6 XZR *)
  w 0xfa1f00e7;         (* arm_SBCS X7 X7 XZR *)
  w 0xda1f0108;         (* arm_SBC X8 X8 XZR *)
  w 0xa91a1be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&416))) *)
  w 0xa91b23e7;         (* arm_STP X7 X8 SP (Immediate_Offset (iword (&432))) *)
  w 0xa95413e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&320))) *)
  w 0xa95223e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&288))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa9551be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&336))) *)
  w 0xa95323e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&304))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa91213e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&288))) *)
  w 0xa9131be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&304))) *)
  w 0xa95813e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&384))) *)
  w 0xa95023e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&256))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9512be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&272))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9591be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&400))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90c37ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&192))) *)
  w 0xa90d3fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&208))) *)
  w 0xa95a13e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&416))) *)
  w 0xa95823e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&384))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9592be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&400))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa95b1be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&432))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90837ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9093fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&144))) *)
  w 0xa95013e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&256))) *)
  w 0xa95223e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&288))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9532be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&304))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9511be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&272))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90a37ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&160))) *)
  w 0xa90b3fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&176))) *)
  w 0xa95a13e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&416))) *)
  w 0xa95223e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&288))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9532be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&304))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa95b1be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&432))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90e37ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&224))) *)
  w 0xa90f3fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&240))) *)
  w 0x91001294;         (* arm_ADD X20 X20 (rvalue (word 4)) *)
  w 0xf103f29f;         (* arm_CMP X20 (rvalue (word 252)) *)
  w 0x54ff8563;         (* arm_BCC (word 2093228) *)
  w 0xa94807e0;         (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9490fe2;         (* arm_LDP X2 X3 SP (Immediate_Offset (iword (&144))) *)
  w 0x928004a4;         (* arm_MOVN X4 (word 37) 0 *)
  w 0xeb000084;         (* arm_SUBS X4 X4 X0 *)
  w 0x92800007;         (* arm_MOVN X7 (word 0) 0 *)
  w 0xfa0100e5;         (* arm_SBCS X5 X7 X1 *)
  w 0xfa0200e6;         (* arm_SBCS X6 X7 X2 *)
  w 0xda0300e7;         (* arm_SBC X7 X7 X3 *)
  w 0xf9400fea;         (* arm_LDR X10 SP (Immediate_Offset (word 24)) *)
  w 0xf241015f;         (* arm_TST X10 (rvalue (word 9223372036854775808)) *)
  w 0x9a801080;         (* arm_CSEL X0 X4 X0 Condition_NE *)
  w 0x9a8110a1;         (* arm_CSEL X1 X5 X1 Condition_NE *)
  w 0x9a8210c2;         (* arm_CSEL X2 X6 X2 Condition_NE *)
  w 0x9a8310e3;         (* arm_CSEL X3 X7 X3 Condition_NE *)
  w 0xa90807e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9090fe2;         (* arm_STP X2 X3 SP (Immediate_Offset (iword (&144))) *)
  w 0x910383e0;         (* arm_ADD X0 SP (rvalue (word 224)) *)
  w 0x910303e1;         (* arm_ADD X1 SP (rvalue (word 192)) *)
  w 0xaa0003f4;         (* arm_MOV X20 X0 *)
  w 0x9280024a;         (* arm_MOVN X10 (word 18) 0 *)
  w 0x9280000b;         (* arm_MOVN X11 (word 0) 0 *)
  w 0xa9002fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&0))) *)
  w 0x92f0000c;         (* arm_MOVN X12 (word 32768) 48 *)
  w 0xa90133eb;         (* arm_STP X11 X12 SP (Immediate_Offset (iword (&16))) *)
  w 0xa9400c22;         (* arm_LDP X2 X3 X1 (Immediate_Offset (iword (&0))) *)
  w 0xa9411424;         (* arm_LDP X4 X5 X1 (Immediate_Offset (iword (&16))) *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0xd37ffca6;         (* arm_LSR X6 X5 63 *)
  w 0x9b061ce6;         (* arm_MADD X6 X7 X6 X7 *)
  w 0xab060042;         (* arm_ADDS X2 X2 X6 *)
  w 0xba1f0063;         (* arm_ADCS X3 X3 XZR *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xb24100a5;         (* arm_ORR X5 X5 (rvalue (word 9223372036854775808)) *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a9f30e6;         (* arm_CSEL X6 X7 XZR Condition_CC *)
  w 0xeb060042;         (* arm_SUBS X2 X2 X6 *)
  w 0xfa1f0063;         (* arm_SBCS X3 X3 XZR *)
  w 0xfa1f0084;         (* arm_SBCS X4 X4 XZR *)
  w 0xda1f00a5;         (* arm_SBC X5 X5 XZR *)
  w 0x9240f8a5;         (* arm_AND X5 X5 (rvalue (word 9223372036854775807)) *)
  w 0xa9020fe2;         (* arm_STP X2 X3 SP (Immediate_Offset (iword (&32))) *)
  w 0xa90317e4;         (* arm_STP X4 X5 SP (Immediate_Offset (iword (&48))) *)
  w 0xa9047fff;         (* arm_STP XZR XZR SP (Immediate_Offset (iword (&64))) *)
  w 0xa9057fff;         (* arm_STP XZR XZR SP (Immediate_Offset (iword (&80))) *)
  w 0xd284132a;         (* arm_MOV X10 (rvalue (word 8345)) *)
  w 0xf2aea04a;         (* arm_MOVK X10 (word 29954) 16 *)
  w 0xf2d3c46a;         (* arm_MOVK X10 (word 40483) 32 *)
  w 0xf2f41f2a;         (* arm_MOVK X10 (word 41209) 48 *)
  w 0xd284b2ab;         (* arm_MOV X11 (rvalue (word 9621)) *)
  w 0xf2a3a26b;         (* arm_MOVK X11 (word 7443) 16 *)
  w 0xf2d1e7eb;         (* arm_MOVK X11 (word 36671) 32 *)
  w 0xf2f518cb;         (* arm_MOVK X11 (word 43206) 48 *)
  w 0xd28a484c;         (* arm_MOV X12 (rvalue (word 21058)) *)
  w 0xf2a0b58c;         (* arm_MOVK X12 (word 1452) 16 *)
  w 0xf2d1270c;         (* arm_MOVK X12 (word 35128) 32 *)
  w 0xf2ed8d8c;         (* arm_MOVK X12 (word 27756) 48 *)
  w 0xd280c2ad;         (* arm_MOV X13 (rvalue (word 1557)) *)
  w 0xf2a82eed;         (* arm_MOVK X13 (word 16759) 16 *)
  w 0xf2c1164d;         (* arm_MOVK X13 (word 2226) 32 *)
  w 0xf2e4ecad;         (* arm_MOVK X13 (word 10085) 48 *)
  w 0xa9062fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&96))) *)
  w 0xa90737ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&112))) *)
  w 0xd2800155;         (* arm_MOV X21 (rvalue (word 10)) *)
  w 0xd2800036;         (* arm_MOV X22 (rvalue (word 1)) *)
  w 0x1400010b;         (* arm_B (word 1068) *)
  w 0xeb1f015f;         (* arm_CMP X10 XZR *)
  w 0xda9f53ee;         (* arm_CSETM X14 Condition_MI *)
  w 0xda8a554a;         (* arm_CNEG X10 X10 Condition_MI *)
  w 0xeb1f017f;         (* arm_CMP X11 XZR *)
  w 0xda9f53ef;         (* arm_CSETM X15 Condition_MI *)
  w 0xda8b556b;         (* arm_CNEG X11 X11 Condition_MI *)
  w 0xeb1f019f;         (* arm_CMP X12 XZR *)
  w 0xda9f53f0;         (* arm_CSETM X16 Condition_MI *)
  w 0xda8c558c;         (* arm_CNEG X12 X12 Condition_MI *)
  w 0xeb1f01bf;         (* arm_CMP X13 XZR *)
  w 0xda9f53f1;         (* arm_CSETM X17 Condition_MI *)
  w 0xda8d55ad;         (* arm_CNEG X13 X13 Condition_MI *)
  w 0x8a0e0140;         (* arm_AND X0 X10 X14 *)
  w 0x8a0f0161;         (* arm_AND X1 X11 X15 *)
  w 0x8b010009;         (* arm_ADD X9 X0 X1 *)
  w 0x8a100180;         (* arm_AND X0 X12 X16 *)
  w 0x8a1101a1;         (* arm_AND X1 X13 X17 *)
  w 0x8b010013;         (* arm_ADD X19 X0 X1 *)
  w 0xf94003e7;         (* arm_LDR X7 SP (Immediate_Offset (word 0)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab000124;         (* arm_ADDS X4 X9 X0 *)
  w 0x9a0103e2;         (* arm_ADC X2 XZR X1 *)
  w 0xf94013e8;         (* arm_LDR X8 SP (Immediate_Offset (word 32)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab000084;         (* arm_ADDS X4 X4 X0 *)
  w 0x9a010042;         (* arm_ADC X2 X2 X1 *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000265;         (* arm_ADDS X5 X19 X0 *)
  w 0x9a0103e3;         (* arm_ADC X3 XZR X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0xf94007e7;         (* arm_LDR X7 SP (Immediate_Offset (word 8)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0103e6;         (* arm_ADC X6 XZR X1 *)
  w 0xf94017e8;         (* arm_LDR X8 SP (Immediate_Offset (word 40)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0100c6;         (* arm_ADC X6 X6 X1 *)
  w 0x93c4ec44;         (* arm_EXTR X4 X2 X4 59 *)
  w 0xf90003e4;         (* arm_STR X4 SP (Immediate_Offset (word 0)) *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000063;         (* arm_ADDS X3 X3 X0 *)
  w 0x9a0103e4;         (* arm_ADC X4 XZR X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab000063;         (* arm_ADDS X3 X3 X0 *)
  w 0x9a010084;         (* arm_ADC X4 X4 X1 *)
  w 0x93c5ec65;         (* arm_EXTR X5 X3 X5 59 *)
  w 0xf90013e5;         (* arm_STR X5 SP (Immediate_Offset (word 32)) *)
  w 0xf9400be7;         (* arm_LDR X7 SP (Immediate_Offset (word 16)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab0000c6;         (* arm_ADDS X6 X6 X0 *)
  w 0x9a0103e5;         (* arm_ADC X5 XZR X1 *)
  w 0xf9401be8;         (* arm_LDR X8 SP (Immediate_Offset (word 48)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab0000c6;         (* arm_ADDS X6 X6 X0 *)
  w 0x9a0100a5;         (* arm_ADC X5 X5 X1 *)
  w 0x93c2ecc2;         (* arm_EXTR X2 X6 X2 59 *)
  w 0xf90007e2;         (* arm_STR X2 SP (Immediate_Offset (word 8)) *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000084;         (* arm_ADDS X4 X4 X0 *)
  w 0x9a0103e2;         (* arm_ADC X2 XZR X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab000084;         (* arm_ADDS X4 X4 X0 *)
  w 0x9a010042;         (* arm_ADC X2 X2 X1 *)
  w 0x93c3ec83;         (* arm_EXTR X3 X4 X3 59 *)
  w 0xf90017e3;         (* arm_STR X3 SP (Immediate_Offset (word 40)) *)
  w 0xf9400fe7;         (* arm_LDR X7 SP (Immediate_Offset (word 24)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x937ffc23;         (* arm_ASR X3 X1 63 *)
  w 0x8a0a0063;         (* arm_AND X3 X3 X10 *)
  w 0xcb0303e3;         (* arm_NEG X3 X3 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0xf9401fe8;         (* arm_LDR X8 SP (Immediate_Offset (word 56)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x937ffc20;         (* arm_ASR X0 X1 63 *)
  w 0x8a0b0000;         (* arm_AND X0 X0 X11 *)
  w 0xcb000063;         (* arm_SUB X3 X3 X0 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0x93c6eca6;         (* arm_EXTR X6 X5 X6 59 *)
  w 0xf9000be6;         (* arm_STR X6 SP (Immediate_Offset (word 16)) *)
  w 0x93c5ec65;         (* arm_EXTR X5 X3 X5 59 *)
  w 0xf9000fe5;         (* arm_STR X5 SP (Immediate_Offset (word 24)) *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x937ffc25;         (* arm_ASR X5 X1 63 *)
  w 0x8a0c00a5;         (* arm_AND X5 X5 X12 *)
  w 0xcb0503e5;         (* arm_NEG X5 X5 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0100a5;         (* arm_ADC X5 X5 X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x937ffc20;         (* arm_ASR X0 X1 63 *)
  w 0x8a0d0000;         (* arm_AND X0 X0 X13 *)
  w 0xcb0000a5;         (* arm_SUB X5 X5 X0 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0100a5;         (* arm_ADC X5 X5 X1 *)
  w 0x93c4ec44;         (* arm_EXTR X4 X2 X4 59 *)
  w 0xf9001be4;         (* arm_STR X4 SP (Immediate_Offset (word 48)) *)
  w 0x93c2eca2;         (* arm_EXTR X2 X5 X2 59 *)
  w 0xf9001fe2;         (* arm_STR X2 SP (Immediate_Offset (word 56)) *)
  w 0xf94023e7;         (* arm_LDR X7 SP (Immediate_Offset (word 64)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab000124;         (* arm_ADDS X4 X9 X0 *)
  w 0x9a0103e2;         (* arm_ADC X2 XZR X1 *)
  w 0xf94033e8;         (* arm_LDR X8 SP (Immediate_Offset (word 96)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab000084;         (* arm_ADDS X4 X4 X0 *)
  w 0xf90023e4;         (* arm_STR X4 SP (Immediate_Offset (word 64)) *)
  w 0x9a010042;         (* arm_ADC X2 X2 X1 *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000265;         (* arm_ADDS X5 X19 X0 *)
  w 0x9a0103e3;         (* arm_ADC X3 XZR X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0xf90033e5;         (* arm_STR X5 SP (Immediate_Offset (word 96)) *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0xf94027e7;         (* arm_LDR X7 SP (Immediate_Offset (word 72)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0103e6;         (* arm_ADC X6 XZR X1 *)
  w 0xf94037e8;         (* arm_LDR X8 SP (Immediate_Offset (word 104)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0xf90027e2;         (* arm_STR X2 SP (Immediate_Offset (word 72)) *)
  w 0x9a0100c6;         (* arm_ADC X6 X6 X1 *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000063;         (* arm_ADDS X3 X3 X0 *)
  w 0x9a0103e4;         (* arm_ADC X4 XZR X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab000063;         (* arm_ADDS X3 X3 X0 *)
  w 0xf90037e3;         (* arm_STR X3 SP (Immediate_Offset (word 104)) *)
  w 0x9a010084;         (* arm_ADC X4 X4 X1 *)
  w 0xf9402be7;         (* arm_LDR X7 SP (Immediate_Offset (word 80)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab0000c6;         (* arm_ADDS X6 X6 X0 *)
  w 0x9a0103e5;         (* arm_ADC X5 XZR X1 *)
  w 0xf9403be8;         (* arm_LDR X8 SP (Immediate_Offset (word 112)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab0000c6;         (* arm_ADDS X6 X6 X0 *)
  w 0xf9002be6;         (* arm_STR X6 SP (Immediate_Offset (word 80)) *)
  w 0x9a0100a5;         (* arm_ADC X5 X5 X1 *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000084;         (* arm_ADDS X4 X4 X0 *)
  w 0x9a0103e2;         (* arm_ADC X2 XZR X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab000084;         (* arm_ADDS X4 X4 X0 *)
  w 0xf9003be4;         (* arm_STR X4 SP (Immediate_Offset (word 112)) *)
  w 0x9a010042;         (* arm_ADC X2 X2 X1 *)
  w 0xf9402fe7;         (* arm_LDR X7 SP (Immediate_Offset (word 88)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x8a0a01c3;         (* arm_AND X3 X14 X10 *)
  w 0xcb0303e3;         (* arm_NEG X3 X3 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0xf9403fe8;         (* arm_LDR X8 SP (Immediate_Offset (word 120)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x8a0b01e0;         (* arm_AND X0 X15 X11 *)
  w 0xcb000063;         (* arm_SUB X3 X3 X0 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0x93c5fc66;         (* arm_EXTR X6 X3 X5 63 *)
  w 0xa94407e0;         (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&64))) *)
  w 0x8b83fcc6;         (* arm_ADD X6 X6 (Shiftedreg X3 ASR 63) *)
  w 0xd2800263;         (* arm_MOV X3 (rvalue (word 19)) *)
  w 0x9b037cc4;         (* arm_MUL X4 X6 X3 *)
  w 0x8b06fca5;         (* arm_ADD X5 X5 (Shiftedreg X6 LSL 63) *)
  w 0x9b437cc3;         (* arm_SMULH X3 X6 X3 *)
  w 0xf9402be6;         (* arm_LDR X6 SP (Immediate_Offset (word 80)) *)
  w 0xab040000;         (* arm_ADDS X0 X0 X4 *)
  w 0xba030021;         (* arm_ADCS X1 X1 X3 *)
  w 0x937ffc63;         (* arm_ASR X3 X3 63 *)
  w 0xba0300c6;         (* arm_ADCS X6 X6 X3 *)
  w 0x9a0300a5;         (* arm_ADC X5 X5 X3 *)
  w 0xa90407e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&64))) *)
  w 0xa90517e6;         (* arm_STP X6 X5 SP (Immediate_Offset (iword (&80))) *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x8a0c0205;         (* arm_AND X5 X16 X12 *)
  w 0xcb0503e5;         (* arm_NEG X5 X5 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0100a5;         (* arm_ADC X5 X5 X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x8a0d0220;         (* arm_AND X0 X17 X13 *)
  w 0xcb0000a5;         (* arm_SUB X5 X5 X0 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0100a5;         (* arm_ADC X5 X5 X1 *)
  w 0x93c2fca6;         (* arm_EXTR X6 X5 X2 63 *)
  w 0xa94607e0;         (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&96))) *)
  w 0x8b85fcc6;         (* arm_ADD X6 X6 (Shiftedreg X5 ASR 63) *)
  w 0xd2800265;         (* arm_MOV X5 (rvalue (word 19)) *)
  w 0x9b057cc4;         (* arm_MUL X4 X6 X5 *)
  w 0x8b06fc42;         (* arm_ADD X2 X2 (Shiftedreg X6 LSL 63) *)
  w 0x9b457cc5;         (* arm_SMULH X5 X6 X5 *)
  w 0xf9403be3;         (* arm_LDR X3 SP (Immediate_Offset (word 112)) *)
  w 0xab040000;         (* arm_ADDS X0 X0 X4 *)
  w 0xba050021;         (* arm_ADCS X1 X1 X5 *)
  w 0x937ffca5;         (* arm_ASR X5 X5 63 *)
  w 0xba050063;         (* arm_ADCS X3 X3 X5 *)
  w 0x9a050042;         (* arm_ADC X2 X2 X5 *)
  w 0xa90607e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&96))) *)
  w 0xa9070be3;         (* arm_STP X3 X2 SP (Immediate_Offset (iword (&112))) *)
  w 0xaa1603e1;         (* arm_MOV X1 X22 *)
  w 0xf94003e2;         (* arm_LDR X2 SP (Immediate_Offset (word 0)) *)
  w 0xf94013e3;         (* arm_LDR X3 SP (Immediate_Offset (word 32)) *)
  w 0x92404c44;         (* arm_AND X4 X2 (rvalue (word 1048575)) *)
  w 0xb2575884;         (* arm_ORR X4 X4 (rvalue (word 18446741874686296064)) *)
  w 0x92404c65;         (* arm_AND X5 X3 (rvalue (word 1048575)) *)
  w 0xb24204a5;         (* arm_ORR X5 X5 (rvalue (word 13835058055282163712)) *)
  w 0xf24000bf;         (* arm_TST X5 (rvalue (word 1)) *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x91440088;         (* arm_ADD X8 X4 (rvalue (word 1048576)) *)
  w 0x9355a508;         (* arm_SBFM X8 X8 21 41 *)
  w 0xd2a0020b;         (* arm_MOVZ X11 (word 16) 16 *)
  w 0x8b0b556b;         (* arm_ADD X11 X11 (Shiftedreg X11 LSL 21) *)
  w 0x8b0b0089;         (* arm_ADD X9 X4 X11 *)
  w 0x936afd29;         (* arm_ASR X9 X9 42 *)
  w 0x914400aa;         (* arm_ADD X10 X5 (rvalue (word 1048576)) *)
  w 0x9355a54a;         (* arm_SBFM X10 X10 21 41 *)
  w 0x8b0b00ab;         (* arm_ADD X11 X5 X11 *)
  w 0x936afd6b;         (* arm_ASR X11 X11 42 *)
  w 0x9b027d06;         (* arm_MUL X6 X8 X2 *)
  w 0x9b037d27;         (* arm_MUL X7 X9 X3 *)
  w 0x9b027d42;         (* arm_MUL X2 X10 X2 *)
  w 0x9b037d63;         (* arm_MUL X3 X11 X3 *)
  w 0x8b0700c4;         (* arm_ADD X4 X6 X7 *)
  w 0x8b030045;         (* arm_ADD X5 X2 X3 *)
  w 0x9354fc82;         (* arm_ASR X2 X4 20 *)
  w 0x9354fca3;         (* arm_ASR X3 X5 20 *)
  w 0x92404c44;         (* arm_AND X4 X2 (rvalue (word 1048575)) *)
  w 0xb2575884;         (* arm_ORR X4 X4 (rvalue (word 18446741874686296064)) *)
  w 0x92404c65;         (* arm_AND X5 X3 (rvalue (word 1048575)) *)
  w 0xb24204a5;         (* arm_ORR X5 X5 (rvalue (word 13835058055282163712)) *)
  w 0xf24000bf;         (* arm_TST X5 (rvalue (word 1)) *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9144008c;         (* arm_ADD X12 X4 (rvalue (word 1048576)) *)
  w 0x9355a58c;         (* arm_SBFM X12 X12 21 41 *)
  w 0xd2a0020f;         (* arm_MOVZ X15 (word 16) 16 *)
  w 0x8b0f55ef;         (* arm_ADD X15 X15 (Shiftedreg X15 LSL 21) *)
  w 0x8b0f008d;         (* arm_ADD X13 X4 X15 *)
  w 0x936afdad;         (* arm_ASR X13 X13 42 *)
  w 0x914400ae;         (* arm_ADD X14 X5 (rvalue (word 1048576)) *)
  w 0x9355a5ce;         (* arm_SBFM X14 X14 21 41 *)
  w 0x8b0f00af;         (* arm_ADD X15 X5 X15 *)
  w 0x936afdef;         (* arm_ASR X15 X15 42 *)
  w 0x9b027d86;         (* arm_MUL X6 X12 X2 *)
  w 0x9b037da7;         (* arm_MUL X7 X13 X3 *)
  w 0x9b027dc2;         (* arm_MUL X2 X14 X2 *)
  w 0x9b037de3;         (* arm_MUL X3 X15 X3 *)
  w 0x8b0700c4;         (* arm_ADD X4 X6 X7 *)
  w 0x8b030045;         (* arm_ADD X5 X2 X3 *)
  w 0x9354fc82;         (* arm_ASR X2 X4 20 *)
  w 0x9354fca3;         (* arm_ASR X3 X5 20 *)
  w 0x92404c44;         (* arm_AND X4 X2 (rvalue (word 1048575)) *)
  w 0xb2575884;         (* arm_ORR X4 X4 (rvalue (word 18446741874686296064)) *)
  w 0x92404c65;         (* arm_AND X5 X3 (rvalue (word 1048575)) *)
  w 0xb24204a5;         (* arm_ORR X5 X5 (rvalue (word 13835058055282163712)) *)
  w 0xf24000bf;         (* arm_TST X5 (rvalue (word 1)) *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9b087d82;         (* arm_MUL X2 X12 X8 *)
  w 0x9b097d83;         (* arm_MUL X3 X12 X9 *)
  w 0x9b087dc6;         (* arm_MUL X6 X14 X8 *)
  w 0x9b097dc7;         (* arm_MUL X7 X14 X9 *)
  w 0x9b0a09a8;         (* arm_MADD X8 X13 X10 X2 *)
  w 0x9b0b0da9;         (* arm_MADD X9 X13 X11 X3 *)
  w 0x9b0a19f0;         (* arm_MADD X16 X15 X10 X6 *)
  w 0x9b0b1df1;         (* arm_MADD X17 X15 X11 X7 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9144008c;         (* arm_ADD X12 X4 (rvalue (word 1048576)) *)
  w 0x9356a98c;         (* arm_SBFM X12 X12 22 42 *)
  w 0xd2a0020f;         (* arm_MOVZ X15 (word 16) 16 *)
  w 0x8b0f55ef;         (* arm_ADD X15 X15 (Shiftedreg X15 LSL 21) *)
  w 0x8b0f008d;         (* arm_ADD X13 X4 X15 *)
  w 0x936bfdad;         (* arm_ASR X13 X13 43 *)
  w 0x914400ae;         (* arm_ADD X14 X5 (rvalue (word 1048576)) *)
  w 0x9356a9ce;         (* arm_SBFM X14 X14 22 42 *)
  w 0x8b0f00af;         (* arm_ADD X15 X5 X15 *)
  w 0x936bfdef;         (* arm_ASR X15 X15 43 *)
  w 0x9b08fd82;         (* arm_MNEG X2 X12 X8 *)
  w 0x9b09fd83;         (* arm_MNEG X3 X12 X9 *)
  w 0x9b08fdc4;         (* arm_MNEG X4 X14 X8 *)
  w 0x9b09fdc5;         (* arm_MNEG X5 X14 X9 *)
  w 0x9b1089aa;         (* arm_MSUB X10 X13 X16 X2 *)
  w 0x9b118dab;         (* arm_MSUB X11 X13 X17 X3 *)
  w 0x9b1091ec;         (* arm_MSUB X12 X15 X16 X4 *)
  w 0x9b1195ed;         (* arm_MSUB X13 X15 X17 X5 *)
  w 0xaa0103f6;         (* arm_MOV X22 X1 *)
  w 0xf10006b5;         (* arm_SUBS X21 X21 (rvalue (word 1)) *)
  w 0x54ff9281;         (* arm_BNE (word 2093648) *)
  w 0xf94003e0;         (* arm_LDR X0 SP (Immediate_Offset (word 0)) *)
  w 0xf94013e1;         (* arm_LDR X1 SP (Immediate_Offset (word 32)) *)
  w 0x9b0a7c00;         (* arm_MUL X0 X0 X10 *)
  w 0x9b0b0021;         (* arm_MADD X1 X1 X11 X0 *)
  w 0x937ffc20;         (* arm_ASR X0 X1 63 *)
  w 0xeb1f015f;         (* arm_CMP X10 XZR *)
  w 0xda9f53ee;         (* arm_CSETM X14 Condition_MI *)
  w 0xda8a554a;         (* arm_CNEG X10 X10 Condition_MI *)
  w 0xca0001ce;         (* arm_EOR X14 X14 X0 *)
  w 0xeb1f017f;         (* arm_CMP X11 XZR *)
  w 0xda9f53ef;         (* arm_CSETM X15 Condition_MI *)
  w 0xda8b556b;         (* arm_CNEG X11 X11 Condition_MI *)
  w 0xca0001ef;         (* arm_EOR X15 X15 X0 *)
  w 0xeb1f019f;         (* arm_CMP X12 XZR *)
  w 0xda9f53f0;         (* arm_CSETM X16 Condition_MI *)
  w 0xda8c558c;         (* arm_CNEG X12 X12 Condition_MI *)
  w 0xca000210;         (* arm_EOR X16 X16 X0 *)
  w 0xeb1f01bf;         (* arm_CMP X13 XZR *)
  w 0xda9f53f1;         (* arm_CSETM X17 Condition_MI *)
  w 0xda8d55ad;         (* arm_CNEG X13 X13 Condition_MI *)
  w 0xca000231;         (* arm_EOR X17 X17 X0 *)
  w 0x8a0e0140;         (* arm_AND X0 X10 X14 *)
  w 0x8a0f0161;         (* arm_AND X1 X11 X15 *)
  w 0x8b010009;         (* arm_ADD X9 X0 X1 *)
  w 0xf94023e7;         (* arm_LDR X7 SP (Immediate_Offset (word 64)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab000124;         (* arm_ADDS X4 X9 X0 *)
  w 0x9a0103e2;         (* arm_ADC X2 XZR X1 *)
  w 0xf94033e8;         (* arm_LDR X8 SP (Immediate_Offset (word 96)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab000084;         (* arm_ADDS X4 X4 X0 *)
  w 0xf90023e4;         (* arm_STR X4 SP (Immediate_Offset (word 64)) *)
  w 0x9a010042;         (* arm_ADC X2 X2 X1 *)
  w 0xf94027e7;         (* arm_LDR X7 SP (Immediate_Offset (word 72)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0103e6;         (* arm_ADC X6 XZR X1 *)
  w 0xf94037e8;         (* arm_LDR X8 SP (Immediate_Offset (word 104)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0xf90027e2;         (* arm_STR X2 SP (Immediate_Offset (word 72)) *)
  w 0x9a0100c6;         (* arm_ADC X6 X6 X1 *)
  w 0xf9402be7;         (* arm_LDR X7 SP (Immediate_Offset (word 80)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab0000c6;         (* arm_ADDS X6 X6 X0 *)
  w 0x9a0103e5;         (* arm_ADC X5 XZR X1 *)
  w 0xf9403be8;         (* arm_LDR X8 SP (Immediate_Offset (word 112)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab0000c6;         (* arm_ADDS X6 X6 X0 *)
  w 0xf9002be6;         (* arm_STR X6 SP (Immediate_Offset (word 80)) *)
  w 0x9a0100a5;         (* arm_ADC X5 X5 X1 *)
  w 0xf9402fe7;         (* arm_LDR X7 SP (Immediate_Offset (word 88)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x8a0a01c3;         (* arm_AND X3 X14 X10 *)
  w 0xcb0303e3;         (* arm_NEG X3 X3 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0xf9403fe8;         (* arm_LDR X8 SP (Immediate_Offset (word 120)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x8a0b01e0;         (* arm_AND X0 X15 X11 *)
  w 0xcb000063;         (* arm_SUB X3 X3 X0 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0x93c5fc66;         (* arm_EXTR X6 X3 X5 63 *)
  w 0xa94407e0;         (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&64))) *)
  w 0xea03007f;         (* arm_TST X3 X3 *)
  w 0x9a8644c6;         (* arm_CINC X6 X6 Condition_PL *)
  w 0xd2800263;         (* arm_MOV X3 (rvalue (word 19)) *)
  w 0x9b037cc4;         (* arm_MUL X4 X6 X3 *)
  w 0x8b06fca5;         (* arm_ADD X5 X5 (Shiftedreg X6 LSL 63) *)
  w 0x9b437cc6;         (* arm_SMULH X6 X6 X3 *)
  w 0xf9402be2;         (* arm_LDR X2 SP (Immediate_Offset (word 80)) *)
  w 0xab040000;         (* arm_ADDS X0 X0 X4 *)
  w 0xba060021;         (* arm_ADCS X1 X1 X6 *)
  w 0x937ffcc6;         (* arm_ASR X6 X6 63 *)
  w 0xba060042;         (* arm_ADCS X2 X2 X6 *)
  w 0xba0600a5;         (* arm_ADCS X5 X5 X6 *)
  w 0x9a9f4063;         (* arm_CSEL X3 X3 XZR Condition_MI *)
  w 0xeb030000;         (* arm_SUBS X0 X0 X3 *)
  w 0xfa1f0021;         (* arm_SBCS X1 X1 XZR *)
  w 0xfa1f0042;         (* arm_SBCS X2 X2 XZR *)
  w 0xda1f00a5;         (* arm_SBC X5 X5 XZR *)
  w 0x9240f8a5;         (* arm_AND X5 X5 (rvalue (word 9223372036854775807)) *)
  w 0xaa1403e4;         (* arm_MOV X4 X20 *)
  w 0xa9000480;         (* arm_STP X0 X1 X4 (Immediate_Offset (iword (&0))) *)
  w 0xa9011482;         (* arm_STP X2 X5 X4 (Immediate_Offset (iword (&16))) *)
  w 0xa94813e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&128))) *)
  w 0xa94e23e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&224))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa94f2be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&240))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9491be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&144))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0xb24101ef;         (* arm_ORR X15 X15 (rvalue (word 9223372036854775808)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b081ceb;         (* arm_MADD X11 X7 X8 X7 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0xba1f01ef;         (* arm_ADCS X15 X15 XZR *)
  w 0x9a9f30e7;         (* arm_CSEL X7 X7 XZR Condition_CC *)
  w 0xeb07018c;         (* arm_SUBS X12 X12 X7 *)
  w 0xfa1f01ad;         (* arm_SBCS X13 X13 XZR *)
  w 0xfa1f01ce;         (* arm_SBCS X14 X14 XZR *)
  w 0xda1f01ef;         (* arm_SBC X15 X15 XZR *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0xa90036ec;         (* arm_STP X12 X13 X23 (Immediate_Offset (iword (&0))) *)
  w 0xa9013eee;         (* arm_STP X14 X15 X23 (Immediate_Offset (iword (&16))) *)
  w 0xa94a13e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&160))) *)
  w 0xa94e23e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&224))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa94f2be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&240))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa94b1be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&176))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0xb24101ef;         (* arm_ORR X15 X15 (rvalue (word 9223372036854775808)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b081ceb;         (* arm_MADD X11 X7 X8 X7 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0xba1f01ef;         (* arm_ADCS X15 X15 XZR *)
  w 0x9a9f30e7;         (* arm_CSEL X7 X7 XZR Condition_CC *)
  w 0xeb07018c;         (* arm_SUBS X12 X12 X7 *)
  w 0xfa1f01ad;         (* arm_SBCS X13 X13 XZR *)
  w 0xfa1f01ce;         (* arm_SBCS X14 X14 XZR *)
  w 0xda1f01ef;         (* arm_SBC X15 X15 XZR *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0xa90236ec;         (* arm_STP X12 X13 X23 (Immediate_Offset (iword (&32))) *)
  w 0xa9033eee;         (* arm_STP X14 X15 X23 (Immediate_Offset (iword (&48))) *)
  w 0x910703ff;         (* arm_ADD SP SP (rvalue (word 448)) *)
  w 0xa8c163f7;         (* arm_LDP X23 X24 SP (Postimmediate_Offset (iword (&16))) *)
  w 0xa8c15bf5;         (* arm_LDP X21 X22 SP (Postimmediate_Offset (iword (&16))) *)
  w 0xa8c153f3;         (* arm_LDP X19 X20 SP (Postimmediate_Offset (iword (&16))) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xa9bf53f3;         (* arm_STP X19 X20 SP (Preimmediate_Offset (iword (-- &16))) *)
  w 0xa9bf5bf5;         (* arm_STP X21 X22 SP (Preimmediate_Offset (iword (-- &16))) *)
  w 0xa9bf63f7;         (* arm_STP X23 X24 SP (Preimmediate_Offset (iword (-- &16))) *)
  w 0xa9bf7bf9;         (* arm_STP X25 X30 SP (Preimmediate_Offset (iword (-- &16))) *)
  w 0xd11683ff;         (* arm_SUB SP SP (rvalue (word 1440)) *)
  w 0xaa0003f9;         (* arm_MOV X25 X0 *)
  w 0xd29d2404;         (* arm_MOV X4 (rvalue (word 59680)) *)
  w 0xf2b41b24;         (* arm_MOVK X4 (word 41177) 16 *)
  w 0xf2cdf6a4;         (* arm_MOVK X4 (word 28597) 32 *)
  w 0xf2f8fea4;         (* arm_MOVK X4 (word 51189) 48 *)
  w 0xd2943aa5;         (* arm_MOV X5 (rvalue (word 41429)) *)
  w 0xf2ae1965;         (* arm_MOVK X5 (word 28875) 16 *)
  w 0xf2d73265;         (* arm_MOVK X5 (word 47507) 32 *)
  w 0xf2fc3205;         (* arm_MOVK X5 (word 57744) 48 *)
  w 0xb201e3e7;         (* arm_MOV X7 (rvalue (word 9838263505978427528)) *)
  w 0xd10004e6;         (* arm_SUB X6 X7 (rvalue (word 1)) *)
  w 0x9240ece8;         (* arm_AND X8 X7 (rvalue (word 1152921504606846975)) *)
  w 0xa9402c6a;         (* arm_LDP X10 X11 X3 (Immediate_Offset (iword (&0))) *)
  w 0xa941346c;         (* arm_LDP X12 X13 X3 (Immediate_Offset (iword (&16))) *)
  w 0xd2f00003;         (* arm_MOVZ X3 (word 32768) 48 *)
  w 0xeb0d007f;         (* arm_CMP X3 X13 *)
  w 0x9a8420ee;         (* arm_CSEL X14 X7 X4 Condition_CS *)
  w 0x9a8520ef;         (* arm_CSEL X15 X7 X5 Condition_CS *)
  w 0x9a8620f0;         (* arm_CSEL X16 X7 X6 Condition_CS *)
  w 0x9a872111;         (* arm_CSEL X17 X8 X7 Condition_CS *)
  w 0xab0e014a;         (* arm_ADDS X10 X10 X14 *)
  w 0xba0f016b;         (* arm_ADCS X11 X11 X15 *)
  w 0xba10018c;         (* arm_ADCS X12 X12 X16 *)
  w 0x9a1101ad;         (* arm_ADC X13 X13 X17 *)
  w 0xa9022fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&32))) *)
  w 0xa90337ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&48))) *)
  w 0xa9402c2a;         (* arm_LDP X10 X11 X1 (Immediate_Offset (iword (&0))) *)
  w 0xa941342c;         (* arm_LDP X12 X13 X1 (Immediate_Offset (iword (&16))) *)
  w 0xd2f00003;         (* arm_MOVZ X3 (word 32768) 48 *)
  w 0xeb0d007f;         (* arm_CMP X3 X13 *)
  w 0x9a8420ee;         (* arm_CSEL X14 X7 X4 Condition_CS *)
  w 0x9a8520ef;         (* arm_CSEL X15 X7 X5 Condition_CS *)
  w 0x9a8620f0;         (* arm_CSEL X16 X7 X6 Condition_CS *)
  w 0x9a872111;         (* arm_CSEL X17 X8 X7 Condition_CS *)
  w 0xab0e014a;         (* arm_ADDS X10 X10 X14 *)
  w 0xba0f016b;         (* arm_ADCS X11 X11 X15 *)
  w 0xba10018c;         (* arm_ADCS X12 X12 X16 *)
  w 0x9a1101ad;         (* arm_ADC X13 X13 X17 *)
  w 0xa9002fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&0))) *)
  w 0xa90137ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&16))) *)
  w 0xa9402c4a;         (* arm_LDP X10 X11 X2 (Immediate_Offset (iword (&0))) *)
  w 0xa941344c;         (* arm_LDP X12 X13 X2 (Immediate_Offset (iword (&16))) *)
  w 0xb100994e;         (* arm_ADDS X14 X10 (rvalue (word 38)) *)
  w 0xba1f016f;         (* arm_ADCS X15 X11 XZR *)
  w 0xba1f0190;         (* arm_ADCS X16 X12 XZR *)
  w 0xba1f01b1;         (* arm_ADCS X17 X13 XZR *)
  w 0x9a8a21ca;         (* arm_CSEL X10 X14 X10 Condition_CS *)
  w 0x9a8b21eb;         (* arm_CSEL X11 X15 X11 Condition_CS *)
  w 0x9a8c220c;         (* arm_CSEL X12 X16 X12 Condition_CS *)
  w 0x9a8d222d;         (* arm_CSEL X13 X17 X13 Condition_CS *)
  w 0xa91a2fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&416))) *)
  w 0xa91b37ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&432))) *)
  w 0xa9422c4a;         (* arm_LDP X10 X11 X2 (Immediate_Offset (iword (&32))) *)
  w 0xa943344c;         (* arm_LDP X12 X13 X2 (Immediate_Offset (iword (&48))) *)
  w 0xb100994e;         (* arm_ADDS X14 X10 (rvalue (word 38)) *)
  w 0xba1f016f;         (* arm_ADCS X15 X11 XZR *)
  w 0xba1f0190;         (* arm_ADCS X16 X12 XZR *)
  w 0xba1f01b1;         (* arm_ADCS X17 X13 XZR *)
  w 0x9a8a21ca;         (* arm_CSEL X10 X14 X10 Condition_CS *)
  w 0x9a8b21eb;         (* arm_CSEL X11 X15 X11 Condition_CS *)
  w 0x9a8c220c;         (* arm_CSEL X12 X16 X12 Condition_CS *)
  w 0x9a8d222d;         (* arm_CSEL X13 X17 X13 Condition_CS *)
  w 0xa91c2fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&448))) *)
  w 0xa91d37ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&464))) *)
  w 0xd2800021;         (* arm_MOV X1 (rvalue (word 1)) *)
  w 0xa91e7fe1;         (* arm_STP X1 XZR SP (Immediate_Offset (iword (&480))) *)
  w 0xa91f7fff;         (* arm_STP XZR XZR SP (Immediate_Offset (iword (&496))) *)
  w 0x910803f6;         (* arm_ADD X22 SP (rvalue (word 512)) *)
  w 0x910683f7;         (* arm_ADD X23 SP (rvalue (word 416)) *)
  w 0x910703f8;         (* arm_ADD X24 SP (rvalue (word 448)) *)
  w 0xa94012e3;         (* arm_LDP X3 X4 X23 (Immediate_Offset (iword (&0))) *)
  w 0xa9402307;         (* arm_LDP X7 X8 X24 (Immediate_Offset (iword (&0))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9412b09;         (* arm_LDP X9 X10 X24 (Immediate_Offset (iword (&16))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9411ae5;         (* arm_LDP X5 X6 X23 (Immediate_Offset (iword (&16))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90036cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&0))) *)
  w 0xa9013ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&16))) *)
  w 0x910883f6;         (* arm_ADD X22 SP (rvalue (word 544)) *)
  w 0x910683f7;         (* arm_ADD X23 SP (rvalue (word 416)) *)
  w 0x94000877;         (* arm_BL (word 8668) *)
  w 0x910a83f6;         (* arm_ADD X22 SP (rvalue (word 672)) *)
  w 0x910683f7;         (* arm_ADD X23 SP (rvalue (word 416)) *)
  w 0x910883f8;         (* arm_ADD X24 SP (rvalue (word 544)) *)
  w 0x94000e07;         (* arm_BL (word 14364) *)
  w 0x910c83f6;         (* arm_ADD X22 SP (rvalue (word 800)) *)
  w 0x910883f7;         (* arm_ADD X23 SP (rvalue (word 544)) *)
  w 0x94000870;         (* arm_BL (word 8640) *)
  w 0x910e83f6;         (* arm_ADD X22 SP (rvalue (word 928)) *)
  w 0x910683f7;         (* arm_ADD X23 SP (rvalue (word 416)) *)
  w 0x910c83f8;         (* arm_ADD X24 SP (rvalue (word 800)) *)
  w 0x94000e00;         (* arm_BL (word 14336) *)
  w 0x911083f6;         (* arm_ADD X22 SP (rvalue (word 1056)) *)
  w 0x910a83f7;         (* arm_ADD X23 SP (rvalue (word 672)) *)
  w 0x94000869;         (* arm_BL (word 8612) *)
  w 0x911283f6;         (* arm_ADD X22 SP (rvalue (word 1184)) *)
  w 0x910683f7;         (* arm_ADD X23 SP (rvalue (word 416)) *)
  w 0x911083f8;         (* arm_ADD X24 SP (rvalue (word 1056)) *)
  w 0x94000df9;         (* arm_BL (word 14308) *)
  w 0x911483f6;         (* arm_ADD X22 SP (rvalue (word 1312)) *)
  w 0x910c83f7;         (* arm_ADD X23 SP (rvalue (word 800)) *)
  w 0x94000862;         (* arm_BL (word 8584) *)
  w 0xd2801f93;         (* arm_MOV X19 (rvalue (word 252)) *)
  w 0xf9401fe0;         (* arm_LDR X0 SP (Immediate_Offset (word 56)) *)
  w 0xd37cfc14;         (* arm_LSR X20 X0 60 *)
  ADRP (mk_var("edwards25519_scalarmuldouble_alt_constant_data",`:num`),0,15136,14);
  ADD_rri64 (mk_var("edwards25519_scalarmuldouble_alt_constant_data",`:num`),0,14,14);
  w 0xd2800020;         (* arm_MOV X0 (rvalue (word 1)) *)
  w 0xaa1f03e1;         (* arm_MOV X1 XZR *)
  w 0xaa1f03e2;         (* arm_MOV X2 XZR *)
  w 0xaa1f03e3;         (* arm_MOV X3 XZR *)
  w 0xd2800024;         (* arm_MOV X4 (rvalue (word 1)) *)
  w 0xaa1f03e5;         (* arm_MOV X5 XZR *)
  w 0xaa1f03e6;         (* arm_MOV X6 XZR *)
  w 0xaa1f03e7;         (* arm_MOV X7 XZR *)
  w 0xaa1f03e8;         (* arm_MOV X8 XZR *)
  w 0xaa1f03e9;         (* arm_MOV X9 XZR *)
  w 0xaa1f03ea;         (* arm_MOV X10 XZR *)
  w 0xaa1f03eb;         (* arm_MOV X11 XZR *)
  w 0xf100069f;         (* arm_CMP X20 (rvalue (word 1)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x910181ce;         (* arm_ADD X14 X14 (rvalue (word 96)) *)
  w 0xf1000a9f;         (* arm_CMP X20 (rvalue (word 2)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x910181ce;         (* arm_ADD X14 X14 (rvalue (word 96)) *)
  w 0xf1000e9f;         (* arm_CMP X20 (rvalue (word 3)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x910181ce;         (* arm_ADD X14 X14 (rvalue (word 96)) *)
  w 0xf100129f;         (* arm_CMP X20 (rvalue (word 4)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x910181ce;         (* arm_ADD X14 X14 (rvalue (word 96)) *)
  w 0xf100169f;         (* arm_CMP X20 (rvalue (word 5)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x910181ce;         (* arm_ADD X14 X14 (rvalue (word 96)) *)
  w 0xf1001a9f;         (* arm_CMP X20 (rvalue (word 6)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x910181ce;         (* arm_ADD X14 X14 (rvalue (word 96)) *)
  w 0xf1001e9f;         (* arm_CMP X20 (rvalue (word 7)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x910181ce;         (* arm_ADD X14 X14 (rvalue (word 96)) *)
  w 0xf100229f;         (* arm_CMP X20 (rvalue (word 8)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0xa90407e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&64))) *)
  w 0xa9050fe2;         (* arm_STP X2 X3 SP (Immediate_Offset (iword (&80))) *)
  w 0xa90617e4;         (* arm_STP X4 X5 SP (Immediate_Offset (iword (&96))) *)
  w 0xa9071fe6;         (* arm_STP X6 X7 SP (Immediate_Offset (iword (&112))) *)
  w 0xa90827e8;         (* arm_STP X8 X9 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9092fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&144))) *)
  w 0xf9400fe0;         (* arm_LDR X0 SP (Immediate_Offset (word 24)) *)
  w 0xd37cfc14;         (* arm_LSR X20 X0 60 *)
  w 0x910683f6;         (* arm_ADD X22 SP (rvalue (word 416)) *)
  w 0xaa1f03e0;         (* arm_MOV X0 XZR *)
  w 0xaa1f03e1;         (* arm_MOV X1 XZR *)
  w 0xaa1f03e2;         (* arm_MOV X2 XZR *)
  w 0xaa1f03e3;         (* arm_MOV X3 XZR *)
  w 0xd2800024;         (* arm_MOV X4 (rvalue (word 1)) *)
  w 0xaa1f03e5;         (* arm_MOV X5 XZR *)
  w 0xaa1f03e6;         (* arm_MOV X6 XZR *)
  w 0xaa1f03e7;         (* arm_MOV X7 XZR *)
  w 0xd2800028;         (* arm_MOV X8 (rvalue (word 1)) *)
  w 0xaa1f03e9;         (* arm_MOV X9 XZR *)
  w 0xaa1f03ea;         (* arm_MOV X10 XZR *)
  w 0xaa1f03eb;         (* arm_MOV X11 XZR *)
  w 0xaa1f03ec;         (* arm_MOV X12 XZR *)
  w 0xaa1f03ed;         (* arm_MOV X13 XZR *)
  w 0xaa1f03ee;         (* arm_MOV X14 XZR *)
  w 0xaa1f03ef;         (* arm_MOV X15 XZR *)
  w 0xf100069f;         (* arm_CMP X20 (rvalue (word 1)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0x910202d6;         (* arm_ADD X22 X22 (rvalue (word 128)) *)
  w 0xf1000a9f;         (* arm_CMP X20 (rvalue (word 2)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0x910202d6;         (* arm_ADD X22 X22 (rvalue (word 128)) *)
  w 0xf1000e9f;         (* arm_CMP X20 (rvalue (word 3)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0x910202d6;         (* arm_ADD X22 X22 (rvalue (word 128)) *)
  w 0xf100129f;         (* arm_CMP X20 (rvalue (word 4)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0x910202d6;         (* arm_ADD X22 X22 (rvalue (word 128)) *)
  w 0xf100169f;         (* arm_CMP X20 (rvalue (word 5)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0x910202d6;         (* arm_ADD X22 X22 (rvalue (word 128)) *)
  w 0xf1001a9f;         (* arm_CMP X20 (rvalue (word 6)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0x910202d6;         (* arm_ADD X22 X22 (rvalue (word 128)) *)
  w 0xf1001e9f;         (* arm_CMP X20 (rvalue (word 7)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0x910202d6;         (* arm_ADD X22 X22 (rvalue (word 128)) *)
  w 0xf100229f;         (* arm_CMP X20 (rvalue (word 8)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0xa91207e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&288))) *)
  w 0xa9130fe2;         (* arm_STP X2 X3 SP (Immediate_Offset (iword (&304))) *)
  w 0xa91417e4;         (* arm_STP X4 X5 SP (Immediate_Offset (iword (&320))) *)
  w 0xa9151fe6;         (* arm_STP X6 X7 SP (Immediate_Offset (iword (&336))) *)
  w 0xa91627e8;         (* arm_STP X8 X9 SP (Immediate_Offset (iword (&352))) *)
  w 0xa9172fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&368))) *)
  w 0xa91837ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&384))) *)
  w 0xa9193fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&400))) *)
  w 0x910283f6;         (* arm_ADD X22 SP (rvalue (word 160)) *)
  w 0x910483f7;         (* arm_ADD X23 SP (rvalue (word 288)) *)
  w 0x910103f8;         (* arm_ADD X24 SP (rvalue (word 64)) *)
  w 0x94001043;         (* arm_BL (word 16652) *)
  w 0xd1001273;         (* arm_SUB X19 X19 (rvalue (word 4)) *)
  w 0x910283f6;         (* arm_ADD X22 SP (rvalue (word 160)) *)
  w 0x910283f7;         (* arm_ADD X23 SP (rvalue (word 160)) *)
  w 0x940009b3;         (* arm_BL (word 9932) *)
  w 0xd346fe60;         (* arm_LSR X0 X19 6 *)
  w 0x910083e1;         (* arm_ADD X1 SP (rvalue (word 32)) *)
  w 0xf8607822;         (* arm_LDR X2 X1 (Shiftreg_Offset X0 3) *)
  w 0x9ad32443;         (* arm_LSRV X3 X2 X19 *)
  w 0x92400c60;         (* arm_AND X0 X3 (rvalue (word 15)) *)
  w 0xf1002014;         (* arm_SUBS X20 X0 (rvalue (word 8)) *)
  w 0xda942694;         (* arm_CNEG X20 X20 Condition_CC *)
  w 0xda9f23f5;         (* arm_CSETM X21 Condition_CC *)
  ADRP (mk_var("edwards25519_scalarmuldouble_alt_constant_data",`:num`),0,16852,14);
  ADD_rri64 (mk_var("edwards25519_scalarmuldouble_alt_constant_data",`:num`),0,14,14);
  w 0xd2800020;         (* arm_MOV X0 (rvalue (word 1)) *)
  w 0xaa1f03e1;         (* arm_MOV X1 XZR *)
  w 0xaa1f03e2;         (* arm_MOV X2 XZR *)
  w 0xaa1f03e3;         (* arm_MOV X3 XZR *)
  w 0xd2800024;         (* arm_MOV X4 (rvalue (word 1)) *)
  w 0xaa1f03e5;         (* arm_MOV X5 XZR *)
  w 0xaa1f03e6;         (* arm_MOV X6 XZR *)
  w 0xaa1f03e7;         (* arm_MOV X7 XZR *)
  w 0xaa1f03e8;         (* arm_MOV X8 XZR *)
  w 0xaa1f03e9;         (* arm_MOV X9 XZR *)
  w 0xaa1f03ea;         (* arm_MOV X10 XZR *)
  w 0xaa1f03eb;         (* arm_MOV X11 XZR *)
  w 0xf100069f;         (* arm_CMP X20 (rvalue (word 1)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x910181ce;         (* arm_ADD X14 X14 (rvalue (word 96)) *)
  w 0xf1000a9f;         (* arm_CMP X20 (rvalue (word 2)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x910181ce;         (* arm_ADD X14 X14 (rvalue (word 96)) *)
  w 0xf1000e9f;         (* arm_CMP X20 (rvalue (word 3)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x910181ce;         (* arm_ADD X14 X14 (rvalue (word 96)) *)
  w 0xf100129f;         (* arm_CMP X20 (rvalue (word 4)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x910181ce;         (* arm_ADD X14 X14 (rvalue (word 96)) *)
  w 0xf100169f;         (* arm_CMP X20 (rvalue (word 5)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x910181ce;         (* arm_ADD X14 X14 (rvalue (word 96)) *)
  w 0xf1001a9f;         (* arm_CMP X20 (rvalue (word 6)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x910181ce;         (* arm_ADD X14 X14 (rvalue (word 96)) *)
  w 0xf1001e9f;         (* arm_CMP X20 (rvalue (word 7)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0x910181ce;         (* arm_ADD X14 X14 (rvalue (word 96)) *)
  w 0xf100229f;         (* arm_CMP X20 (rvalue (word 8)) *)
  w 0xa94035cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&0))) *)
  w 0x9a8c1000;         (* arm_CSEL X0 X0 X12 Condition_NE *)
  w 0x9a8d1021;         (* arm_CSEL X1 X1 X13 Condition_NE *)
  w 0xa94135cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&16))) *)
  w 0x9a8c1042;         (* arm_CSEL X2 X2 X12 Condition_NE *)
  w 0x9a8d1063;         (* arm_CSEL X3 X3 X13 Condition_NE *)
  w 0xa94235cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&32))) *)
  w 0x9a8c1084;         (* arm_CSEL X4 X4 X12 Condition_NE *)
  w 0x9a8d10a5;         (* arm_CSEL X5 X5 X13 Condition_NE *)
  w 0xa94335cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&48))) *)
  w 0x9a8c10c6;         (* arm_CSEL X6 X6 X12 Condition_NE *)
  w 0x9a8d10e7;         (* arm_CSEL X7 X7 X13 Condition_NE *)
  w 0xa94435cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&64))) *)
  w 0x9a8c1108;         (* arm_CSEL X8 X8 X12 Condition_NE *)
  w 0x9a8d1129;         (* arm_CSEL X9 X9 X13 Condition_NE *)
  w 0xa94535cc;         (* arm_LDP X12 X13 X14 (Immediate_Offset (iword (&80))) *)
  w 0x9a8c114a;         (* arm_CSEL X10 X10 X12 Condition_NE *)
  w 0x9a8d116b;         (* arm_CSEL X11 X11 X13 Condition_NE *)
  w 0xeb1f02bf;         (* arm_CMP X21 XZR *)
  w 0x9a84000c;         (* arm_CSEL X12 X0 X4 Condition_EQ *)
  w 0x9a841004;         (* arm_CSEL X4 X0 X4 Condition_NE *)
  w 0x9a85002d;         (* arm_CSEL X13 X1 X5 Condition_EQ *)
  w 0x9a851025;         (* arm_CSEL X5 X1 X5 Condition_NE *)
  w 0x9a86004e;         (* arm_CSEL X14 X2 X6 Condition_EQ *)
  w 0x9a861046;         (* arm_CSEL X6 X2 X6 Condition_NE *)
  w 0x9a87006f;         (* arm_CSEL X15 X3 X7 Condition_EQ *)
  w 0x9a871067;         (* arm_CSEL X7 X3 X7 Condition_NE *)
  w 0xca150108;         (* arm_EOR X8 X8 X21 *)
  w 0xca150129;         (* arm_EOR X9 X9 X21 *)
  w 0xca15014a;         (* arm_EOR X10 X10 X21 *)
  w 0xca15016b;         (* arm_EOR X11 X11 X21 *)
  w 0xd28004a0;         (* arm_MOV X0 (rvalue (word 37)) *)
  w 0x8a150000;         (* arm_AND X0 X0 X21 *)
  w 0xeb000108;         (* arm_SUBS X8 X8 X0 *)
  w 0xfa1f0129;         (* arm_SBCS X9 X9 XZR *)
  w 0xfa1f014a;         (* arm_SBCS X10 X10 XZR *)
  w 0xda1f016b;         (* arm_SBC X11 X11 XZR *)
  w 0xa90437ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&64))) *)
  w 0xa9053fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&80))) *)
  w 0xa90617e4;         (* arm_STP X4 X5 SP (Immediate_Offset (iword (&96))) *)
  w 0xa9071fe6;         (* arm_STP X6 X7 SP (Immediate_Offset (iword (&112))) *)
  w 0xa90827e8;         (* arm_STP X8 X9 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9092fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&144))) *)
  w 0xd346fe60;         (* arm_LSR X0 X19 6 *)
  w 0xf8607be1;         (* arm_LDR X1 SP (Shiftreg_Offset X0 3) *)
  w 0x9ad32422;         (* arm_LSRV X2 X1 X19 *)
  w 0x92400c40;         (* arm_AND X0 X2 (rvalue (word 15)) *)
  w 0xf1002014;         (* arm_SUBS X20 X0 (rvalue (word 8)) *)
  w 0xda942694;         (* arm_CNEG X20 X20 Condition_CC *)
  w 0xda9f23f5;         (* arm_CSETM X21 Condition_CC *)
  w 0x910683f6;         (* arm_ADD X22 SP (rvalue (word 416)) *)
  w 0xaa1f03e0;         (* arm_MOV X0 XZR *)
  w 0xaa1f03e1;         (* arm_MOV X1 XZR *)
  w 0xaa1f03e2;         (* arm_MOV X2 XZR *)
  w 0xaa1f03e3;         (* arm_MOV X3 XZR *)
  w 0xd2800024;         (* arm_MOV X4 (rvalue (word 1)) *)
  w 0xaa1f03e5;         (* arm_MOV X5 XZR *)
  w 0xaa1f03e6;         (* arm_MOV X6 XZR *)
  w 0xaa1f03e7;         (* arm_MOV X7 XZR *)
  w 0xd2800028;         (* arm_MOV X8 (rvalue (word 1)) *)
  w 0xaa1f03e9;         (* arm_MOV X9 XZR *)
  w 0xaa1f03ea;         (* arm_MOV X10 XZR *)
  w 0xaa1f03eb;         (* arm_MOV X11 XZR *)
  w 0xaa1f03ec;         (* arm_MOV X12 XZR *)
  w 0xaa1f03ed;         (* arm_MOV X13 XZR *)
  w 0xaa1f03ee;         (* arm_MOV X14 XZR *)
  w 0xaa1f03ef;         (* arm_MOV X15 XZR *)
  w 0xf100069f;         (* arm_CMP X20 (rvalue (word 1)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0x910202d6;         (* arm_ADD X22 X22 (rvalue (word 128)) *)
  w 0xf1000a9f;         (* arm_CMP X20 (rvalue (word 2)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0x910202d6;         (* arm_ADD X22 X22 (rvalue (word 128)) *)
  w 0xf1000e9f;         (* arm_CMP X20 (rvalue (word 3)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0x910202d6;         (* arm_ADD X22 X22 (rvalue (word 128)) *)
  w 0xf100129f;         (* arm_CMP X20 (rvalue (word 4)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0x910202d6;         (* arm_ADD X22 X22 (rvalue (word 128)) *)
  w 0xf100169f;         (* arm_CMP X20 (rvalue (word 5)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0x910202d6;         (* arm_ADD X22 X22 (rvalue (word 128)) *)
  w 0xf1001a9f;         (* arm_CMP X20 (rvalue (word 6)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0x910202d6;         (* arm_ADD X22 X22 (rvalue (word 128)) *)
  w 0xf1001e9f;         (* arm_CMP X20 (rvalue (word 7)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0x910202d6;         (* arm_ADD X22 X22 (rvalue (word 128)) *)
  w 0xf100229f;         (* arm_CMP X20 (rvalue (word 8)) *)
  w 0xa94046d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&0))) *)
  w 0x9a901000;         (* arm_CSEL X0 X0 X16 Condition_NE *)
  w 0x9a911021;         (* arm_CSEL X1 X1 X17 Condition_NE *)
  w 0xa94146d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&16))) *)
  w 0x9a901042;         (* arm_CSEL X2 X2 X16 Condition_NE *)
  w 0x9a911063;         (* arm_CSEL X3 X3 X17 Condition_NE *)
  w 0xa94246d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&32))) *)
  w 0x9a901084;         (* arm_CSEL X4 X4 X16 Condition_NE *)
  w 0x9a9110a5;         (* arm_CSEL X5 X5 X17 Condition_NE *)
  w 0xa94346d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&48))) *)
  w 0x9a9010c6;         (* arm_CSEL X6 X6 X16 Condition_NE *)
  w 0x9a9110e7;         (* arm_CSEL X7 X7 X17 Condition_NE *)
  w 0xa94446d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&64))) *)
  w 0x9a901108;         (* arm_CSEL X8 X8 X16 Condition_NE *)
  w 0x9a911129;         (* arm_CSEL X9 X9 X17 Condition_NE *)
  w 0xa94546d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&80))) *)
  w 0x9a90114a;         (* arm_CSEL X10 X10 X16 Condition_NE *)
  w 0x9a91116b;         (* arm_CSEL X11 X11 X17 Condition_NE *)
  w 0xa94646d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&96))) *)
  w 0x9a90118c;         (* arm_CSEL X12 X12 X16 Condition_NE *)
  w 0x9a9111ad;         (* arm_CSEL X13 X13 X17 Condition_NE *)
  w 0xa94746d0;         (* arm_LDP X16 X17 X22 (Immediate_Offset (iword (&112))) *)
  w 0x9a9011ce;         (* arm_CSEL X14 X14 X16 Condition_NE *)
  w 0x9a9111ef;         (* arm_CSEL X15 X15 X17 Condition_NE *)
  w 0xca150000;         (* arm_EOR X0 X0 X21 *)
  w 0xca150021;         (* arm_EOR X1 X1 X21 *)
  w 0xca150042;         (* arm_EOR X2 X2 X21 *)
  w 0xca150063;         (* arm_EOR X3 X3 X21 *)
  w 0xd28004b0;         (* arm_MOV X16 (rvalue (word 37)) *)
  w 0x8a150210;         (* arm_AND X16 X16 X21 *)
  w 0xeb100000;         (* arm_SUBS X0 X0 X16 *)
  w 0xfa1f0021;         (* arm_SBCS X1 X1 XZR *)
  w 0xfa1f0042;         (* arm_SBCS X2 X2 XZR *)
  w 0xda1f0063;         (* arm_SBC X3 X3 XZR *)
  w 0xca15018c;         (* arm_EOR X12 X12 X21 *)
  w 0xca1501ad;         (* arm_EOR X13 X13 X21 *)
  w 0xca1501ce;         (* arm_EOR X14 X14 X21 *)
  w 0xca1501ef;         (* arm_EOR X15 X15 X21 *)
  w 0xeb10018c;         (* arm_SUBS X12 X12 X16 *)
  w 0xfa1f01ad;         (* arm_SBCS X13 X13 XZR *)
  w 0xfa1f01ce;         (* arm_SBCS X14 X14 XZR *)
  w 0xda1f01ef;         (* arm_SBC X15 X15 XZR *)
  w 0xa91207e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&288))) *)
  w 0xa9130fe2;         (* arm_STP X2 X3 SP (Immediate_Offset (iword (&304))) *)
  w 0xa91417e4;         (* arm_STP X4 X5 SP (Immediate_Offset (iword (&320))) *)
  w 0xa9151fe6;         (* arm_STP X6 X7 SP (Immediate_Offset (iword (&336))) *)
  w 0xa91627e8;         (* arm_STP X8 X9 SP (Immediate_Offset (iword (&352))) *)
  w 0xa9172fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&368))) *)
  w 0xa91837ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&384))) *)
  w 0xa9193fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&400))) *)
  w 0x910283f6;         (* arm_ADD X22 SP (rvalue (word 160)) *)
  w 0x910283f7;         (* arm_ADD X23 SP (rvalue (word 160)) *)
  w 0x940007e1;         (* arm_BL (word 8068) *)
  w 0x910483f6;         (* arm_ADD X22 SP (rvalue (word 288)) *)
  w 0x910483f7;         (* arm_ADD X23 SP (rvalue (word 288)) *)
  w 0x910103f8;         (* arm_ADD X24 SP (rvalue (word 64)) *)
  w 0x94000e69;         (* arm_BL (word 14756) *)
  w 0x910283f6;         (* arm_ADD X22 SP (rvalue (word 160)) *)
  w 0x910283f7;         (* arm_ADD X23 SP (rvalue (word 160)) *)
  w 0x940007da;         (* arm_BL (word 8040) *)
  w 0x910283f6;         (* arm_ADD X22 SP (rvalue (word 160)) *)
  w 0x910283f7;         (* arm_ADD X23 SP (rvalue (word 160)) *)
  w 0x940004de;         (* arm_BL (word 4984) *)
  w 0x910283f6;         (* arm_ADD X22 SP (rvalue (word 160)) *)
  w 0x910283f7;         (* arm_ADD X23 SP (rvalue (word 160)) *)
  w 0x910483f8;         (* arm_ADD X24 SP (rvalue (word 288)) *)
  w 0x94000a6e;         (* arm_BL (word 10680) *)
  w 0xb5ffc393;         (* arm_CBNZ X19 (word 2095216) *)
  w 0x910483e0;         (* arm_ADD X0 SP (rvalue (word 288)) *)
  w 0x910383e1;         (* arm_ADD X1 SP (rvalue (word 224)) *)
  w 0xaa0003f4;         (* arm_MOV X20 X0 *)
  w 0x9280024a;         (* arm_MOVN X10 (word 18) 0 *)
  w 0x9280000b;         (* arm_MOVN X11 (word 0) 0 *)
  w 0xa9002fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&0))) *)
  w 0x92f0000c;         (* arm_MOVN X12 (word 32768) 48 *)
  w 0xa90133eb;         (* arm_STP X11 X12 SP (Immediate_Offset (iword (&16))) *)
  w 0xa9400c22;         (* arm_LDP X2 X3 X1 (Immediate_Offset (iword (&0))) *)
  w 0xa9411424;         (* arm_LDP X4 X5 X1 (Immediate_Offset (iword (&16))) *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0xd37ffca6;         (* arm_LSR X6 X5 63 *)
  w 0x9b061ce6;         (* arm_MADD X6 X7 X6 X7 *)
  w 0xab060042;         (* arm_ADDS X2 X2 X6 *)
  w 0xba1f0063;         (* arm_ADCS X3 X3 XZR *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xb24100a5;         (* arm_ORR X5 X5 (rvalue (word 9223372036854775808)) *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a9f30e6;         (* arm_CSEL X6 X7 XZR Condition_CC *)
  w 0xeb060042;         (* arm_SUBS X2 X2 X6 *)
  w 0xfa1f0063;         (* arm_SBCS X3 X3 XZR *)
  w 0xfa1f0084;         (* arm_SBCS X4 X4 XZR *)
  w 0xda1f00a5;         (* arm_SBC X5 X5 XZR *)
  w 0x9240f8a5;         (* arm_AND X5 X5 (rvalue (word 9223372036854775807)) *)
  w 0xa9020fe2;         (* arm_STP X2 X3 SP (Immediate_Offset (iword (&32))) *)
  w 0xa90317e4;         (* arm_STP X4 X5 SP (Immediate_Offset (iword (&48))) *)
  w 0xa9047fff;         (* arm_STP XZR XZR SP (Immediate_Offset (iword (&64))) *)
  w 0xa9057fff;         (* arm_STP XZR XZR SP (Immediate_Offset (iword (&80))) *)
  w 0xd284132a;         (* arm_MOV X10 (rvalue (word 8345)) *)
  w 0xf2aea04a;         (* arm_MOVK X10 (word 29954) 16 *)
  w 0xf2d3c46a;         (* arm_MOVK X10 (word 40483) 32 *)
  w 0xf2f41f2a;         (* arm_MOVK X10 (word 41209) 48 *)
  w 0xd284b2ab;         (* arm_MOV X11 (rvalue (word 9621)) *)
  w 0xf2a3a26b;         (* arm_MOVK X11 (word 7443) 16 *)
  w 0xf2d1e7eb;         (* arm_MOVK X11 (word 36671) 32 *)
  w 0xf2f518cb;         (* arm_MOVK X11 (word 43206) 48 *)
  w 0xd28a484c;         (* arm_MOV X12 (rvalue (word 21058)) *)
  w 0xf2a0b58c;         (* arm_MOVK X12 (word 1452) 16 *)
  w 0xf2d1270c;         (* arm_MOVK X12 (word 35128) 32 *)
  w 0xf2ed8d8c;         (* arm_MOVK X12 (word 27756) 48 *)
  w 0xd280c2ad;         (* arm_MOV X13 (rvalue (word 1557)) *)
  w 0xf2a82eed;         (* arm_MOVK X13 (word 16759) 16 *)
  w 0xf2c1164d;         (* arm_MOVK X13 (word 2226) 32 *)
  w 0xf2e4ecad;         (* arm_MOVK X13 (word 10085) 48 *)
  w 0xa9062fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&96))) *)
  w 0xa90737ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&112))) *)
  w 0xd2800155;         (* arm_MOV X21 (rvalue (word 10)) *)
  w 0xd2800036;         (* arm_MOV X22 (rvalue (word 1)) *)
  w 0x1400010b;         (* arm_B (word 1068) *)
  w 0xeb1f015f;         (* arm_CMP X10 XZR *)
  w 0xda9f53ee;         (* arm_CSETM X14 Condition_MI *)
  w 0xda8a554a;         (* arm_CNEG X10 X10 Condition_MI *)
  w 0xeb1f017f;         (* arm_CMP X11 XZR *)
  w 0xda9f53ef;         (* arm_CSETM X15 Condition_MI *)
  w 0xda8b556b;         (* arm_CNEG X11 X11 Condition_MI *)
  w 0xeb1f019f;         (* arm_CMP X12 XZR *)
  w 0xda9f53f0;         (* arm_CSETM X16 Condition_MI *)
  w 0xda8c558c;         (* arm_CNEG X12 X12 Condition_MI *)
  w 0xeb1f01bf;         (* arm_CMP X13 XZR *)
  w 0xda9f53f1;         (* arm_CSETM X17 Condition_MI *)
  w 0xda8d55ad;         (* arm_CNEG X13 X13 Condition_MI *)
  w 0x8a0e0140;         (* arm_AND X0 X10 X14 *)
  w 0x8a0f0161;         (* arm_AND X1 X11 X15 *)
  w 0x8b010009;         (* arm_ADD X9 X0 X1 *)
  w 0x8a100180;         (* arm_AND X0 X12 X16 *)
  w 0x8a1101a1;         (* arm_AND X1 X13 X17 *)
  w 0x8b010013;         (* arm_ADD X19 X0 X1 *)
  w 0xf94003e7;         (* arm_LDR X7 SP (Immediate_Offset (word 0)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab000124;         (* arm_ADDS X4 X9 X0 *)
  w 0x9a0103e2;         (* arm_ADC X2 XZR X1 *)
  w 0xf94013e8;         (* arm_LDR X8 SP (Immediate_Offset (word 32)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab000084;         (* arm_ADDS X4 X4 X0 *)
  w 0x9a010042;         (* arm_ADC X2 X2 X1 *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000265;         (* arm_ADDS X5 X19 X0 *)
  w 0x9a0103e3;         (* arm_ADC X3 XZR X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0xf94007e7;         (* arm_LDR X7 SP (Immediate_Offset (word 8)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0103e6;         (* arm_ADC X6 XZR X1 *)
  w 0xf94017e8;         (* arm_LDR X8 SP (Immediate_Offset (word 40)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0100c6;         (* arm_ADC X6 X6 X1 *)
  w 0x93c4ec44;         (* arm_EXTR X4 X2 X4 59 *)
  w 0xf90003e4;         (* arm_STR X4 SP (Immediate_Offset (word 0)) *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000063;         (* arm_ADDS X3 X3 X0 *)
  w 0x9a0103e4;         (* arm_ADC X4 XZR X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab000063;         (* arm_ADDS X3 X3 X0 *)
  w 0x9a010084;         (* arm_ADC X4 X4 X1 *)
  w 0x93c5ec65;         (* arm_EXTR X5 X3 X5 59 *)
  w 0xf90013e5;         (* arm_STR X5 SP (Immediate_Offset (word 32)) *)
  w 0xf9400be7;         (* arm_LDR X7 SP (Immediate_Offset (word 16)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab0000c6;         (* arm_ADDS X6 X6 X0 *)
  w 0x9a0103e5;         (* arm_ADC X5 XZR X1 *)
  w 0xf9401be8;         (* arm_LDR X8 SP (Immediate_Offset (word 48)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab0000c6;         (* arm_ADDS X6 X6 X0 *)
  w 0x9a0100a5;         (* arm_ADC X5 X5 X1 *)
  w 0x93c2ecc2;         (* arm_EXTR X2 X6 X2 59 *)
  w 0xf90007e2;         (* arm_STR X2 SP (Immediate_Offset (word 8)) *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000084;         (* arm_ADDS X4 X4 X0 *)
  w 0x9a0103e2;         (* arm_ADC X2 XZR X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab000084;         (* arm_ADDS X4 X4 X0 *)
  w 0x9a010042;         (* arm_ADC X2 X2 X1 *)
  w 0x93c3ec83;         (* arm_EXTR X3 X4 X3 59 *)
  w 0xf90017e3;         (* arm_STR X3 SP (Immediate_Offset (word 40)) *)
  w 0xf9400fe7;         (* arm_LDR X7 SP (Immediate_Offset (word 24)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x937ffc23;         (* arm_ASR X3 X1 63 *)
  w 0x8a0a0063;         (* arm_AND X3 X3 X10 *)
  w 0xcb0303e3;         (* arm_NEG X3 X3 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0xf9401fe8;         (* arm_LDR X8 SP (Immediate_Offset (word 56)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x937ffc20;         (* arm_ASR X0 X1 63 *)
  w 0x8a0b0000;         (* arm_AND X0 X0 X11 *)
  w 0xcb000063;         (* arm_SUB X3 X3 X0 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0x93c6eca6;         (* arm_EXTR X6 X5 X6 59 *)
  w 0xf9000be6;         (* arm_STR X6 SP (Immediate_Offset (word 16)) *)
  w 0x93c5ec65;         (* arm_EXTR X5 X3 X5 59 *)
  w 0xf9000fe5;         (* arm_STR X5 SP (Immediate_Offset (word 24)) *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x937ffc25;         (* arm_ASR X5 X1 63 *)
  w 0x8a0c00a5;         (* arm_AND X5 X5 X12 *)
  w 0xcb0503e5;         (* arm_NEG X5 X5 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0100a5;         (* arm_ADC X5 X5 X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x937ffc20;         (* arm_ASR X0 X1 63 *)
  w 0x8a0d0000;         (* arm_AND X0 X0 X13 *)
  w 0xcb0000a5;         (* arm_SUB X5 X5 X0 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0100a5;         (* arm_ADC X5 X5 X1 *)
  w 0x93c4ec44;         (* arm_EXTR X4 X2 X4 59 *)
  w 0xf9001be4;         (* arm_STR X4 SP (Immediate_Offset (word 48)) *)
  w 0x93c2eca2;         (* arm_EXTR X2 X5 X2 59 *)
  w 0xf9001fe2;         (* arm_STR X2 SP (Immediate_Offset (word 56)) *)
  w 0xf94023e7;         (* arm_LDR X7 SP (Immediate_Offset (word 64)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab000124;         (* arm_ADDS X4 X9 X0 *)
  w 0x9a0103e2;         (* arm_ADC X2 XZR X1 *)
  w 0xf94033e8;         (* arm_LDR X8 SP (Immediate_Offset (word 96)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab000084;         (* arm_ADDS X4 X4 X0 *)
  w 0xf90023e4;         (* arm_STR X4 SP (Immediate_Offset (word 64)) *)
  w 0x9a010042;         (* arm_ADC X2 X2 X1 *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000265;         (* arm_ADDS X5 X19 X0 *)
  w 0x9a0103e3;         (* arm_ADC X3 XZR X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0xf90033e5;         (* arm_STR X5 SP (Immediate_Offset (word 96)) *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0xf94027e7;         (* arm_LDR X7 SP (Immediate_Offset (word 72)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0103e6;         (* arm_ADC X6 XZR X1 *)
  w 0xf94037e8;         (* arm_LDR X8 SP (Immediate_Offset (word 104)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0xf90027e2;         (* arm_STR X2 SP (Immediate_Offset (word 72)) *)
  w 0x9a0100c6;         (* arm_ADC X6 X6 X1 *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000063;         (* arm_ADDS X3 X3 X0 *)
  w 0x9a0103e4;         (* arm_ADC X4 XZR X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab000063;         (* arm_ADDS X3 X3 X0 *)
  w 0xf90037e3;         (* arm_STR X3 SP (Immediate_Offset (word 104)) *)
  w 0x9a010084;         (* arm_ADC X4 X4 X1 *)
  w 0xf9402be7;         (* arm_LDR X7 SP (Immediate_Offset (word 80)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab0000c6;         (* arm_ADDS X6 X6 X0 *)
  w 0x9a0103e5;         (* arm_ADC X5 XZR X1 *)
  w 0xf9403be8;         (* arm_LDR X8 SP (Immediate_Offset (word 112)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab0000c6;         (* arm_ADDS X6 X6 X0 *)
  w 0xf9002be6;         (* arm_STR X6 SP (Immediate_Offset (word 80)) *)
  w 0x9a0100a5;         (* arm_ADC X5 X5 X1 *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000084;         (* arm_ADDS X4 X4 X0 *)
  w 0x9a0103e2;         (* arm_ADC X2 XZR X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab000084;         (* arm_ADDS X4 X4 X0 *)
  w 0xf9003be4;         (* arm_STR X4 SP (Immediate_Offset (word 112)) *)
  w 0x9a010042;         (* arm_ADC X2 X2 X1 *)
  w 0xf9402fe7;         (* arm_LDR X7 SP (Immediate_Offset (word 88)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x8a0a01c3;         (* arm_AND X3 X14 X10 *)
  w 0xcb0303e3;         (* arm_NEG X3 X3 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0xf9403fe8;         (* arm_LDR X8 SP (Immediate_Offset (word 120)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x8a0b01e0;         (* arm_AND X0 X15 X11 *)
  w 0xcb000063;         (* arm_SUB X3 X3 X0 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0x93c5fc66;         (* arm_EXTR X6 X3 X5 63 *)
  w 0xa94407e0;         (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&64))) *)
  w 0x8b83fcc6;         (* arm_ADD X6 X6 (Shiftedreg X3 ASR 63) *)
  w 0xd2800263;         (* arm_MOV X3 (rvalue (word 19)) *)
  w 0x9b037cc4;         (* arm_MUL X4 X6 X3 *)
  w 0x8b06fca5;         (* arm_ADD X5 X5 (Shiftedreg X6 LSL 63) *)
  w 0x9b437cc3;         (* arm_SMULH X3 X6 X3 *)
  w 0xf9402be6;         (* arm_LDR X6 SP (Immediate_Offset (word 80)) *)
  w 0xab040000;         (* arm_ADDS X0 X0 X4 *)
  w 0xba030021;         (* arm_ADCS X1 X1 X3 *)
  w 0x937ffc63;         (* arm_ASR X3 X3 63 *)
  w 0xba0300c6;         (* arm_ADCS X6 X6 X3 *)
  w 0x9a0300a5;         (* arm_ADC X5 X5 X3 *)
  w 0xa90407e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&64))) *)
  w 0xa90517e6;         (* arm_STP X6 X5 SP (Immediate_Offset (iword (&80))) *)
  w 0xca1000e1;         (* arm_EOR X1 X7 X16 *)
  w 0x8a0c0205;         (* arm_AND X5 X16 X12 *)
  w 0xcb0503e5;         (* arm_NEG X5 X5 *)
  w 0x9b0c7c20;         (* arm_MUL X0 X1 X12 *)
  w 0x9bcc7c21;         (* arm_UMULH X1 X1 X12 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0100a5;         (* arm_ADC X5 X5 X1 *)
  w 0xca110101;         (* arm_EOR X1 X8 X17 *)
  w 0x8a0d0220;         (* arm_AND X0 X17 X13 *)
  w 0xcb0000a5;         (* arm_SUB X5 X5 X0 *)
  w 0x9b0d7c20;         (* arm_MUL X0 X1 X13 *)
  w 0x9bcd7c21;         (* arm_UMULH X1 X1 X13 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0100a5;         (* arm_ADC X5 X5 X1 *)
  w 0x93c2fca6;         (* arm_EXTR X6 X5 X2 63 *)
  w 0xa94607e0;         (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&96))) *)
  w 0x8b85fcc6;         (* arm_ADD X6 X6 (Shiftedreg X5 ASR 63) *)
  w 0xd2800265;         (* arm_MOV X5 (rvalue (word 19)) *)
  w 0x9b057cc4;         (* arm_MUL X4 X6 X5 *)
  w 0x8b06fc42;         (* arm_ADD X2 X2 (Shiftedreg X6 LSL 63) *)
  w 0x9b457cc5;         (* arm_SMULH X5 X6 X5 *)
  w 0xf9403be3;         (* arm_LDR X3 SP (Immediate_Offset (word 112)) *)
  w 0xab040000;         (* arm_ADDS X0 X0 X4 *)
  w 0xba050021;         (* arm_ADCS X1 X1 X5 *)
  w 0x937ffca5;         (* arm_ASR X5 X5 63 *)
  w 0xba050063;         (* arm_ADCS X3 X3 X5 *)
  w 0x9a050042;         (* arm_ADC X2 X2 X5 *)
  w 0xa90607e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&96))) *)
  w 0xa9070be3;         (* arm_STP X3 X2 SP (Immediate_Offset (iword (&112))) *)
  w 0xaa1603e1;         (* arm_MOV X1 X22 *)
  w 0xf94003e2;         (* arm_LDR X2 SP (Immediate_Offset (word 0)) *)
  w 0xf94013e3;         (* arm_LDR X3 SP (Immediate_Offset (word 32)) *)
  w 0x92404c44;         (* arm_AND X4 X2 (rvalue (word 1048575)) *)
  w 0xb2575884;         (* arm_ORR X4 X4 (rvalue (word 18446741874686296064)) *)
  w 0x92404c65;         (* arm_AND X5 X3 (rvalue (word 1048575)) *)
  w 0xb24204a5;         (* arm_ORR X5 X5 (rvalue (word 13835058055282163712)) *)
  w 0xf24000bf;         (* arm_TST X5 (rvalue (word 1)) *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x91440088;         (* arm_ADD X8 X4 (rvalue (word 1048576)) *)
  w 0x9355a508;         (* arm_SBFM X8 X8 21 41 *)
  w 0xd2a0020b;         (* arm_MOVZ X11 (word 16) 16 *)
  w 0x8b0b556b;         (* arm_ADD X11 X11 (Shiftedreg X11 LSL 21) *)
  w 0x8b0b0089;         (* arm_ADD X9 X4 X11 *)
  w 0x936afd29;         (* arm_ASR X9 X9 42 *)
  w 0x914400aa;         (* arm_ADD X10 X5 (rvalue (word 1048576)) *)
  w 0x9355a54a;         (* arm_SBFM X10 X10 21 41 *)
  w 0x8b0b00ab;         (* arm_ADD X11 X5 X11 *)
  w 0x936afd6b;         (* arm_ASR X11 X11 42 *)
  w 0x9b027d06;         (* arm_MUL X6 X8 X2 *)
  w 0x9b037d27;         (* arm_MUL X7 X9 X3 *)
  w 0x9b027d42;         (* arm_MUL X2 X10 X2 *)
  w 0x9b037d63;         (* arm_MUL X3 X11 X3 *)
  w 0x8b0700c4;         (* arm_ADD X4 X6 X7 *)
  w 0x8b030045;         (* arm_ADD X5 X2 X3 *)
  w 0x9354fc82;         (* arm_ASR X2 X4 20 *)
  w 0x9354fca3;         (* arm_ASR X3 X5 20 *)
  w 0x92404c44;         (* arm_AND X4 X2 (rvalue (word 1048575)) *)
  w 0xb2575884;         (* arm_ORR X4 X4 (rvalue (word 18446741874686296064)) *)
  w 0x92404c65;         (* arm_AND X5 X3 (rvalue (word 1048575)) *)
  w 0xb24204a5;         (* arm_ORR X5 X5 (rvalue (word 13835058055282163712)) *)
  w 0xf24000bf;         (* arm_TST X5 (rvalue (word 1)) *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9144008c;         (* arm_ADD X12 X4 (rvalue (word 1048576)) *)
  w 0x9355a58c;         (* arm_SBFM X12 X12 21 41 *)
  w 0xd2a0020f;         (* arm_MOVZ X15 (word 16) 16 *)
  w 0x8b0f55ef;         (* arm_ADD X15 X15 (Shiftedreg X15 LSL 21) *)
  w 0x8b0f008d;         (* arm_ADD X13 X4 X15 *)
  w 0x936afdad;         (* arm_ASR X13 X13 42 *)
  w 0x914400ae;         (* arm_ADD X14 X5 (rvalue (word 1048576)) *)
  w 0x9355a5ce;         (* arm_SBFM X14 X14 21 41 *)
  w 0x8b0f00af;         (* arm_ADD X15 X5 X15 *)
  w 0x936afdef;         (* arm_ASR X15 X15 42 *)
  w 0x9b027d86;         (* arm_MUL X6 X12 X2 *)
  w 0x9b037da7;         (* arm_MUL X7 X13 X3 *)
  w 0x9b027dc2;         (* arm_MUL X2 X14 X2 *)
  w 0x9b037de3;         (* arm_MUL X3 X15 X3 *)
  w 0x8b0700c4;         (* arm_ADD X4 X6 X7 *)
  w 0x8b030045;         (* arm_ADD X5 X2 X3 *)
  w 0x9354fc82;         (* arm_ASR X2 X4 20 *)
  w 0x9354fca3;         (* arm_ASR X3 X5 20 *)
  w 0x92404c44;         (* arm_AND X4 X2 (rvalue (word 1048575)) *)
  w 0xb2575884;         (* arm_ORR X4 X4 (rvalue (word 18446741874686296064)) *)
  w 0x92404c65;         (* arm_AND X5 X3 (rvalue (word 1048575)) *)
  w 0xb24204a5;         (* arm_ORR X5 X5 (rvalue (word 13835058055282163712)) *)
  w 0xf24000bf;         (* arm_TST X5 (rvalue (word 1)) *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9b087d82;         (* arm_MUL X2 X12 X8 *)
  w 0x9b097d83;         (* arm_MUL X3 X12 X9 *)
  w 0x9b087dc6;         (* arm_MUL X6 X14 X8 *)
  w 0x9b097dc7;         (* arm_MUL X7 X14 X9 *)
  w 0x9b0a09a8;         (* arm_MADD X8 X13 X10 X2 *)
  w 0x9b0b0da9;         (* arm_MADD X9 X13 X11 X3 *)
  w 0x9b0a19f0;         (* arm_MADD X16 X15 X10 X6 *)
  w 0x9b0b1df1;         (* arm_MADD X17 X15 X11 X7 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0xf27f00bf;         (* arm_TST X5 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9a9f1086;         (* arm_CSEL X6 X4 XZR Condition_NE *)
  w 0xfa5f1028;         (* arm_CCMP X1 XZR (word 8) Condition_NE *)
  w 0xda81b421;         (* arm_CNEG X1 X1 Condition_GE *)
  w 0xda86b4c6;         (* arm_CNEG X6 X6 Condition_GE *)
  w 0x9a84a0a4;         (* arm_CSEL X4 X5 X4 Condition_GE *)
  w 0x8b0600a5;         (* arm_ADD X5 X5 X6 *)
  w 0x91000821;         (* arm_ADD X1 X1 (rvalue (word 2)) *)
  w 0x9341fca5;         (* arm_ASR X5 X5 1 *)
  w 0x9144008c;         (* arm_ADD X12 X4 (rvalue (word 1048576)) *)
  w 0x9356a98c;         (* arm_SBFM X12 X12 22 42 *)
  w 0xd2a0020f;         (* arm_MOVZ X15 (word 16) 16 *)
  w 0x8b0f55ef;         (* arm_ADD X15 X15 (Shiftedreg X15 LSL 21) *)
  w 0x8b0f008d;         (* arm_ADD X13 X4 X15 *)
  w 0x936bfdad;         (* arm_ASR X13 X13 43 *)
  w 0x914400ae;         (* arm_ADD X14 X5 (rvalue (word 1048576)) *)
  w 0x9356a9ce;         (* arm_SBFM X14 X14 22 42 *)
  w 0x8b0f00af;         (* arm_ADD X15 X5 X15 *)
  w 0x936bfdef;         (* arm_ASR X15 X15 43 *)
  w 0x9b08fd82;         (* arm_MNEG X2 X12 X8 *)
  w 0x9b09fd83;         (* arm_MNEG X3 X12 X9 *)
  w 0x9b08fdc4;         (* arm_MNEG X4 X14 X8 *)
  w 0x9b09fdc5;         (* arm_MNEG X5 X14 X9 *)
  w 0x9b1089aa;         (* arm_MSUB X10 X13 X16 X2 *)
  w 0x9b118dab;         (* arm_MSUB X11 X13 X17 X3 *)
  w 0x9b1091ec;         (* arm_MSUB X12 X15 X16 X4 *)
  w 0x9b1195ed;         (* arm_MSUB X13 X15 X17 X5 *)
  w 0xaa0103f6;         (* arm_MOV X22 X1 *)
  w 0xf10006b5;         (* arm_SUBS X21 X21 (rvalue (word 1)) *)
  w 0x54ff9281;         (* arm_BNE (word 2093648) *)
  w 0xf94003e0;         (* arm_LDR X0 SP (Immediate_Offset (word 0)) *)
  w 0xf94013e1;         (* arm_LDR X1 SP (Immediate_Offset (word 32)) *)
  w 0x9b0a7c00;         (* arm_MUL X0 X0 X10 *)
  w 0x9b0b0021;         (* arm_MADD X1 X1 X11 X0 *)
  w 0x937ffc20;         (* arm_ASR X0 X1 63 *)
  w 0xeb1f015f;         (* arm_CMP X10 XZR *)
  w 0xda9f53ee;         (* arm_CSETM X14 Condition_MI *)
  w 0xda8a554a;         (* arm_CNEG X10 X10 Condition_MI *)
  w 0xca0001ce;         (* arm_EOR X14 X14 X0 *)
  w 0xeb1f017f;         (* arm_CMP X11 XZR *)
  w 0xda9f53ef;         (* arm_CSETM X15 Condition_MI *)
  w 0xda8b556b;         (* arm_CNEG X11 X11 Condition_MI *)
  w 0xca0001ef;         (* arm_EOR X15 X15 X0 *)
  w 0xeb1f019f;         (* arm_CMP X12 XZR *)
  w 0xda9f53f0;         (* arm_CSETM X16 Condition_MI *)
  w 0xda8c558c;         (* arm_CNEG X12 X12 Condition_MI *)
  w 0xca000210;         (* arm_EOR X16 X16 X0 *)
  w 0xeb1f01bf;         (* arm_CMP X13 XZR *)
  w 0xda9f53f1;         (* arm_CSETM X17 Condition_MI *)
  w 0xda8d55ad;         (* arm_CNEG X13 X13 Condition_MI *)
  w 0xca000231;         (* arm_EOR X17 X17 X0 *)
  w 0x8a0e0140;         (* arm_AND X0 X10 X14 *)
  w 0x8a0f0161;         (* arm_AND X1 X11 X15 *)
  w 0x8b010009;         (* arm_ADD X9 X0 X1 *)
  w 0xf94023e7;         (* arm_LDR X7 SP (Immediate_Offset (word 64)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab000124;         (* arm_ADDS X4 X9 X0 *)
  w 0x9a0103e2;         (* arm_ADC X2 XZR X1 *)
  w 0xf94033e8;         (* arm_LDR X8 SP (Immediate_Offset (word 96)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab000084;         (* arm_ADDS X4 X4 X0 *)
  w 0xf90023e4;         (* arm_STR X4 SP (Immediate_Offset (word 64)) *)
  w 0x9a010042;         (* arm_ADC X2 X2 X1 *)
  w 0xf94027e7;         (* arm_LDR X7 SP (Immediate_Offset (word 72)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0x9a0103e6;         (* arm_ADC X6 XZR X1 *)
  w 0xf94037e8;         (* arm_LDR X8 SP (Immediate_Offset (word 104)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab000042;         (* arm_ADDS X2 X2 X0 *)
  w 0xf90027e2;         (* arm_STR X2 SP (Immediate_Offset (word 72)) *)
  w 0x9a0100c6;         (* arm_ADC X6 X6 X1 *)
  w 0xf9402be7;         (* arm_LDR X7 SP (Immediate_Offset (word 80)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab0000c6;         (* arm_ADDS X6 X6 X0 *)
  w 0x9a0103e5;         (* arm_ADC X5 XZR X1 *)
  w 0xf9403be8;         (* arm_LDR X8 SP (Immediate_Offset (word 112)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab0000c6;         (* arm_ADDS X6 X6 X0 *)
  w 0xf9002be6;         (* arm_STR X6 SP (Immediate_Offset (word 80)) *)
  w 0x9a0100a5;         (* arm_ADC X5 X5 X1 *)
  w 0xf9402fe7;         (* arm_LDR X7 SP (Immediate_Offset (word 88)) *)
  w 0xca0e00e1;         (* arm_EOR X1 X7 X14 *)
  w 0x8a0a01c3;         (* arm_AND X3 X14 X10 *)
  w 0xcb0303e3;         (* arm_NEG X3 X3 *)
  w 0x9b0a7c20;         (* arm_MUL X0 X1 X10 *)
  w 0x9bca7c21;         (* arm_UMULH X1 X1 X10 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0xf9403fe8;         (* arm_LDR X8 SP (Immediate_Offset (word 120)) *)
  w 0xca0f0101;         (* arm_EOR X1 X8 X15 *)
  w 0x8a0b01e0;         (* arm_AND X0 X15 X11 *)
  w 0xcb000063;         (* arm_SUB X3 X3 X0 *)
  w 0x9b0b7c20;         (* arm_MUL X0 X1 X11 *)
  w 0x9bcb7c21;         (* arm_UMULH X1 X1 X11 *)
  w 0xab0000a5;         (* arm_ADDS X5 X5 X0 *)
  w 0x9a010063;         (* arm_ADC X3 X3 X1 *)
  w 0x93c5fc66;         (* arm_EXTR X6 X3 X5 63 *)
  w 0xa94407e0;         (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&64))) *)
  w 0xea03007f;         (* arm_TST X3 X3 *)
  w 0x9a8644c6;         (* arm_CINC X6 X6 Condition_PL *)
  w 0xd2800263;         (* arm_MOV X3 (rvalue (word 19)) *)
  w 0x9b037cc4;         (* arm_MUL X4 X6 X3 *)
  w 0x8b06fca5;         (* arm_ADD X5 X5 (Shiftedreg X6 LSL 63) *)
  w 0x9b437cc6;         (* arm_SMULH X6 X6 X3 *)
  w 0xf9402be2;         (* arm_LDR X2 SP (Immediate_Offset (word 80)) *)
  w 0xab040000;         (* arm_ADDS X0 X0 X4 *)
  w 0xba060021;         (* arm_ADCS X1 X1 X6 *)
  w 0x937ffcc6;         (* arm_ASR X6 X6 63 *)
  w 0xba060042;         (* arm_ADCS X2 X2 X6 *)
  w 0xba0600a5;         (* arm_ADCS X5 X5 X6 *)
  w 0x9a9f4063;         (* arm_CSEL X3 X3 XZR Condition_MI *)
  w 0xeb030000;         (* arm_SUBS X0 X0 X3 *)
  w 0xfa1f0021;         (* arm_SBCS X1 X1 XZR *)
  w 0xfa1f0042;         (* arm_SBCS X2 X2 XZR *)
  w 0xda1f00a5;         (* arm_SBC X5 X5 XZR *)
  w 0x9240f8a5;         (* arm_AND X5 X5 (rvalue (word 9223372036854775807)) *)
  w 0xaa1403e4;         (* arm_MOV X4 X20 *)
  w 0xa9000480;         (* arm_STP X0 X1 X4 (Immediate_Offset (iword (&0))) *)
  w 0xa9011482;         (* arm_STP X2 X5 X4 (Immediate_Offset (iword (&16))) *)
  w 0xaa1903f6;         (* arm_MOV X22 X25 *)
  w 0x910283f7;         (* arm_ADD X23 SP (rvalue (word 160)) *)
  w 0x910483f8;         (* arm_ADD X24 SP (rvalue (word 288)) *)
  w 0xa94012e3;         (* arm_LDP X3 X4 X23 (Immediate_Offset (iword (&0))) *)
  w 0xa9402307;         (* arm_LDP X7 X8 X24 (Immediate_Offset (iword (&0))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9412b09;         (* arm_LDP X9 X10 X24 (Immediate_Offset (iword (&16))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9411ae5;         (* arm_LDP X5 X6 X23 (Immediate_Offset (iword (&16))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0xb24101ef;         (* arm_ORR X15 X15 (rvalue (word 9223372036854775808)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b081ceb;         (* arm_MADD X11 X7 X8 X7 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0xba1f01ef;         (* arm_ADCS X15 X15 XZR *)
  w 0x9a9f30e7;         (* arm_CSEL X7 X7 XZR Condition_CC *)
  w 0xeb07018c;         (* arm_SUBS X12 X12 X7 *)
  w 0xfa1f01ad;         (* arm_SBCS X13 X13 XZR *)
  w 0xfa1f01ce;         (* arm_SBCS X14 X14 XZR *)
  w 0xda1f01ef;         (* arm_SBC X15 X15 XZR *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0xa90036cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&0))) *)
  w 0xa9013ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&16))) *)
  w 0x91008336;         (* arm_ADD X22 X25 (rvalue (word 32)) *)
  w 0x910303f7;         (* arm_ADD X23 SP (rvalue (word 192)) *)
  w 0x910483f8;         (* arm_ADD X24 SP (rvalue (word 288)) *)
  w 0xa94012e3;         (* arm_LDP X3 X4 X23 (Immediate_Offset (iword (&0))) *)
  w 0xa9402307;         (* arm_LDP X7 X8 X24 (Immediate_Offset (iword (&0))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9412b09;         (* arm_LDP X9 X10 X24 (Immediate_Offset (iword (&16))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9411ae5;         (* arm_LDP X5 X6 X23 (Immediate_Offset (iword (&16))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0xb24101ef;         (* arm_ORR X15 X15 (rvalue (word 9223372036854775808)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b081ceb;         (* arm_MADD X11 X7 X8 X7 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0xba1f01ef;         (* arm_ADCS X15 X15 XZR *)
  w 0x9a9f30e7;         (* arm_CSEL X7 X7 XZR Condition_CC *)
  w 0xeb07018c;         (* arm_SUBS X12 X12 X7 *)
  w 0xfa1f01ad;         (* arm_SBCS X13 X13 XZR *)
  w 0xfa1f01ce;         (* arm_SBCS X14 X14 XZR *)
  w 0xda1f01ef;         (* arm_SBC X15 X15 XZR *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0xa90036cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&0))) *)
  w 0xa9013ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&16))) *)
  w 0x911683ff;         (* arm_ADD SP SP (rvalue (word 1440)) *)
  w 0xa8c17bf9;         (* arm_LDP X25 X30 SP (Postimmediate_Offset (iword (&16))) *)
  w 0xa8c163f7;         (* arm_LDP X23 X24 SP (Postimmediate_Offset (iword (&16))) *)
  w 0xa8c15bf5;         (* arm_LDP X21 X22 SP (Postimmediate_Offset (iword (&16))) *)
  w 0xa8c153f3;         (* arm_LDP X19 X20 SP (Postimmediate_Offset (iword (&16))) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xd10283ff;         (* arm_SUB SP SP (rvalue (word 160)) *)
  w 0xa94012e3;         (* arm_LDP X3 X4 X23 (Immediate_Offset (iword (&0))) *)
  w 0xa94222e7;         (* arm_LDP X7 X8 X23 (Immediate_Offset (iword (&32))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa9411ae5;         (* arm_LDP X5 X6 X23 (Immediate_Offset (iword (&16))) *)
  w 0xa94322e7;         (* arm_LDP X7 X8 X23 (Immediate_Offset (iword (&48))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90013e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9011be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&16))) *)
  w 0xa9440ee2;         (* arm_LDP X2 X3 X23 (Immediate_Offset (iword (&64))) *)
  w 0x9b037c49;         (* arm_MUL X9 X2 X3 *)
  w 0x9bc37c4a;         (* arm_UMULH X10 X2 X3 *)
  w 0xa94516e4;         (* arm_LDP X4 X5 X23 (Immediate_Offset (iword (&80))) *)
  w 0x9b057c4b;         (* arm_MUL X11 X2 X5 *)
  w 0x9bc57c4c;         (* arm_UMULH X12 X2 X5 *)
  w 0x9b047c47;         (* arm_MUL X7 X2 X4 *)
  w 0x9bc47c46;         (* arm_UMULH X6 X2 X4 *)
  w 0xab07014a;         (* arm_ADDS X10 X10 X7 *)
  w 0xba06016b;         (* arm_ADCS X11 X11 X6 *)
  w 0x9b047c67;         (* arm_MUL X7 X3 X4 *)
  w 0x9bc47c66;         (* arm_UMULH X6 X3 X4 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07016b;         (* arm_ADDS X11 X11 X7 *)
  w 0x9b057c8d;         (* arm_MUL X13 X4 X5 *)
  w 0x9bc57c8e;         (* arm_UMULH X14 X4 X5 *)
  w 0xba06018c;         (* arm_ADCS X12 X12 X6 *)
  w 0x9b057c67;         (* arm_MUL X7 X3 X5 *)
  w 0x9bc57c66;         (* arm_UMULH X6 X3 X5 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07018c;         (* arm_ADDS X12 X12 X7 *)
  w 0xba0601ad;         (* arm_ADCS X13 X13 X6 *)
  w 0x9a1f01ce;         (* arm_ADC X14 X14 XZR *)
  w 0xab090129;         (* arm_ADDS X9 X9 X9 *)
  w 0xba0a014a;         (* arm_ADCS X10 X10 X10 *)
  w 0xba0b016b;         (* arm_ADCS X11 X11 X11 *)
  w 0xba0c018c;         (* arm_ADCS X12 X12 X12 *)
  w 0xba0d01ad;         (* arm_ADCS X13 X13 X13 *)
  w 0xba0e01ce;         (* arm_ADCS X14 X14 X14 *)
  w 0x9a9f37e6;         (* arm_CSET X6 Condition_CS *)
  w 0x9bc27c47;         (* arm_UMULH X7 X2 X2 *)
  w 0x9b027c48;         (* arm_MUL X8 X2 X2 *)
  w 0xab070129;         (* arm_ADDS X9 X9 X7 *)
  w 0x9b037c67;         (* arm_MUL X7 X3 X3 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9bc37c67;         (* arm_UMULH X7 X3 X3 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9b047c87;         (* arm_MUL X7 X4 X4 *)
  w 0xba07018c;         (* arm_ADCS X12 X12 X7 *)
  w 0x9bc47c87;         (* arm_UMULH X7 X4 X4 *)
  w 0xba0701ad;         (* arm_ADCS X13 X13 X7 *)
  w 0x9b057ca7;         (* arm_MUL X7 X5 X5 *)
  w 0xba0701ce;         (* arm_ADCS X14 X14 X7 *)
  w 0x9bc57ca7;         (* arm_UMULH X7 X5 X5 *)
  w 0x9a0700c6;         (* arm_ADC X6 X6 X7 *)
  w 0xd28004c3;         (* arm_MOV X3 (rvalue (word 38)) *)
  w 0x9b0c7c67;         (* arm_MUL X7 X3 X12 *)
  w 0x9bcc7c64;         (* arm_UMULH X4 X3 X12 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0x9b0d7c67;         (* arm_MUL X7 X3 X13 *)
  w 0x9bcd7c6d;         (* arm_UMULH X13 X3 X13 *)
  w 0xba070129;         (* arm_ADCS X9 X9 X7 *)
  w 0x9b0e7c67;         (* arm_MUL X7 X3 X14 *)
  w 0x9bce7c6e;         (* arm_UMULH X14 X3 X14 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9b067c67;         (* arm_MUL X7 X3 X6 *)
  w 0x9bc67c66;         (* arm_UMULH X6 X3 X6 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9a9f37ec;         (* arm_CSET X12 Condition_CS *)
  w 0xab0e016b;         (* arm_ADDS X11 X11 X14 *)
  w 0x9a06018c;         (* arm_ADC X12 X12 X6 *)
  w 0xab0b017f;         (* arm_CMN X11 X11 *)
  w 0x9240f96b;         (* arm_AND X11 X11 (rvalue (word 9223372036854775807)) *)
  w 0x9a0c0182;         (* arm_ADC X2 X12 X12 *)
  w 0xd2800263;         (* arm_MOV X3 (rvalue (word 19)) *)
  w 0x9b027c67;         (* arm_MUL X7 X3 X2 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0xba040129;         (* arm_ADCS X9 X9 X4 *)
  w 0xba0d014a;         (* arm_ADCS X10 X10 X13 *)
  w 0x9a1f016b;         (* arm_ADC X11 X11 XZR *)
  w 0xa90227e8;         (* arm_STP X8 X9 SP (Immediate_Offset (iword (&32))) *)
  w 0xa9032fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&48))) *)
  w 0xa9400ee2;         (* arm_LDP X2 X3 X23 (Immediate_Offset (iword (&0))) *)
  w 0x9b037c49;         (* arm_MUL X9 X2 X3 *)
  w 0x9bc37c4a;         (* arm_UMULH X10 X2 X3 *)
  w 0xa94116e4;         (* arm_LDP X4 X5 X23 (Immediate_Offset (iword (&16))) *)
  w 0x9b057c4b;         (* arm_MUL X11 X2 X5 *)
  w 0x9bc57c4c;         (* arm_UMULH X12 X2 X5 *)
  w 0x9b047c47;         (* arm_MUL X7 X2 X4 *)
  w 0x9bc47c46;         (* arm_UMULH X6 X2 X4 *)
  w 0xab07014a;         (* arm_ADDS X10 X10 X7 *)
  w 0xba06016b;         (* arm_ADCS X11 X11 X6 *)
  w 0x9b047c67;         (* arm_MUL X7 X3 X4 *)
  w 0x9bc47c66;         (* arm_UMULH X6 X3 X4 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07016b;         (* arm_ADDS X11 X11 X7 *)
  w 0x9b057c8d;         (* arm_MUL X13 X4 X5 *)
  w 0x9bc57c8e;         (* arm_UMULH X14 X4 X5 *)
  w 0xba06018c;         (* arm_ADCS X12 X12 X6 *)
  w 0x9b057c67;         (* arm_MUL X7 X3 X5 *)
  w 0x9bc57c66;         (* arm_UMULH X6 X3 X5 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07018c;         (* arm_ADDS X12 X12 X7 *)
  w 0xba0601ad;         (* arm_ADCS X13 X13 X6 *)
  w 0x9a1f01ce;         (* arm_ADC X14 X14 XZR *)
  w 0xab090129;         (* arm_ADDS X9 X9 X9 *)
  w 0xba0a014a;         (* arm_ADCS X10 X10 X10 *)
  w 0xba0b016b;         (* arm_ADCS X11 X11 X11 *)
  w 0xba0c018c;         (* arm_ADCS X12 X12 X12 *)
  w 0xba0d01ad;         (* arm_ADCS X13 X13 X13 *)
  w 0xba0e01ce;         (* arm_ADCS X14 X14 X14 *)
  w 0x9a9f37e6;         (* arm_CSET X6 Condition_CS *)
  w 0x9bc27c47;         (* arm_UMULH X7 X2 X2 *)
  w 0x9b027c48;         (* arm_MUL X8 X2 X2 *)
  w 0xab070129;         (* arm_ADDS X9 X9 X7 *)
  w 0x9b037c67;         (* arm_MUL X7 X3 X3 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9bc37c67;         (* arm_UMULH X7 X3 X3 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9b047c87;         (* arm_MUL X7 X4 X4 *)
  w 0xba07018c;         (* arm_ADCS X12 X12 X7 *)
  w 0x9bc47c87;         (* arm_UMULH X7 X4 X4 *)
  w 0xba0701ad;         (* arm_ADCS X13 X13 X7 *)
  w 0x9b057ca7;         (* arm_MUL X7 X5 X5 *)
  w 0xba0701ce;         (* arm_ADCS X14 X14 X7 *)
  w 0x9bc57ca7;         (* arm_UMULH X7 X5 X5 *)
  w 0x9a0700c6;         (* arm_ADC X6 X6 X7 *)
  w 0xd28004c3;         (* arm_MOV X3 (rvalue (word 38)) *)
  w 0x9b0c7c67;         (* arm_MUL X7 X3 X12 *)
  w 0x9bcc7c64;         (* arm_UMULH X4 X3 X12 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0x9b0d7c67;         (* arm_MUL X7 X3 X13 *)
  w 0x9bcd7c6d;         (* arm_UMULH X13 X3 X13 *)
  w 0xba070129;         (* arm_ADCS X9 X9 X7 *)
  w 0x9b0e7c67;         (* arm_MUL X7 X3 X14 *)
  w 0x9bce7c6e;         (* arm_UMULH X14 X3 X14 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9b067c67;         (* arm_MUL X7 X3 X6 *)
  w 0x9bc67c66;         (* arm_UMULH X6 X3 X6 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9a9f37ec;         (* arm_CSET X12 Condition_CS *)
  w 0xab0e016b;         (* arm_ADDS X11 X11 X14 *)
  w 0x9a06018c;         (* arm_ADC X12 X12 X6 *)
  w 0xab0b017f;         (* arm_CMN X11 X11 *)
  w 0x9240f96b;         (* arm_AND X11 X11 (rvalue (word 9223372036854775807)) *)
  w 0x9a0c0182;         (* arm_ADC X2 X12 X12 *)
  w 0xd2800263;         (* arm_MOV X3 (rvalue (word 19)) *)
  w 0x9b027c67;         (* arm_MUL X7 X3 X2 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0xba040129;         (* arm_ADCS X9 X9 X4 *)
  w 0xba0d014a;         (* arm_ADCS X10 X10 X13 *)
  w 0x9a1f016b;         (* arm_ADC X11 X11 XZR *)
  w 0xa90427e8;         (* arm_STP X8 X9 SP (Immediate_Offset (iword (&64))) *)
  w 0xa9052fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&80))) *)
  w 0xa9420ee2;         (* arm_LDP X2 X3 X23 (Immediate_Offset (iword (&32))) *)
  w 0x9b037c49;         (* arm_MUL X9 X2 X3 *)
  w 0x9bc37c4a;         (* arm_UMULH X10 X2 X3 *)
  w 0xa94316e4;         (* arm_LDP X4 X5 X23 (Immediate_Offset (iword (&48))) *)
  w 0x9b057c4b;         (* arm_MUL X11 X2 X5 *)
  w 0x9bc57c4c;         (* arm_UMULH X12 X2 X5 *)
  w 0x9b047c47;         (* arm_MUL X7 X2 X4 *)
  w 0x9bc47c46;         (* arm_UMULH X6 X2 X4 *)
  w 0xab07014a;         (* arm_ADDS X10 X10 X7 *)
  w 0xba06016b;         (* arm_ADCS X11 X11 X6 *)
  w 0x9b047c67;         (* arm_MUL X7 X3 X4 *)
  w 0x9bc47c66;         (* arm_UMULH X6 X3 X4 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07016b;         (* arm_ADDS X11 X11 X7 *)
  w 0x9b057c8d;         (* arm_MUL X13 X4 X5 *)
  w 0x9bc57c8e;         (* arm_UMULH X14 X4 X5 *)
  w 0xba06018c;         (* arm_ADCS X12 X12 X6 *)
  w 0x9b057c67;         (* arm_MUL X7 X3 X5 *)
  w 0x9bc57c66;         (* arm_UMULH X6 X3 X5 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07018c;         (* arm_ADDS X12 X12 X7 *)
  w 0xba0601ad;         (* arm_ADCS X13 X13 X6 *)
  w 0x9a1f01ce;         (* arm_ADC X14 X14 XZR *)
  w 0xab090129;         (* arm_ADDS X9 X9 X9 *)
  w 0xba0a014a;         (* arm_ADCS X10 X10 X10 *)
  w 0xba0b016b;         (* arm_ADCS X11 X11 X11 *)
  w 0xba0c018c;         (* arm_ADCS X12 X12 X12 *)
  w 0xba0d01ad;         (* arm_ADCS X13 X13 X13 *)
  w 0xba0e01ce;         (* arm_ADCS X14 X14 X14 *)
  w 0x9a9f37e6;         (* arm_CSET X6 Condition_CS *)
  w 0x9bc27c47;         (* arm_UMULH X7 X2 X2 *)
  w 0x9b027c48;         (* arm_MUL X8 X2 X2 *)
  w 0xab070129;         (* arm_ADDS X9 X9 X7 *)
  w 0x9b037c67;         (* arm_MUL X7 X3 X3 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9bc37c67;         (* arm_UMULH X7 X3 X3 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9b047c87;         (* arm_MUL X7 X4 X4 *)
  w 0xba07018c;         (* arm_ADCS X12 X12 X7 *)
  w 0x9bc47c87;         (* arm_UMULH X7 X4 X4 *)
  w 0xba0701ad;         (* arm_ADCS X13 X13 X7 *)
  w 0x9b057ca7;         (* arm_MUL X7 X5 X5 *)
  w 0xba0701ce;         (* arm_ADCS X14 X14 X7 *)
  w 0x9bc57ca7;         (* arm_UMULH X7 X5 X5 *)
  w 0x9a0700c6;         (* arm_ADC X6 X6 X7 *)
  w 0xd28004c3;         (* arm_MOV X3 (rvalue (word 38)) *)
  w 0x9b0c7c67;         (* arm_MUL X7 X3 X12 *)
  w 0x9bcc7c64;         (* arm_UMULH X4 X3 X12 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0x9b0d7c67;         (* arm_MUL X7 X3 X13 *)
  w 0x9bcd7c6d;         (* arm_UMULH X13 X3 X13 *)
  w 0xba070129;         (* arm_ADCS X9 X9 X7 *)
  w 0x9b0e7c67;         (* arm_MUL X7 X3 X14 *)
  w 0x9bce7c6e;         (* arm_UMULH X14 X3 X14 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9b067c67;         (* arm_MUL X7 X3 X6 *)
  w 0x9bc67c66;         (* arm_UMULH X6 X3 X6 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9a9f37ec;         (* arm_CSET X12 Condition_CS *)
  w 0xab0e016b;         (* arm_ADDS X11 X11 X14 *)
  w 0x9a06018c;         (* arm_ADC X12 X12 X6 *)
  w 0xab0b017f;         (* arm_CMN X11 X11 *)
  w 0x9240f96b;         (* arm_AND X11 X11 (rvalue (word 9223372036854775807)) *)
  w 0x9a0c0182;         (* arm_ADC X2 X12 X12 *)
  w 0xd2800263;         (* arm_MOV X3 (rvalue (word 19)) *)
  w 0x9b027c67;         (* arm_MUL X7 X3 X2 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0xba040129;         (* arm_ADCS X9 X9 X4 *)
  w 0xba0d014a;         (* arm_ADCS X10 X10 X13 *)
  w 0x9a1f016b;         (* arm_ADC X11 X11 XZR *)
  w 0xa90627e8;         (* arm_STP X8 X9 SP (Immediate_Offset (iword (&96))) *)
  w 0xa9072fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&112))) *)
  w 0xa94213e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&32))) *)
  w 0xab030063;         (* arm_ADDS X3 X3 X3 *)
  w 0xba040084;         (* arm_ADCS X4 X4 X4 *)
  w 0xa9431be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&48))) *)
  w 0xba0500a5;         (* arm_ADCS X5 X5 X5 *)
  w 0xba0600c6;         (* arm_ADCS X6 X6 X6 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90213e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&32))) *)
  w 0xa9031be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&48))) *)
  w 0xa9400fe2;         (* arm_LDP X2 X3 SP (Immediate_Offset (iword (&0))) *)
  w 0x9b037c49;         (* arm_MUL X9 X2 X3 *)
  w 0x9bc37c4a;         (* arm_UMULH X10 X2 X3 *)
  w 0xa94117e4;         (* arm_LDP X4 X5 SP (Immediate_Offset (iword (&16))) *)
  w 0x9b057c4b;         (* arm_MUL X11 X2 X5 *)
  w 0x9bc57c4c;         (* arm_UMULH X12 X2 X5 *)
  w 0x9b047c47;         (* arm_MUL X7 X2 X4 *)
  w 0x9bc47c46;         (* arm_UMULH X6 X2 X4 *)
  w 0xab07014a;         (* arm_ADDS X10 X10 X7 *)
  w 0xba06016b;         (* arm_ADCS X11 X11 X6 *)
  w 0x9b047c67;         (* arm_MUL X7 X3 X4 *)
  w 0x9bc47c66;         (* arm_UMULH X6 X3 X4 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07016b;         (* arm_ADDS X11 X11 X7 *)
  w 0x9b057c8d;         (* arm_MUL X13 X4 X5 *)
  w 0x9bc57c8e;         (* arm_UMULH X14 X4 X5 *)
  w 0xba06018c;         (* arm_ADCS X12 X12 X6 *)
  w 0x9b057c67;         (* arm_MUL X7 X3 X5 *)
  w 0x9bc57c66;         (* arm_UMULH X6 X3 X5 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07018c;         (* arm_ADDS X12 X12 X7 *)
  w 0xba0601ad;         (* arm_ADCS X13 X13 X6 *)
  w 0x9a1f01ce;         (* arm_ADC X14 X14 XZR *)
  w 0xab090129;         (* arm_ADDS X9 X9 X9 *)
  w 0xba0a014a;         (* arm_ADCS X10 X10 X10 *)
  w 0xba0b016b;         (* arm_ADCS X11 X11 X11 *)
  w 0xba0c018c;         (* arm_ADCS X12 X12 X12 *)
  w 0xba0d01ad;         (* arm_ADCS X13 X13 X13 *)
  w 0xba0e01ce;         (* arm_ADCS X14 X14 X14 *)
  w 0x9a9f37e6;         (* arm_CSET X6 Condition_CS *)
  w 0x9bc27c47;         (* arm_UMULH X7 X2 X2 *)
  w 0x9b027c48;         (* arm_MUL X8 X2 X2 *)
  w 0xab070129;         (* arm_ADDS X9 X9 X7 *)
  w 0x9b037c67;         (* arm_MUL X7 X3 X3 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9bc37c67;         (* arm_UMULH X7 X3 X3 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9b047c87;         (* arm_MUL X7 X4 X4 *)
  w 0xba07018c;         (* arm_ADCS X12 X12 X7 *)
  w 0x9bc47c87;         (* arm_UMULH X7 X4 X4 *)
  w 0xba0701ad;         (* arm_ADCS X13 X13 X7 *)
  w 0x9b057ca7;         (* arm_MUL X7 X5 X5 *)
  w 0xba0701ce;         (* arm_ADCS X14 X14 X7 *)
  w 0x9bc57ca7;         (* arm_UMULH X7 X5 X5 *)
  w 0x9a0700c6;         (* arm_ADC X6 X6 X7 *)
  w 0xd28004c3;         (* arm_MOV X3 (rvalue (word 38)) *)
  w 0x9b0c7c67;         (* arm_MUL X7 X3 X12 *)
  w 0x9bcc7c64;         (* arm_UMULH X4 X3 X12 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0x9b0d7c67;         (* arm_MUL X7 X3 X13 *)
  w 0x9bcd7c6d;         (* arm_UMULH X13 X3 X13 *)
  w 0xba070129;         (* arm_ADCS X9 X9 X7 *)
  w 0x9b0e7c67;         (* arm_MUL X7 X3 X14 *)
  w 0x9bce7c6e;         (* arm_UMULH X14 X3 X14 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9b067c67;         (* arm_MUL X7 X3 X6 *)
  w 0x9bc67c66;         (* arm_UMULH X6 X3 X6 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9a9f37ec;         (* arm_CSET X12 Condition_CS *)
  w 0xab0e016b;         (* arm_ADDS X11 X11 X14 *)
  w 0x9a06018c;         (* arm_ADC X12 X12 X6 *)
  w 0xab0b017f;         (* arm_CMN X11 X11 *)
  w 0x9240f96b;         (* arm_AND X11 X11 (rvalue (word 9223372036854775807)) *)
  w 0x9a0c0182;         (* arm_ADC X2 X12 X12 *)
  w 0xd2800263;         (* arm_MOV X3 (rvalue (word 19)) *)
  w 0x9b027c67;         (* arm_MUL X7 X3 X2 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0xba040129;         (* arm_ADCS X9 X9 X4 *)
  w 0xba0d014a;         (* arm_ADCS X10 X10 X13 *)
  w 0x9a1f016b;         (* arm_ADC X11 X11 XZR *)
  w 0xa90027e8;         (* arm_STP X8 X9 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9012fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&16))) *)
  w 0xa94413e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&64))) *)
  w 0xa94623e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&96))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa9451be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&80))) *)
  w 0xa94723e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&112))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90813e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9091be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&144))) *)
  w 0xa9441be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&64))) *)
  w 0xa9460fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&96))) *)
  w 0xeb0400a5;         (* arm_SUBS X5 X5 X4 *)
  w 0xfa0300c6;         (* arm_SBCS X6 X6 X3 *)
  w 0xa94523e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&80))) *)
  w 0xa9470fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&112))) *)
  w 0xfa0400e7;         (* arm_SBCS X7 X7 X4 *)
  w 0xfa030108;         (* arm_SBCS X8 X8 X3 *)
  w 0xd28004c4;         (* arm_MOV X4 (rvalue (word 38)) *)
  w 0x9a9f3083;         (* arm_CSEL X3 X4 XZR Condition_CC *)
  w 0xeb0300a5;         (* arm_SUBS X5 X5 X3 *)
  w 0xfa1f00c6;         (* arm_SBCS X6 X6 XZR *)
  w 0xfa1f00e7;         (* arm_SBCS X7 X7 XZR *)
  w 0xda1f0108;         (* arm_SBC X8 X8 XZR *)
  w 0xa9041be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&64))) *)
  w 0xa90523e7;         (* arm_STP X7 X8 SP (Immediate_Offset (iword (&80))) *)
  w 0xa94213e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&32))) *)
  w 0xa94423e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&64))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa9431be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&48))) *)
  w 0xa94523e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&80))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90613e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&96))) *)
  w 0xa9071be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&112))) *)
  w 0xa9481be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9400fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&0))) *)
  w 0xeb0400a5;         (* arm_SUBS X5 X5 X4 *)
  w 0xfa0300c6;         (* arm_SBCS X6 X6 X3 *)
  w 0xa94923e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&144))) *)
  w 0xa9410fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&16))) *)
  w 0xfa0400e7;         (* arm_SBCS X7 X7 X4 *)
  w 0xfa030108;         (* arm_SBCS X8 X8 X3 *)
  w 0xd28004c4;         (* arm_MOV X4 (rvalue (word 38)) *)
  w 0x9a9f3083;         (* arm_CSEL X3 X4 XZR Condition_CC *)
  w 0xeb0300a5;         (* arm_SUBS X5 X5 X3 *)
  w 0xfa1f00c6;         (* arm_SBCS X6 X6 XZR *)
  w 0xfa1f00e7;         (* arm_SBCS X7 X7 XZR *)
  w 0xda1f0108;         (* arm_SBC X8 X8 XZR *)
  w 0xa9021be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&32))) *)
  w 0xa90323e7;         (* arm_STP X7 X8 SP (Immediate_Offset (iword (&48))) *)
  w 0xa94413e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&64))) *)
  w 0xa94823e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&128))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9492be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&144))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9451be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&80))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90236cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&32))) *)
  w 0xa9033ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&48))) *)
  w 0xa94613e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&96))) *)
  w 0xa94423e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&64))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9452be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&80))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9471be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&112))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90436cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&64))) *)
  w 0xa9053ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&80))) *)
  w 0xa94213e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&32))) *)
  w 0xa94823e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&128))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9492be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&144))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9431be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&48))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90636cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&96))) *)
  w 0xa9073ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&112))) *)
  w 0xa94213e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&32))) *)
  w 0xa94623e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&96))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9472be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&112))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9431be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&48))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90036cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&0))) *)
  w 0xa9013ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&16))) *)
  w 0x910283ff;         (* arm_ADD SP SP (rvalue (word 160)) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xd10283ff;         (* arm_SUB SP SP (rvalue (word 160)) *)
  w 0xa94012e3;         (* arm_LDP X3 X4 X23 (Immediate_Offset (iword (&0))) *)
  w 0xa94222e7;         (* arm_LDP X7 X8 X23 (Immediate_Offset (iword (&32))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa9411ae5;         (* arm_LDP X5 X6 X23 (Immediate_Offset (iword (&16))) *)
  w 0xa94322e7;         (* arm_LDP X7 X8 X23 (Immediate_Offset (iword (&48))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90013e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9011be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&16))) *)
  w 0xa9440ee2;         (* arm_LDP X2 X3 X23 (Immediate_Offset (iword (&64))) *)
  w 0x9b037c49;         (* arm_MUL X9 X2 X3 *)
  w 0x9bc37c4a;         (* arm_UMULH X10 X2 X3 *)
  w 0xa94516e4;         (* arm_LDP X4 X5 X23 (Immediate_Offset (iword (&80))) *)
  w 0x9b057c4b;         (* arm_MUL X11 X2 X5 *)
  w 0x9bc57c4c;         (* arm_UMULH X12 X2 X5 *)
  w 0x9b047c47;         (* arm_MUL X7 X2 X4 *)
  w 0x9bc47c46;         (* arm_UMULH X6 X2 X4 *)
  w 0xab07014a;         (* arm_ADDS X10 X10 X7 *)
  w 0xba06016b;         (* arm_ADCS X11 X11 X6 *)
  w 0x9b047c67;         (* arm_MUL X7 X3 X4 *)
  w 0x9bc47c66;         (* arm_UMULH X6 X3 X4 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07016b;         (* arm_ADDS X11 X11 X7 *)
  w 0x9b057c8d;         (* arm_MUL X13 X4 X5 *)
  w 0x9bc57c8e;         (* arm_UMULH X14 X4 X5 *)
  w 0xba06018c;         (* arm_ADCS X12 X12 X6 *)
  w 0x9b057c67;         (* arm_MUL X7 X3 X5 *)
  w 0x9bc57c66;         (* arm_UMULH X6 X3 X5 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07018c;         (* arm_ADDS X12 X12 X7 *)
  w 0xba0601ad;         (* arm_ADCS X13 X13 X6 *)
  w 0x9a1f01ce;         (* arm_ADC X14 X14 XZR *)
  w 0xab090129;         (* arm_ADDS X9 X9 X9 *)
  w 0xba0a014a;         (* arm_ADCS X10 X10 X10 *)
  w 0xba0b016b;         (* arm_ADCS X11 X11 X11 *)
  w 0xba0c018c;         (* arm_ADCS X12 X12 X12 *)
  w 0xba0d01ad;         (* arm_ADCS X13 X13 X13 *)
  w 0xba0e01ce;         (* arm_ADCS X14 X14 X14 *)
  w 0x9a9f37e6;         (* arm_CSET X6 Condition_CS *)
  w 0x9bc27c47;         (* arm_UMULH X7 X2 X2 *)
  w 0x9b027c48;         (* arm_MUL X8 X2 X2 *)
  w 0xab070129;         (* arm_ADDS X9 X9 X7 *)
  w 0x9b037c67;         (* arm_MUL X7 X3 X3 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9bc37c67;         (* arm_UMULH X7 X3 X3 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9b047c87;         (* arm_MUL X7 X4 X4 *)
  w 0xba07018c;         (* arm_ADCS X12 X12 X7 *)
  w 0x9bc47c87;         (* arm_UMULH X7 X4 X4 *)
  w 0xba0701ad;         (* arm_ADCS X13 X13 X7 *)
  w 0x9b057ca7;         (* arm_MUL X7 X5 X5 *)
  w 0xba0701ce;         (* arm_ADCS X14 X14 X7 *)
  w 0x9bc57ca7;         (* arm_UMULH X7 X5 X5 *)
  w 0x9a0700c6;         (* arm_ADC X6 X6 X7 *)
  w 0xd28004c3;         (* arm_MOV X3 (rvalue (word 38)) *)
  w 0x9b0c7c67;         (* arm_MUL X7 X3 X12 *)
  w 0x9bcc7c64;         (* arm_UMULH X4 X3 X12 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0x9b0d7c67;         (* arm_MUL X7 X3 X13 *)
  w 0x9bcd7c6d;         (* arm_UMULH X13 X3 X13 *)
  w 0xba070129;         (* arm_ADCS X9 X9 X7 *)
  w 0x9b0e7c67;         (* arm_MUL X7 X3 X14 *)
  w 0x9bce7c6e;         (* arm_UMULH X14 X3 X14 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9b067c67;         (* arm_MUL X7 X3 X6 *)
  w 0x9bc67c66;         (* arm_UMULH X6 X3 X6 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9a9f37ec;         (* arm_CSET X12 Condition_CS *)
  w 0xab0e016b;         (* arm_ADDS X11 X11 X14 *)
  w 0x9a06018c;         (* arm_ADC X12 X12 X6 *)
  w 0xab0b017f;         (* arm_CMN X11 X11 *)
  w 0x9240f96b;         (* arm_AND X11 X11 (rvalue (word 9223372036854775807)) *)
  w 0x9a0c0182;         (* arm_ADC X2 X12 X12 *)
  w 0xd2800263;         (* arm_MOV X3 (rvalue (word 19)) *)
  w 0x9b027c67;         (* arm_MUL X7 X3 X2 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0xba040129;         (* arm_ADCS X9 X9 X4 *)
  w 0xba0d014a;         (* arm_ADCS X10 X10 X13 *)
  w 0x9a1f016b;         (* arm_ADC X11 X11 XZR *)
  w 0xa90227e8;         (* arm_STP X8 X9 SP (Immediate_Offset (iword (&32))) *)
  w 0xa9032fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&48))) *)
  w 0xa9400ee2;         (* arm_LDP X2 X3 X23 (Immediate_Offset (iword (&0))) *)
  w 0x9b037c49;         (* arm_MUL X9 X2 X3 *)
  w 0x9bc37c4a;         (* arm_UMULH X10 X2 X3 *)
  w 0xa94116e4;         (* arm_LDP X4 X5 X23 (Immediate_Offset (iword (&16))) *)
  w 0x9b057c4b;         (* arm_MUL X11 X2 X5 *)
  w 0x9bc57c4c;         (* arm_UMULH X12 X2 X5 *)
  w 0x9b047c47;         (* arm_MUL X7 X2 X4 *)
  w 0x9bc47c46;         (* arm_UMULH X6 X2 X4 *)
  w 0xab07014a;         (* arm_ADDS X10 X10 X7 *)
  w 0xba06016b;         (* arm_ADCS X11 X11 X6 *)
  w 0x9b047c67;         (* arm_MUL X7 X3 X4 *)
  w 0x9bc47c66;         (* arm_UMULH X6 X3 X4 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07016b;         (* arm_ADDS X11 X11 X7 *)
  w 0x9b057c8d;         (* arm_MUL X13 X4 X5 *)
  w 0x9bc57c8e;         (* arm_UMULH X14 X4 X5 *)
  w 0xba06018c;         (* arm_ADCS X12 X12 X6 *)
  w 0x9b057c67;         (* arm_MUL X7 X3 X5 *)
  w 0x9bc57c66;         (* arm_UMULH X6 X3 X5 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07018c;         (* arm_ADDS X12 X12 X7 *)
  w 0xba0601ad;         (* arm_ADCS X13 X13 X6 *)
  w 0x9a1f01ce;         (* arm_ADC X14 X14 XZR *)
  w 0xab090129;         (* arm_ADDS X9 X9 X9 *)
  w 0xba0a014a;         (* arm_ADCS X10 X10 X10 *)
  w 0xba0b016b;         (* arm_ADCS X11 X11 X11 *)
  w 0xba0c018c;         (* arm_ADCS X12 X12 X12 *)
  w 0xba0d01ad;         (* arm_ADCS X13 X13 X13 *)
  w 0xba0e01ce;         (* arm_ADCS X14 X14 X14 *)
  w 0x9a9f37e6;         (* arm_CSET X6 Condition_CS *)
  w 0x9bc27c47;         (* arm_UMULH X7 X2 X2 *)
  w 0x9b027c48;         (* arm_MUL X8 X2 X2 *)
  w 0xab070129;         (* arm_ADDS X9 X9 X7 *)
  w 0x9b037c67;         (* arm_MUL X7 X3 X3 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9bc37c67;         (* arm_UMULH X7 X3 X3 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9b047c87;         (* arm_MUL X7 X4 X4 *)
  w 0xba07018c;         (* arm_ADCS X12 X12 X7 *)
  w 0x9bc47c87;         (* arm_UMULH X7 X4 X4 *)
  w 0xba0701ad;         (* arm_ADCS X13 X13 X7 *)
  w 0x9b057ca7;         (* arm_MUL X7 X5 X5 *)
  w 0xba0701ce;         (* arm_ADCS X14 X14 X7 *)
  w 0x9bc57ca7;         (* arm_UMULH X7 X5 X5 *)
  w 0x9a0700c6;         (* arm_ADC X6 X6 X7 *)
  w 0xd28004c3;         (* arm_MOV X3 (rvalue (word 38)) *)
  w 0x9b0c7c67;         (* arm_MUL X7 X3 X12 *)
  w 0x9bcc7c64;         (* arm_UMULH X4 X3 X12 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0x9b0d7c67;         (* arm_MUL X7 X3 X13 *)
  w 0x9bcd7c6d;         (* arm_UMULH X13 X3 X13 *)
  w 0xba070129;         (* arm_ADCS X9 X9 X7 *)
  w 0x9b0e7c67;         (* arm_MUL X7 X3 X14 *)
  w 0x9bce7c6e;         (* arm_UMULH X14 X3 X14 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9b067c67;         (* arm_MUL X7 X3 X6 *)
  w 0x9bc67c66;         (* arm_UMULH X6 X3 X6 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9a9f37ec;         (* arm_CSET X12 Condition_CS *)
  w 0xab0e016b;         (* arm_ADDS X11 X11 X14 *)
  w 0x9a06018c;         (* arm_ADC X12 X12 X6 *)
  w 0xab0b017f;         (* arm_CMN X11 X11 *)
  w 0x9240f96b;         (* arm_AND X11 X11 (rvalue (word 9223372036854775807)) *)
  w 0x9a0c0182;         (* arm_ADC X2 X12 X12 *)
  w 0xd2800263;         (* arm_MOV X3 (rvalue (word 19)) *)
  w 0x9b027c67;         (* arm_MUL X7 X3 X2 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0xba040129;         (* arm_ADCS X9 X9 X4 *)
  w 0xba0d014a;         (* arm_ADCS X10 X10 X13 *)
  w 0x9a1f016b;         (* arm_ADC X11 X11 XZR *)
  w 0xa90427e8;         (* arm_STP X8 X9 SP (Immediate_Offset (iword (&64))) *)
  w 0xa9052fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&80))) *)
  w 0xa9420ee2;         (* arm_LDP X2 X3 X23 (Immediate_Offset (iword (&32))) *)
  w 0x9b037c49;         (* arm_MUL X9 X2 X3 *)
  w 0x9bc37c4a;         (* arm_UMULH X10 X2 X3 *)
  w 0xa94316e4;         (* arm_LDP X4 X5 X23 (Immediate_Offset (iword (&48))) *)
  w 0x9b057c4b;         (* arm_MUL X11 X2 X5 *)
  w 0x9bc57c4c;         (* arm_UMULH X12 X2 X5 *)
  w 0x9b047c47;         (* arm_MUL X7 X2 X4 *)
  w 0x9bc47c46;         (* arm_UMULH X6 X2 X4 *)
  w 0xab07014a;         (* arm_ADDS X10 X10 X7 *)
  w 0xba06016b;         (* arm_ADCS X11 X11 X6 *)
  w 0x9b047c67;         (* arm_MUL X7 X3 X4 *)
  w 0x9bc47c66;         (* arm_UMULH X6 X3 X4 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07016b;         (* arm_ADDS X11 X11 X7 *)
  w 0x9b057c8d;         (* arm_MUL X13 X4 X5 *)
  w 0x9bc57c8e;         (* arm_UMULH X14 X4 X5 *)
  w 0xba06018c;         (* arm_ADCS X12 X12 X6 *)
  w 0x9b057c67;         (* arm_MUL X7 X3 X5 *)
  w 0x9bc57c66;         (* arm_UMULH X6 X3 X5 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07018c;         (* arm_ADDS X12 X12 X7 *)
  w 0xba0601ad;         (* arm_ADCS X13 X13 X6 *)
  w 0x9a1f01ce;         (* arm_ADC X14 X14 XZR *)
  w 0xab090129;         (* arm_ADDS X9 X9 X9 *)
  w 0xba0a014a;         (* arm_ADCS X10 X10 X10 *)
  w 0xba0b016b;         (* arm_ADCS X11 X11 X11 *)
  w 0xba0c018c;         (* arm_ADCS X12 X12 X12 *)
  w 0xba0d01ad;         (* arm_ADCS X13 X13 X13 *)
  w 0xba0e01ce;         (* arm_ADCS X14 X14 X14 *)
  w 0x9a9f37e6;         (* arm_CSET X6 Condition_CS *)
  w 0x9bc27c47;         (* arm_UMULH X7 X2 X2 *)
  w 0x9b027c48;         (* arm_MUL X8 X2 X2 *)
  w 0xab070129;         (* arm_ADDS X9 X9 X7 *)
  w 0x9b037c67;         (* arm_MUL X7 X3 X3 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9bc37c67;         (* arm_UMULH X7 X3 X3 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9b047c87;         (* arm_MUL X7 X4 X4 *)
  w 0xba07018c;         (* arm_ADCS X12 X12 X7 *)
  w 0x9bc47c87;         (* arm_UMULH X7 X4 X4 *)
  w 0xba0701ad;         (* arm_ADCS X13 X13 X7 *)
  w 0x9b057ca7;         (* arm_MUL X7 X5 X5 *)
  w 0xba0701ce;         (* arm_ADCS X14 X14 X7 *)
  w 0x9bc57ca7;         (* arm_UMULH X7 X5 X5 *)
  w 0x9a0700c6;         (* arm_ADC X6 X6 X7 *)
  w 0xd28004c3;         (* arm_MOV X3 (rvalue (word 38)) *)
  w 0x9b0c7c67;         (* arm_MUL X7 X3 X12 *)
  w 0x9bcc7c64;         (* arm_UMULH X4 X3 X12 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0x9b0d7c67;         (* arm_MUL X7 X3 X13 *)
  w 0x9bcd7c6d;         (* arm_UMULH X13 X3 X13 *)
  w 0xba070129;         (* arm_ADCS X9 X9 X7 *)
  w 0x9b0e7c67;         (* arm_MUL X7 X3 X14 *)
  w 0x9bce7c6e;         (* arm_UMULH X14 X3 X14 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9b067c67;         (* arm_MUL X7 X3 X6 *)
  w 0x9bc67c66;         (* arm_UMULH X6 X3 X6 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9a9f37ec;         (* arm_CSET X12 Condition_CS *)
  w 0xab0e016b;         (* arm_ADDS X11 X11 X14 *)
  w 0x9a06018c;         (* arm_ADC X12 X12 X6 *)
  w 0xab0b017f;         (* arm_CMN X11 X11 *)
  w 0x9240f96b;         (* arm_AND X11 X11 (rvalue (word 9223372036854775807)) *)
  w 0x9a0c0182;         (* arm_ADC X2 X12 X12 *)
  w 0xd2800263;         (* arm_MOV X3 (rvalue (word 19)) *)
  w 0x9b027c67;         (* arm_MUL X7 X3 X2 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0xba040129;         (* arm_ADCS X9 X9 X4 *)
  w 0xba0d014a;         (* arm_ADCS X10 X10 X13 *)
  w 0x9a1f016b;         (* arm_ADC X11 X11 XZR *)
  w 0xa90627e8;         (* arm_STP X8 X9 SP (Immediate_Offset (iword (&96))) *)
  w 0xa9072fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&112))) *)
  w 0xa94213e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&32))) *)
  w 0xab030063;         (* arm_ADDS X3 X3 X3 *)
  w 0xba040084;         (* arm_ADCS X4 X4 X4 *)
  w 0xa9431be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&48))) *)
  w 0xba0500a5;         (* arm_ADCS X5 X5 X5 *)
  w 0xba0600c6;         (* arm_ADCS X6 X6 X6 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90213e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&32))) *)
  w 0xa9031be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&48))) *)
  w 0xa9400fe2;         (* arm_LDP X2 X3 SP (Immediate_Offset (iword (&0))) *)
  w 0x9b037c49;         (* arm_MUL X9 X2 X3 *)
  w 0x9bc37c4a;         (* arm_UMULH X10 X2 X3 *)
  w 0xa94117e4;         (* arm_LDP X4 X5 SP (Immediate_Offset (iword (&16))) *)
  w 0x9b057c4b;         (* arm_MUL X11 X2 X5 *)
  w 0x9bc57c4c;         (* arm_UMULH X12 X2 X5 *)
  w 0x9b047c47;         (* arm_MUL X7 X2 X4 *)
  w 0x9bc47c46;         (* arm_UMULH X6 X2 X4 *)
  w 0xab07014a;         (* arm_ADDS X10 X10 X7 *)
  w 0xba06016b;         (* arm_ADCS X11 X11 X6 *)
  w 0x9b047c67;         (* arm_MUL X7 X3 X4 *)
  w 0x9bc47c66;         (* arm_UMULH X6 X3 X4 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07016b;         (* arm_ADDS X11 X11 X7 *)
  w 0x9b057c8d;         (* arm_MUL X13 X4 X5 *)
  w 0x9bc57c8e;         (* arm_UMULH X14 X4 X5 *)
  w 0xba06018c;         (* arm_ADCS X12 X12 X6 *)
  w 0x9b057c67;         (* arm_MUL X7 X3 X5 *)
  w 0x9bc57c66;         (* arm_UMULH X6 X3 X5 *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xab07018c;         (* arm_ADDS X12 X12 X7 *)
  w 0xba0601ad;         (* arm_ADCS X13 X13 X6 *)
  w 0x9a1f01ce;         (* arm_ADC X14 X14 XZR *)
  w 0xab090129;         (* arm_ADDS X9 X9 X9 *)
  w 0xba0a014a;         (* arm_ADCS X10 X10 X10 *)
  w 0xba0b016b;         (* arm_ADCS X11 X11 X11 *)
  w 0xba0c018c;         (* arm_ADCS X12 X12 X12 *)
  w 0xba0d01ad;         (* arm_ADCS X13 X13 X13 *)
  w 0xba0e01ce;         (* arm_ADCS X14 X14 X14 *)
  w 0x9a9f37e6;         (* arm_CSET X6 Condition_CS *)
  w 0x9bc27c47;         (* arm_UMULH X7 X2 X2 *)
  w 0x9b027c48;         (* arm_MUL X8 X2 X2 *)
  w 0xab070129;         (* arm_ADDS X9 X9 X7 *)
  w 0x9b037c67;         (* arm_MUL X7 X3 X3 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9bc37c67;         (* arm_UMULH X7 X3 X3 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9b047c87;         (* arm_MUL X7 X4 X4 *)
  w 0xba07018c;         (* arm_ADCS X12 X12 X7 *)
  w 0x9bc47c87;         (* arm_UMULH X7 X4 X4 *)
  w 0xba0701ad;         (* arm_ADCS X13 X13 X7 *)
  w 0x9b057ca7;         (* arm_MUL X7 X5 X5 *)
  w 0xba0701ce;         (* arm_ADCS X14 X14 X7 *)
  w 0x9bc57ca7;         (* arm_UMULH X7 X5 X5 *)
  w 0x9a0700c6;         (* arm_ADC X6 X6 X7 *)
  w 0xd28004c3;         (* arm_MOV X3 (rvalue (word 38)) *)
  w 0x9b0c7c67;         (* arm_MUL X7 X3 X12 *)
  w 0x9bcc7c64;         (* arm_UMULH X4 X3 X12 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0x9b0d7c67;         (* arm_MUL X7 X3 X13 *)
  w 0x9bcd7c6d;         (* arm_UMULH X13 X3 X13 *)
  w 0xba070129;         (* arm_ADCS X9 X9 X7 *)
  w 0x9b0e7c67;         (* arm_MUL X7 X3 X14 *)
  w 0x9bce7c6e;         (* arm_UMULH X14 X3 X14 *)
  w 0xba07014a;         (* arm_ADCS X10 X10 X7 *)
  w 0x9b067c67;         (* arm_MUL X7 X3 X6 *)
  w 0x9bc67c66;         (* arm_UMULH X6 X3 X6 *)
  w 0xba07016b;         (* arm_ADCS X11 X11 X7 *)
  w 0x9a9f37ec;         (* arm_CSET X12 Condition_CS *)
  w 0xab0e016b;         (* arm_ADDS X11 X11 X14 *)
  w 0x9a06018c;         (* arm_ADC X12 X12 X6 *)
  w 0xab0b017f;         (* arm_CMN X11 X11 *)
  w 0x9240f96b;         (* arm_AND X11 X11 (rvalue (word 9223372036854775807)) *)
  w 0x9a0c0182;         (* arm_ADC X2 X12 X12 *)
  w 0xd2800263;         (* arm_MOV X3 (rvalue (word 19)) *)
  w 0x9b027c67;         (* arm_MUL X7 X3 X2 *)
  w 0xab070108;         (* arm_ADDS X8 X8 X7 *)
  w 0xba040129;         (* arm_ADCS X9 X9 X4 *)
  w 0xba0d014a;         (* arm_ADCS X10 X10 X13 *)
  w 0x9a1f016b;         (* arm_ADC X11 X11 XZR *)
  w 0xa90027e8;         (* arm_STP X8 X9 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9012fea;         (* arm_STP X10 X11 SP (Immediate_Offset (iword (&16))) *)
  w 0xa94413e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&64))) *)
  w 0xa94623e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&96))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa9451be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&80))) *)
  w 0xa94723e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&112))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90813e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9091be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&144))) *)
  w 0xa9441be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&64))) *)
  w 0xa9460fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&96))) *)
  w 0xeb0400a5;         (* arm_SUBS X5 X5 X4 *)
  w 0xfa0300c6;         (* arm_SBCS X6 X6 X3 *)
  w 0xa94523e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&80))) *)
  w 0xa9470fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&112))) *)
  w 0xfa0400e7;         (* arm_SBCS X7 X7 X4 *)
  w 0xfa030108;         (* arm_SBCS X8 X8 X3 *)
  w 0xd28004c4;         (* arm_MOV X4 (rvalue (word 38)) *)
  w 0x9a9f3083;         (* arm_CSEL X3 X4 XZR Condition_CC *)
  w 0xeb0300a5;         (* arm_SUBS X5 X5 X3 *)
  w 0xfa1f00c6;         (* arm_SBCS X6 X6 XZR *)
  w 0xfa1f00e7;         (* arm_SBCS X7 X7 XZR *)
  w 0xda1f0108;         (* arm_SBC X8 X8 XZR *)
  w 0xa9041be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&64))) *)
  w 0xa90523e7;         (* arm_STP X7 X8 SP (Immediate_Offset (iword (&80))) *)
  w 0xa94213e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&32))) *)
  w 0xa94423e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&64))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa9431be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&48))) *)
  w 0xa94523e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&80))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90613e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&96))) *)
  w 0xa9071be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&112))) *)
  w 0xa9481be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9400fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&0))) *)
  w 0xeb0400a5;         (* arm_SUBS X5 X5 X4 *)
  w 0xfa0300c6;         (* arm_SBCS X6 X6 X3 *)
  w 0xa94923e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&144))) *)
  w 0xa9410fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&16))) *)
  w 0xfa0400e7;         (* arm_SBCS X7 X7 X4 *)
  w 0xfa030108;         (* arm_SBCS X8 X8 X3 *)
  w 0xd28004c4;         (* arm_MOV X4 (rvalue (word 38)) *)
  w 0x9a9f3083;         (* arm_CSEL X3 X4 XZR Condition_CC *)
  w 0xeb0300a5;         (* arm_SUBS X5 X5 X3 *)
  w 0xfa1f00c6;         (* arm_SBCS X6 X6 XZR *)
  w 0xfa1f00e7;         (* arm_SBCS X7 X7 XZR *)
  w 0xda1f0108;         (* arm_SBC X8 X8 XZR *)
  w 0xa9021be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&32))) *)
  w 0xa90323e7;         (* arm_STP X7 X8 SP (Immediate_Offset (iword (&48))) *)
  w 0xa94413e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&64))) *)
  w 0xa94823e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&128))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9492be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&144))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9451be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&80))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90236cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&32))) *)
  w 0xa9033ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&48))) *)
  w 0xa94613e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&96))) *)
  w 0xa94423e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&64))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9452be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&80))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9471be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&112))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90436cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&64))) *)
  w 0xa9053ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&80))) *)
  w 0xa94213e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&32))) *)
  w 0xa94623e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&96))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9472be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&112))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9431be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&48))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90036cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&0))) *)
  w 0xa9013ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&16))) *)
  w 0x910283ff;         (* arm_ADD SP SP (rvalue (word 160)) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xd10303ff;         (* arm_SUB SP SP (rvalue (word 192)) *)
  w 0xa94612e3;         (* arm_LDP X3 X4 X23 (Immediate_Offset (iword (&96))) *)
  w 0xa9462307;         (* arm_LDP X7 X8 X24 (Immediate_Offset (iword (&96))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9472b09;         (* arm_LDP X9 X10 X24 (Immediate_Offset (iword (&112))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9471ae5;         (* arm_LDP X5 X6 X23 (Immediate_Offset (iword (&112))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90037ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9013fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&16))) *)
  w 0xa9421ae5;         (* arm_LDP X5 X6 X23 (Immediate_Offset (iword (&32))) *)
  w 0xa9400ee4;         (* arm_LDP X4 X3 X23 (Immediate_Offset (iword (&0))) *)
  w 0xeb0400a5;         (* arm_SUBS X5 X5 X4 *)
  w 0xfa0300c6;         (* arm_SBCS X6 X6 X3 *)
  w 0xa94322e7;         (* arm_LDP X7 X8 X23 (Immediate_Offset (iword (&48))) *)
  w 0xa9410ee4;         (* arm_LDP X4 X3 X23 (Immediate_Offset (iword (&16))) *)
  w 0xfa0400e7;         (* arm_SBCS X7 X7 X4 *)
  w 0xfa030108;         (* arm_SBCS X8 X8 X3 *)
  w 0xd28004c4;         (* arm_MOV X4 (rvalue (word 38)) *)
  w 0x9a9f3083;         (* arm_CSEL X3 X4 XZR Condition_CC *)
  w 0xeb0300a5;         (* arm_SUBS X5 X5 X3 *)
  w 0xfa1f00c6;         (* arm_SBCS X6 X6 XZR *)
  w 0xfa1f00e7;         (* arm_SBCS X7 X7 XZR *)
  w 0xda1f0108;         (* arm_SBC X8 X8 XZR *)
  w 0xa9021be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&32))) *)
  w 0xa90323e7;         (* arm_STP X7 X8 SP (Immediate_Offset (iword (&48))) *)
  w 0xa9421b05;         (* arm_LDP X5 X6 X24 (Immediate_Offset (iword (&32))) *)
  w 0xa9400f04;         (* arm_LDP X4 X3 X24 (Immediate_Offset (iword (&0))) *)
  w 0xeb0400a5;         (* arm_SUBS X5 X5 X4 *)
  w 0xfa0300c6;         (* arm_SBCS X6 X6 X3 *)
  w 0xa9432307;         (* arm_LDP X7 X8 X24 (Immediate_Offset (iword (&48))) *)
  w 0xa9410f04;         (* arm_LDP X4 X3 X24 (Immediate_Offset (iword (&16))) *)
  w 0xfa0400e7;         (* arm_SBCS X7 X7 X4 *)
  w 0xfa030108;         (* arm_SBCS X8 X8 X3 *)
  w 0xd28004c4;         (* arm_MOV X4 (rvalue (word 38)) *)
  w 0x9a9f3083;         (* arm_CSEL X3 X4 XZR Condition_CC *)
  w 0xeb0300a5;         (* arm_SUBS X5 X5 X3 *)
  w 0xfa1f00c6;         (* arm_SBCS X6 X6 XZR *)
  w 0xfa1f00e7;         (* arm_SBCS X7 X7 XZR *)
  w 0xda1f0108;         (* arm_SBC X8 X8 XZR *)
  w 0xa9041be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&64))) *)
  w 0xa90523e7;         (* arm_STP X7 X8 SP (Immediate_Offset (iword (&80))) *)
  w 0xa94212e3;         (* arm_LDP X3 X4 X23 (Immediate_Offset (iword (&32))) *)
  w 0xa94022e7;         (* arm_LDP X7 X8 X23 (Immediate_Offset (iword (&0))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa9431ae5;         (* arm_LDP X5 X6 X23 (Immediate_Offset (iword (&48))) *)
  w 0xa94122e7;         (* arm_LDP X7 X8 X23 (Immediate_Offset (iword (&16))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90613e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&96))) *)
  w 0xa9071be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&112))) *)
  w 0xa9421303;         (* arm_LDP X3 X4 X24 (Immediate_Offset (iword (&32))) *)
  w 0xa9402307;         (* arm_LDP X7 X8 X24 (Immediate_Offset (iword (&0))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa9431b05;         (* arm_LDP X5 X6 X24 (Immediate_Offset (iword (&48))) *)
  w 0xa9412307;         (* arm_LDP X7 X8 X24 (Immediate_Offset (iword (&16))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90813e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9091be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&144))) *)
  w 0xa9441303;         (* arm_LDP X3 X4 X24 (Immediate_Offset (iword (&64))) *)
  w 0xab030063;         (* arm_ADDS X3 X3 X3 *)
  w 0xba040084;         (* arm_ADCS X4 X4 X4 *)
  w 0xa9451b05;         (* arm_LDP X5 X6 X24 (Immediate_Offset (iword (&80))) *)
  w 0xba0500a5;         (* arm_ADCS X5 X5 X5 *)
  w 0xba0600c6;         (* arm_ADCS X6 X6 X6 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90a13e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&160))) *)
  w 0xa90b1be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&176))) *)
  w 0xa94213e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&32))) *)
  w 0xa94423e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&64))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9452be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&80))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9431be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&48))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90237ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&32))) *)
  w 0xa9033fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&48))) *)
  w 0xa94613e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&96))) *)
  w 0xa94823e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&128))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9492be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&144))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9471be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&112))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90637ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&96))) *)
  w 0xa9073fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&112))) *)
  w 0xd29e2b20;         (* arm_MOV X0 (rvalue (word 61785)) *)
  w 0xd2962ac1;         (* arm_MOV X1 (rvalue (word 45398)) *)
  w 0xd29a2602;         (* arm_MOV X2 (rvalue (word 53552)) *)
  w 0xd29f9ce3;         (* arm_MOV X3 (rvalue (word 64743)) *)
  w 0xf2a4d640;         (* arm_MOVK X0 (word 9906) 16 *)
  w 0xf2b05061;         (* arm_MOVK X1 (word 33411) 16 *)
  w 0xf2bdde62;         (* arm_MOVK X2 (word 61171) 16 *)
  w 0xf2aadbe3;         (* arm_MOVK X3 (word 22239) 16 *)
  w 0xf2d37280;         (* arm_MOVK X0 (word 39828) 32 *)
  w 0xf2c29341;         (* arm_MOVK X1 (word 5274) 32 *)
  w 0xf2d01e42;         (* arm_MOVK X2 (word 33010) 32 *)
  w 0xf2db3b83;         (* arm_MOVK X3 (word 55772) 32 *)
  w 0xf2fd7ac0;         (* arm_MOVK X0 (word 60374) 48 *)
  w 0xf2e01c01;         (* arm_MOVK X1 (word 224) 48 *)
  w 0xf2e331c2;         (* arm_MOVK X2 (word 6542) 48 *)
  w 0xf2e480c3;         (* arm_MOVK X3 (word 9222) 48 *)
  w 0xa90407e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&64))) *)
  w 0xa9050fe2;         (* arm_STP X2 X3 SP (Immediate_Offset (iword (&80))) *)
  w 0xa94413e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&64))) *)
  w 0xa94023e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&0))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9412be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&16))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9451be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&80))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90437ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&64))) *)
  w 0xa9053fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&80))) *)
  w 0xa94412e3;         (* arm_LDP X3 X4 X23 (Immediate_Offset (iword (&64))) *)
  w 0xa94a23e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&160))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa94b2be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&176))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9451ae5;         (* arm_LDP X5 X6 X23 (Immediate_Offset (iword (&80))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90837ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9093fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&144))) *)
  w 0xa9461be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&96))) *)
  w 0xa9420fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&32))) *)
  w 0xeb0400a5;         (* arm_SUBS X5 X5 X4 *)
  w 0xfa0300c6;         (* arm_SBCS X6 X6 X3 *)
  w 0xa94723e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&112))) *)
  w 0xa9430fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&48))) *)
  w 0xfa0400e7;         (* arm_SBCS X7 X7 X4 *)
  w 0xfa030108;         (* arm_SBCS X8 X8 X3 *)
  w 0xd28004c4;         (* arm_MOV X4 (rvalue (word 38)) *)
  w 0x9a9f3083;         (* arm_CSEL X3 X4 XZR Condition_CC *)
  w 0xeb0300a5;         (* arm_SUBS X5 X5 X3 *)
  w 0xfa1f00c6;         (* arm_SBCS X6 X6 XZR *)
  w 0xfa1f00e7;         (* arm_SBCS X7 X7 XZR *)
  w 0xda1f0108;         (* arm_SBC X8 X8 XZR *)
  w 0xa9001be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&0))) *)
  w 0xa90123e7;         (* arm_STP X7 X8 SP (Immediate_Offset (iword (&16))) *)
  w 0xa94613e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&96))) *)
  w 0xa94223e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&32))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa9471be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&112))) *)
  w 0xa94323e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&48))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90a13e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&160))) *)
  w 0xa90b1be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&176))) *)
  w 0xa9481be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&128))) *)
  w 0xa9440fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&64))) *)
  w 0xeb0400a5;         (* arm_SUBS X5 X5 X4 *)
  w 0xfa0300c6;         (* arm_SBCS X6 X6 X3 *)
  w 0xa94923e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&144))) *)
  w 0xa9450fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&80))) *)
  w 0xfa0400e7;         (* arm_SBCS X7 X7 X4 *)
  w 0xfa030108;         (* arm_SBCS X8 X8 X3 *)
  w 0xd28004c4;         (* arm_MOV X4 (rvalue (word 38)) *)
  w 0x9a9f3083;         (* arm_CSEL X3 X4 XZR Condition_CC *)
  w 0xeb0300a5;         (* arm_SUBS X5 X5 X3 *)
  w 0xfa1f00c6;         (* arm_SBCS X6 X6 XZR *)
  w 0xfa1f00e7;         (* arm_SBCS X7 X7 XZR *)
  w 0xda1f0108;         (* arm_SBC X8 X8 XZR *)
  w 0xa9021be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&32))) *)
  w 0xa90323e7;         (* arm_STP X7 X8 SP (Immediate_Offset (iword (&48))) *)
  w 0xa94813e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&128))) *)
  w 0xa94423e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&64))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa9491be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&144))) *)
  w 0xa94523e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&80))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90613e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&96))) *)
  w 0xa9071be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&112))) *)
  w 0xa94013e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&0))) *)
  w 0xa94a23e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&160))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa94b2be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&176))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9411be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&16))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90636cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&96))) *)
  w 0xa9073ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&112))) *)
  w 0xa94013e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&0))) *)
  w 0xa94223e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&32))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9432be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&48))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9411be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&16))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90036cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&0))) *)
  w 0xa9013ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&16))) *)
  w 0xa94613e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&96))) *)
  w 0xa94a23e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&160))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa94b2be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&176))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9471be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&112))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90236cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&32))) *)
  w 0xa9033ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&48))) *)
  w 0xa94213e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&32))) *)
  w 0xa94623e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&96))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9472be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&112))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9431be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&48))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90436cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&64))) *)
  w 0xa9053ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&80))) *)
  w 0x910303ff;         (* arm_ADD SP SP (rvalue (word 192)) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xd10303ff;         (* arm_SUB SP SP (rvalue (word 192)) *)
  w 0xa94412e3;         (* arm_LDP X3 X4 X23 (Immediate_Offset (iword (&64))) *)
  w 0xab030063;         (* arm_ADDS X3 X3 X3 *)
  w 0xba040084;         (* arm_ADCS X4 X4 X4 *)
  w 0xa9451ae5;         (* arm_LDP X5 X6 X23 (Immediate_Offset (iword (&80))) *)
  w 0xba0500a5;         (* arm_ADCS X5 X5 X5 *)
  w 0xba0600c6;         (* arm_ADCS X6 X6 X6 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90013e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9011be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&16))) *)
  w 0xa9421ae5;         (* arm_LDP X5 X6 X23 (Immediate_Offset (iword (&32))) *)
  w 0xa9400ee4;         (* arm_LDP X4 X3 X23 (Immediate_Offset (iword (&0))) *)
  w 0xeb0400a5;         (* arm_SUBS X5 X5 X4 *)
  w 0xfa0300c6;         (* arm_SBCS X6 X6 X3 *)
  w 0xa94322e7;         (* arm_LDP X7 X8 X23 (Immediate_Offset (iword (&48))) *)
  w 0xa9410ee4;         (* arm_LDP X4 X3 X23 (Immediate_Offset (iword (&16))) *)
  w 0xfa0400e7;         (* arm_SBCS X7 X7 X4 *)
  w 0xfa030108;         (* arm_SBCS X8 X8 X3 *)
  w 0xd28004c4;         (* arm_MOV X4 (rvalue (word 38)) *)
  w 0x9a9f3083;         (* arm_CSEL X3 X4 XZR Condition_CC *)
  w 0xeb0300a5;         (* arm_SUBS X5 X5 X3 *)
  w 0xfa1f00c6;         (* arm_SBCS X6 X6 XZR *)
  w 0xfa1f00e7;         (* arm_SBCS X7 X7 XZR *)
  w 0xda1f0108;         (* arm_SBC X8 X8 XZR *)
  w 0xa9021be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&32))) *)
  w 0xa90323e7;         (* arm_STP X7 X8 SP (Immediate_Offset (iword (&48))) *)
  w 0xa94212e3;         (* arm_LDP X3 X4 X23 (Immediate_Offset (iword (&32))) *)
  w 0xa94022e7;         (* arm_LDP X7 X8 X23 (Immediate_Offset (iword (&0))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa9431ae5;         (* arm_LDP X5 X6 X23 (Immediate_Offset (iword (&48))) *)
  w 0xa94122e7;         (* arm_LDP X7 X8 X23 (Immediate_Offset (iword (&16))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90413e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&64))) *)
  w 0xa9051be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&80))) *)
  w 0xa94612e3;         (* arm_LDP X3 X4 X23 (Immediate_Offset (iword (&96))) *)
  w 0xa9442307;         (* arm_LDP X7 X8 X24 (Immediate_Offset (iword (&64))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9452b09;         (* arm_LDP X9 X10 X24 (Immediate_Offset (iword (&80))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9471ae5;         (* arm_LDP X5 X6 X23 (Immediate_Offset (iword (&112))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90637ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&96))) *)
  w 0xa9073fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&112))) *)
  w 0xa94213e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&32))) *)
  w 0xa9402307;         (* arm_LDP X7 X8 X24 (Immediate_Offset (iword (&0))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9412b09;         (* arm_LDP X9 X10 X24 (Immediate_Offset (iword (&16))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9431be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&48))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90237ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&32))) *)
  w 0xa9033fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&48))) *)
  w 0xa94413e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&64))) *)
  w 0xa9422307;         (* arm_LDP X7 X8 X24 (Immediate_Offset (iword (&32))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9432b09;         (* arm_LDP X9 X10 X24 (Immediate_Offset (iword (&48))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9451be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&80))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90437ec;         (* arm_STP X12 X13 SP (Immediate_Offset (iword (&64))) *)
  w 0xa9053fee;         (* arm_STP X14 X15 SP (Immediate_Offset (iword (&80))) *)
  w 0xa9401be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9460fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&96))) *)
  w 0xeb0400a5;         (* arm_SUBS X5 X5 X4 *)
  w 0xfa0300c6;         (* arm_SBCS X6 X6 X3 *)
  w 0xa94123e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&16))) *)
  w 0xa9470fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&112))) *)
  w 0xfa0400e7;         (* arm_SBCS X7 X7 X4 *)
  w 0xfa030108;         (* arm_SBCS X8 X8 X3 *)
  w 0xd28004c4;         (* arm_MOV X4 (rvalue (word 38)) *)
  w 0x9a9f3083;         (* arm_CSEL X3 X4 XZR Condition_CC *)
  w 0xeb0300a5;         (* arm_SUBS X5 X5 X3 *)
  w 0xfa1f00c6;         (* arm_SBCS X6 X6 XZR *)
  w 0xfa1f00e7;         (* arm_SBCS X7 X7 XZR *)
  w 0xda1f0108;         (* arm_SBC X8 X8 XZR *)
  w 0xa9081be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&128))) *)
  w 0xa90923e7;         (* arm_STP X7 X8 SP (Immediate_Offset (iword (&144))) *)
  w 0xa94013e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&0))) *)
  w 0xa94623e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&96))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa9411be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&16))) *)
  w 0xa94723e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&112))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90013e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&0))) *)
  w 0xa9011be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&16))) *)
  w 0xa9441be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&64))) *)
  w 0xa9420fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&32))) *)
  w 0xeb0400a5;         (* arm_SUBS X5 X5 X4 *)
  w 0xfa0300c6;         (* arm_SBCS X6 X6 X3 *)
  w 0xa94523e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&80))) *)
  w 0xa9430fe4;         (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&48))) *)
  w 0xfa0400e7;         (* arm_SBCS X7 X7 X4 *)
  w 0xfa030108;         (* arm_SBCS X8 X8 X3 *)
  w 0xd28004c4;         (* arm_MOV X4 (rvalue (word 38)) *)
  w 0x9a9f3083;         (* arm_CSEL X3 X4 XZR Condition_CC *)
  w 0xeb0300a5;         (* arm_SUBS X5 X5 X3 *)
  w 0xfa1f00c6;         (* arm_SBCS X6 X6 XZR *)
  w 0xfa1f00e7;         (* arm_SBCS X7 X7 XZR *)
  w 0xda1f0108;         (* arm_SBC X8 X8 XZR *)
  w 0xa90a1be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&160))) *)
  w 0xa90b23e7;         (* arm_STP X7 X8 SP (Immediate_Offset (iword (&176))) *)
  w 0xa94413e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&64))) *)
  w 0xa94223e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&32))) *)
  w 0xab070063;         (* arm_ADDS X3 X3 X7 *)
  w 0xba080084;         (* arm_ADCS X4 X4 X8 *)
  w 0xa9451be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&80))) *)
  w 0xa94323e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&48))) *)
  w 0xba0700a5;         (* arm_ADCS X5 X5 X7 *)
  w 0xba0800c6;         (* arm_ADCS X6 X6 X8 *)
  w 0xd28004c9;         (* arm_MOV X9 (rvalue (word 38)) *)
  w 0x9a9f2129;         (* arm_CSEL X9 X9 XZR Condition_CS *)
  w 0xab090063;         (* arm_ADDS X3 X3 X9 *)
  w 0xba1f0084;         (* arm_ADCS X4 X4 XZR *)
  w 0xba1f00a5;         (* arm_ADCS X5 X5 XZR *)
  w 0x9a1f00c6;         (* arm_ADC X6 X6 XZR *)
  w 0xa90213e3;         (* arm_STP X3 X4 SP (Immediate_Offset (iword (&32))) *)
  w 0xa9031be5;         (* arm_STP X5 X6 SP (Immediate_Offset (iword (&48))) *)
  w 0xa94813e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&128))) *)
  w 0xa94023e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&0))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9412be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&16))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9491be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&144))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90436cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&64))) *)
  w 0xa9053ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&80))) *)
  w 0xa94a13e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&160))) *)
  w 0xa94823e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&128))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9492be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&144))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa94b1be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&176))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90036cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&0))) *)
  w 0xa9013ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&16))) *)
  w 0xa94013e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&0))) *)
  w 0xa94223e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&32))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9432be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&48))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa9411be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&16))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90236cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&32))) *)
  w 0xa9033ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&48))) *)
  w 0xa94a13e3;         (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&160))) *)
  w 0xa94223e7;         (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&32))) *)
  w 0x9b077c6c;         (* arm_MUL X12 X3 X7 *)
  w 0x9bc77c6d;         (* arm_UMULH X13 X3 X7 *)
  w 0x9b087c6b;         (* arm_MUL X11 X3 X8 *)
  w 0x9bc87c6e;         (* arm_UMULH X14 X3 X8 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0xa9432be9;         (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&48))) *)
  w 0x9b097c6b;         (* arm_MUL X11 X3 X9 *)
  w 0x9bc97c6f;         (* arm_UMULH X15 X3 X9 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b0a7c6b;         (* arm_MUL X11 X3 X10 *)
  w 0x9bca7c70;         (* arm_UMULH X16 X3 X10 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a1f0210;         (* arm_ADC X16 X16 XZR *)
  w 0xa94b1be5;         (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&176))) *)
  w 0x9b077c8b;         (* arm_MUL X11 X4 X7 *)
  w 0xab0b01ad;         (* arm_ADDS X13 X13 X11 *)
  w 0x9b087c8b;         (* arm_MUL X11 X4 X8 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b097c8b;         (* arm_MUL X11 X4 X9 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b0a7c8b;         (* arm_MUL X11 X4 X10 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bca7c83;         (* arm_UMULH X3 X4 X10 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9bc77c8b;         (* arm_UMULH X11 X4 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9bc87c8b;         (* arm_UMULH X11 X4 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9bc97c8b;         (* arm_UMULH X11 X4 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9a1f0063;         (* arm_ADC X3 X3 XZR *)
  w 0x9b077cab;         (* arm_MUL X11 X5 X7 *)
  w 0xab0b01ce;         (* arm_ADDS X14 X14 X11 *)
  w 0x9b087cab;         (* arm_MUL X11 X5 X8 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9b097cab;         (* arm_MUL X11 X5 X9 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b0a7cab;         (* arm_MUL X11 X5 X10 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bca7ca4;         (* arm_UMULH X4 X5 X10 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9bc77cab;         (* arm_UMULH X11 X5 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9bc87cab;         (* arm_UMULH X11 X5 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9bc97cab;         (* arm_UMULH X11 X5 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9a1f0084;         (* arm_ADC X4 X4 XZR *)
  w 0x9b077ccb;         (* arm_MUL X11 X6 X7 *)
  w 0xab0b01ef;         (* arm_ADDS X15 X15 X11 *)
  w 0x9b087ccb;         (* arm_MUL X11 X6 X8 *)
  w 0xba0b0210;         (* arm_ADCS X16 X16 X11 *)
  w 0x9b097ccb;         (* arm_MUL X11 X6 X9 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9b0a7ccb;         (* arm_MUL X11 X6 X10 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9bca7cc5;         (* arm_UMULH X5 X6 X10 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0x9bc77ccb;         (* arm_UMULH X11 X6 X7 *)
  w 0xab0b0210;         (* arm_ADDS X16 X16 X11 *)
  w 0x9bc87ccb;         (* arm_UMULH X11 X6 X8 *)
  w 0xba0b0063;         (* arm_ADCS X3 X3 X11 *)
  w 0x9bc97ccb;         (* arm_UMULH X11 X6 X9 *)
  w 0xba0b0084;         (* arm_ADCS X4 X4 X11 *)
  w 0x9a1f00a5;         (* arm_ADC X5 X5 XZR *)
  w 0xd28004c7;         (* arm_MOV X7 (rvalue (word 38)) *)
  w 0x9b107ceb;         (* arm_MUL X11 X7 X16 *)
  w 0x9bd07ce9;         (* arm_UMULH X9 X7 X16 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0x9b037ceb;         (* arm_MUL X11 X7 X3 *)
  w 0x9bc37ce3;         (* arm_UMULH X3 X7 X3 *)
  w 0xba0b01ad;         (* arm_ADCS X13 X13 X11 *)
  w 0x9b047ceb;         (* arm_MUL X11 X7 X4 *)
  w 0x9bc47ce4;         (* arm_UMULH X4 X7 X4 *)
  w 0xba0b01ce;         (* arm_ADCS X14 X14 X11 *)
  w 0x9b057ceb;         (* arm_MUL X11 X7 X5 *)
  w 0x9bc57ce5;         (* arm_UMULH X5 X7 X5 *)
  w 0xba0b01ef;         (* arm_ADCS X15 X15 X11 *)
  w 0x9a9f37f0;         (* arm_CSET X16 Condition_CS *)
  w 0xab0401ef;         (* arm_ADDS X15 X15 X4 *)
  w 0x9a050210;         (* arm_ADC X16 X16 X5 *)
  w 0xab0f01ff;         (* arm_CMN X15 X15 *)
  w 0x9240f9ef;         (* arm_AND X15 X15 (rvalue (word 9223372036854775807)) *)
  w 0x9a100208;         (* arm_ADC X8 X16 X16 *)
  w 0xd2800267;         (* arm_MOV X7 (rvalue (word 19)) *)
  w 0x9b087ceb;         (* arm_MUL X11 X7 X8 *)
  w 0xab0b018c;         (* arm_ADDS X12 X12 X11 *)
  w 0xba0901ad;         (* arm_ADCS X13 X13 X9 *)
  w 0xba0301ce;         (* arm_ADCS X14 X14 X3 *)
  w 0x9a1f01ef;         (* arm_ADC X15 X15 XZR *)
  w 0xa90636cc;         (* arm_STP X12 X13 X22 (Immediate_Offset (iword (&96))) *)
  w 0xa9073ece;         (* arm_STP X14 X15 X22 (Immediate_Offset (iword (&112))) *)
  w 0x910303ff;         (* arm_ADD SP SP (rvalue (word 192)) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xd2800003;         (* arm_MOV X3 (rvalue (word 0)) *)
  w 0x39400025;         (* arm_LDRB W5 X1 (Immediate_Offset (word 0)) *)
  w 0xd2800002;         (* arm_MOV X2 (rvalue (word 0)) *)
  w 0x91002021;         (* arm_ADD X1 X1 (rvalue (word 8)) *)
  w 0x385f9024;         (* arm_LDRB W4 X1 (Immediate_Offset (word 18446744073709551609)) *)
  w 0x385fa026;         (* arm_LDRB W6 X1 (Immediate_Offset (word 18446744073709551610)) *)
  w 0xb3401ca2;         (* arm_BFM X2 X5 0 7 *)
  w 0x385fb025;         (* arm_LDRB W5 X1 (Immediate_Offset (word 18446744073709551611)) *)
  w 0xb3781c82;         (* arm_BFM X2 X4 56 7 *)
  w 0x385fc024;         (* arm_LDRB W4 X1 (Immediate_Offset (word 18446744073709551612)) *)
  w 0xb3701cc2;         (* arm_BFM X2 X6 48 7 *)
  w 0x385fd026;         (* arm_LDRB W6 X1 (Immediate_Offset (word 18446744073709551613)) *)
  w 0xb3681ca2;         (* arm_BFM X2 X5 40 7 *)
  w 0x385fe025;         (* arm_LDRB W5 X1 (Immediate_Offset (word 18446744073709551614)) *)
  w 0xb3601c82;         (* arm_BFM X2 X4 32 7 *)
  w 0x385ff024;         (* arm_LDRB W4 X1 (Immediate_Offset (word 18446744073709551615)) *)
  w 0xb3581cc2;         (* arm_BFM X2 X6 24 7 *)
  w 0xb3501ca2;         (* arm_BFM X2 X5 16 7 *)
  w 0xb3481c82;         (* arm_BFM X2 X4 8 7 *)
  w 0xdac00c42;         (* arm_REV X2 X2 *)
  w 0xf8237802;         (* arm_STR X2 X0 (Shiftreg_Offset X3 3) *)
  w 0x91000463;         (* arm_ADD X3 X3 (rvalue (word 1)) *)
  w 0xf100407f;         (* arm_CMP X3 (rvalue (word 16)) *)
  w 0x54fffd41;         (* arm_BNE (word 2097064) *)
  w 0xaa0003e2;         (* arm_MOV X2 X0 *)
  w 0x9108200b;         (* arm_ADD X11 X0 (rvalue (word 520)) *)
  w 0xa9452009;         (* arm_LDP X9 X8 X0 (Immediate_Offset (iword (&80))) *)
  w 0xa9461807;         (* arm_LDP X7 X6 X0 (Immediate_Offset (iword (&96))) *)
  w 0xa9470003;         (* arm_LDP X3 X0 X0 (Immediate_Offset (iword (&112))) *)
  w 0xf940244a;         (* arm_LDR X10 X2 (Immediate_Offset (word 72)) *)
  w 0xf8408444;         (* arm_LDR X4 X2 (Postimmediate_Offset (word 8)) *)
  w 0x8b0a0085;         (* arm_ADD X5 X4 X10 *)
  w 0x93c3f461;         (* arm_ROR X1 X3 61 *)
  w 0xf9400044;         (* arm_LDR X4 X2 (Immediate_Offset (word 0)) *)
  w 0xcac34c21;         (* arm_EOR X1 X1 (Shiftedreg X3 ROR 19) *)
  w 0xaa0903ea;         (* arm_MOV X10 X9 *)
  w 0xaa0803e9;         (* arm_MOV X9 X8 *)
  w 0xaa0703e8;         (* arm_MOV X8 X7 *)
  w 0xca431821;         (* arm_EOR X1 X1 (Shiftedreg X3 LSR 6) *)
  w 0xaa0603e7;         (* arm_MOV X7 X6 *)
  w 0xaa0303e6;         (* arm_MOV X6 X3 *)
  w 0xaa0003e3;         (* arm_MOV X3 X0 *)
  w 0x91002042;         (* arm_ADD X2 X2 (rvalue (word 8)) *)
  w 0x93c42080;         (* arm_ROR X0 X4 8 *)
  w 0xcac40400;         (* arm_EOR X0 X0 (Shiftedreg X4 ROR 1) *)
  w 0xca441c00;         (* arm_EOR X0 X0 (Shiftedreg X4 LSR 7) *)
  w 0x8b010000;         (* arm_ADD X0 X0 X1 *)
  w 0x8b050000;         (* arm_ADD X0 X0 X5 *)
  w 0xf9003840;         (* arm_STR X0 X2 (Immediate_Offset (word 112)) *)
  w 0xeb02017f;         (* arm_CMP X11 X2 *)
  w 0x54fffda1;         (* arm_BNE (word 2097076) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xd10b43ff;         (* arm_SUB SP SP (rvalue (word 720)) *)
  w 0xaa0003ec;         (* arm_MOV X12 X0 *)
  w 0x910143e0;         (* arm_ADD X0 SP (rvalue (word 80)) *)
  w 0xf90003f3;         (* arm_STR X19 SP (Immediate_Offset (word 0)) *)
  w 0xf90007fe;         (* arm_STR X30 SP (Immediate_Offset (word 8)) *)
  w 0x97ffffc7;         (* arm_BL (word 268435228) *)
  w 0xf2400d9f;         (* arm_TST X12 (rvalue (word 15)) *)
  w 0x54000961;         (* arm_BNE (word 300) *)
  w 0xa9401d86;         (* arm_LDP X6 X7 X12 (Immediate_Offset (iword (&0))) *)
  w 0xa9411584;         (* arm_LDP X4 X5 X12 (Immediate_Offset (iword (&16))) *)
  w 0xa9420d82;         (* arm_LDP X2 X3 X12 (Immediate_Offset (iword (&32))) *)
  w 0xa9430580;         (* arm_LDP X0 X1 X12 (Immediate_Offset (iword (&48))) *)
  w 0xa9011fe6;         (* arm_STP X6 X7 SP (Immediate_Offset (iword (&16))) *)
  w 0xa90217e4;         (* arm_STP X4 X5 SP (Immediate_Offset (iword (&32))) *)
  w 0xa9030fe2;         (* arm_STP X2 X3 SP (Immediate_Offset (iword (&48))) *)
  w 0xa90407e0;         (* arm_STP X0 X1 SP (Immediate_Offset (iword (&64))) *)
  ADRP (mk_var("K_data",`:num`),0,36808,14);
  w 0xd2800026;         (* arm_MOV X6 (rvalue (word 1)) *)
  ADD_rri64 (mk_var("K_data",`:num`),0,14,14);
  w 0xa94123e5;         (* arm_LDP X5 X8 SP (Immediate_Offset (iword (&16))) *)
  w 0xa94237e7;         (* arm_LDP X7 X13 SP (Immediate_Offset (iword (&32))) *)
  w 0xa9432be3;         (* arm_LDP X3 X10 SP (Immediate_Offset (iword (&48))) *)
  w 0xa9442fe9;         (* arm_LDP X9 X11 SP (Immediate_Offset (iword (&64))) *)
  w 0x14000007;         (* arm_B (word 28) *)
  w 0xaa0803e7;         (* arm_MOV X7 X8 *)
  w 0xaa0a03e9;         (* arm_MOV X9 X10 *)
  w 0xaa0503e8;         (* arm_MOV X8 X5 *)
  w 0xaa0303ea;         (* arm_MOV X10 X3 *)
  w 0xaa0003e5;         (* arm_MOV X5 X0 *)
  w 0xaa0203e3;         (* arm_MOV X3 X2 *)
  w 0xd37df0c1;         (* arm_LSL X1 X6 3 *)
  w 0x910143e4;         (* arm_ADD X4 SP (rvalue (word 80)) *)
  w 0x93c34860;         (* arm_ROR X0 X3 18 *)
  w 0x8b0101c2;         (* arm_ADD X2 X14 X1 *)
  w 0x8b01008f;         (* arm_ADD X15 X4 X1 *)
  w 0xcac33800;         (* arm_EOR X0 X0 (Shiftedreg X3 ROR 14) *)
  w 0x93c588a1;         (* arm_ROR X1 X5 34 *)
  w 0xf85f8050;         (* arm_LDR X16 X2 (Immediate_Offset (word 18446744073709551608)) *)
  w 0xcac57021;         (* arm_EOR X1 X1 (Shiftedreg X5 ROR 28) *)
  w 0x8a230124;         (* arm_BIC X4 X9 X3 *)
  w 0xcac3a400;         (* arm_EOR X0 X0 (Shiftedreg X3 ROR 41) *)
  w 0x8a0a0073;         (* arm_AND X19 X3 X10 *)
  w 0xca0800e2;         (* arm_EOR X2 X7 X8 *)
  w 0xf85f81f1;         (* arm_LDR X17 X15 (Immediate_Offset (word 18446744073709551608)) *)
  w 0xca130084;         (* arm_EOR X4 X4 X19 *)
  w 0xcac59c21;         (* arm_EOR X1 X1 (Shiftedreg X5 ROR 39) *)
  w 0x8b040000;         (* arm_ADD X0 X0 X4 *)
  w 0x8a050042;         (* arm_AND X2 X2 X5 *)
  w 0x8a0800e4;         (* arm_AND X4 X7 X8 *)
  w 0x910004c6;         (* arm_ADD X6 X6 (rvalue (word 1)) *)
  w 0xca040042;         (* arm_EOR X2 X2 X4 *)
  w 0x8b020021;         (* arm_ADD X1 X1 X2 *)
  w 0x8b110202;         (* arm_ADD X2 X16 X17 *)
  w 0x8b020000;         (* arm_ADD X0 X0 X2 *)
  w 0x8b0b0000;         (* arm_ADD X0 X0 X11 *)
  w 0xaa0903eb;         (* arm_MOV X11 X9 *)
  w 0x8b0001a2;         (* arm_ADD X2 X13 X0 *)
  w 0x8b010000;         (* arm_ADD X0 X0 X1 *)
  w 0xaa0703ed;         (* arm_MOV X13 X7 *)
  w 0xf10144df;         (* arm_CMP X6 (rvalue (word 81)) *)
  w 0x54fffb81;         (* arm_BNE (word 2097008) *)
  w 0xa9401186;         (* arm_LDP X6 X4 X12 (Immediate_Offset (iword (&0))) *)
  w 0xa9407bf3;         (* arm_LDP X19 X30 SP (Immediate_Offset (iword (&0))) *)
  w 0x8b0000c6;         (* arm_ADD X6 X6 X0 *)
  w 0x8b050084;         (* arm_ADD X4 X4 X5 *)
  w 0xa9419580;         (* arm_LDP X0 X5 X12 (Immediate_Offset (iword (&24))) *)
  w 0xa9001186;         (* arm_STP X6 X4 X12 (Immediate_Offset (iword (&0))) *)
  w 0x8b070000;         (* arm_ADD X0 X0 X7 *)
  w 0x8b0200a5;         (* arm_ADD X5 X5 X2 *)
  w 0xf9400981;         (* arm_LDR X1 X12 (Immediate_Offset (word 16)) *)
  w 0xf9001185;         (* arm_STR X5 X12 (Immediate_Offset (word 32)) *)
  w 0x8b080021;         (* arm_ADD X1 X1 X8 *)
  w 0xa9010181;         (* arm_STP X1 X0 X12 (Immediate_Offset (iword (&16))) *)
  w 0xa9428584;         (* arm_LDP X4 X1 X12 (Immediate_Offset (iword (&40))) *)
  w 0xf9401d80;         (* arm_LDR X0 X12 (Immediate_Offset (word 56)) *)
  w 0x8b030082;         (* arm_ADD X2 X4 X3 *)
  w 0x8b0a0021;         (* arm_ADD X1 X1 X10 *)
  w 0xa9028582;         (* arm_STP X2 X1 X12 (Immediate_Offset (iword (&40))) *)
  w 0x8b090000;         (* arm_ADD X0 X0 X9 *)
  w 0xf9001d80;         (* arm_STR X0 X12 (Immediate_Offset (word 56)) *)
  w 0x910b43ff;         (* arm_ADD SP SP (rvalue (word 720)) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xa9400181;         (* arm_LDP X1 X0 X12 (Immediate_Offset (iword (&0))) *)
  w 0xf9400982;         (* arm_LDR X2 X12 (Immediate_Offset (word 16)) *)
  w 0xa90103e1;         (* arm_STP X1 X0 SP (Immediate_Offset (iword (&16))) *)
  w 0xa9418181;         (* arm_LDP X1 X0 X12 (Immediate_Offset (iword (&24))) *)
  w 0xf90013e2;         (* arm_STR X2 SP (Immediate_Offset (word 32)) *)
  w 0xf9401582;         (* arm_LDR X2 X12 (Immediate_Offset (word 40)) *)
  w 0xa90283e1;         (* arm_STP X1 X0 SP (Immediate_Offset (iword (&40))) *)
  w 0xa9430181;         (* arm_LDP X1 X0 X12 (Immediate_Offset (iword (&48))) *)
  w 0xf9001fe2;         (* arm_STR X2 SP (Immediate_Offset (word 56)) *)
  w 0xa90403e1;         (* arm_STP X1 X0 SP (Immediate_Offset (iword (&64))) *)
  w 0x17ffffb4;         (* arm_B (word 268435152) *)
  w 0xb4000262;         (* arm_CBZ X2 (word 76) *)
  w 0xa9bd7bfd;         (* arm_STP X29 X30 SP (Preimmediate_Offset (iword (-- &48))) *)
  w 0x910003fd;         (* arm_ADD X29 SP (rvalue (word 0)) *)
  w 0xa90153f3;         (* arm_STP X19 X20 SP (Immediate_Offset (iword (&16))) *)
  w 0xaa0103f3;         (* arm_MOV X19 X1 *)
  w 0xd1000454;         (* arm_SUB X20 X2 (rvalue (word 1)) *)
  w 0xf90013f5;         (* arm_STR X21 SP (Immediate_Offset (word 32)) *)
  w 0xaa0003f5;         (* arm_MOV X21 X0 *)
  w 0xaa1303e1;         (* arm_MOV X1 X19 *)
  w 0xaa1503e0;         (* arm_MOV X0 X21 *)
  w 0xd1000694;         (* arm_SUB X20 X20 (rvalue (word 1)) *)
  w 0x91020273;         (* arm_ADD X19 X19 (rvalue (word 128)) *)
  w 0x97ffff97;         (* arm_BL (word 268435036) *)
  w 0xb100069f;         (* arm_CMN X20 (rvalue (word 1)) *)
  w 0x54ffff41;         (* arm_BNE (word 2097128) *)
  w 0xa94153f3;         (* arm_LDP X19 X20 SP (Immediate_Offset (iword (&16))) *)
  w 0xf94013f5;         (* arm_LDR X21 SP (Immediate_Offset (word 32)) *)
  w 0xa8c37bfd;         (* arm_LDP X29 X30 SP (Postimmediate_Offset (iword (&48))) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xd2992101;         (* arm_MOV X1 (rvalue (word 51464)) *)
  w 0xd294e767;         (* arm_MOV X7 (rvalue (word 42811)) *)
  w 0xa9047c1f;         (* arm_STP XZR XZR X0 (Immediate_Offset (iword (&64))) *)
  w 0xf2be7781;         (* arm_MOVK X1 (word 62396) 16 *)
  w 0xf2b09947;         (* arm_MOVK X7 (word 33994) 16 *)
  w 0xf2dccce1;         (* arm_MOVK X1 (word 58983) 32 *)
  w 0xf2d5d0a7;         (* arm_MOVK X7 (word 44677) 32 *)
  w 0xf2ed4121;         (* arm_MOVK X1 (word 27145) 48 *)
  w 0xf2f76ce7;         (* arm_MOVK X7 (word 47975) 48 *)
  w 0x3903401f;         (* arm_STRB WZR X0 (Immediate_Offset (word 208)) *)
  w 0xd29f0566;         (* arm_MOV X6 (rvalue (word 63531)) *)
  w 0xd286de25;         (* arm_MOV X5 (rvalue (word 14065)) *)
  w 0xd2905a24;         (* arm_MOV X4 (rvalue (word 33489)) *)
  w 0xd28d83e3;         (* arm_MOV X3 (rvalue (word 27679)) *)
  w 0xa9001c01;         (* arm_STP X1 X7 X0 (Immediate_Offset (iword (&0))) *)
  w 0xd297ad62;         (* arm_MOV X2 (rvalue (word 48491)) *)
  w 0xd2842f21;         (* arm_MOV X1 (rvalue (word 8569)) *)
  w 0xf2bfd286;         (* arm_MOVK X6 (word 65172) 16 *)
  w 0xf2abe3a5;         (* arm_MOVK X5 (word 24349) 16 *)
  w 0xf2b5bcc4;         (* arm_MOVK X4 (word 44518) 16 *)
  w 0xf2a567c3;         (* arm_MOVK X3 (word 11070) 16 *)
  w 0xf2bf6822;         (* arm_MOVK X2 (word 64321) 16 *)
  w 0xf2a26fc1;         (* arm_MOVK X1 (word 4990) 16 *)
  w 0xf2de6e46;         (* arm_MOVK X6 (word 62322) 32 *)
  w 0xf2dea745;         (* arm_MOVK X5 (word 62778) 32 *)
  w 0xf2ca4fe4;         (* arm_MOVK X4 (word 21119) 32 *)
  w 0xf2cd1183;         (* arm_MOVK X3 (word 26764) 32 *)
  w 0xf2db3562;         (* arm_MOVK X2 (word 55723) 32 *)
  w 0xf2d9a321;         (* arm_MOVK X1 (word 52505) 32 *)
  w 0xf2e78dc6;         (* arm_MOVK X6 (word 15470) 48 *)
  w 0xf2f4a9e5;         (* arm_MOVK X5 (word 42319) 48 *)
  w 0xf2ea21c4;         (* arm_MOVK X4 (word 20750) 48 *)
  w 0xf2f360a3;         (* arm_MOVK X3 (word 39685) 48 *)
  w 0xf2e3f062;         (* arm_MOVK X2 (word 8067) 48 *)
  w 0xf2eb7c01;         (* arm_MOVK X1 (word 23520) 48 *)
  w 0xa9011406;         (* arm_STP X6 X5 X0 (Immediate_Offset (iword (&16))) *)
  w 0xa9020c04;         (* arm_STP X4 X3 X0 (Immediate_Offset (iword (&32))) *)
  w 0xf9001802;         (* arm_STR X2 X0 (Immediate_Offset (word 48)) *)
  w 0xf9001c01;         (* arm_STR X1 X0 (Immediate_Offset (word 56)) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xa9bd7bfd;         (* arm_STP X29 X30 SP (Preimmediate_Offset (iword (-- &48))) *)
  w 0x910003fd;         (* arm_ADD X29 SP (rvalue (word 0)) *)
  w 0xa90153f3;         (* arm_STP X19 X20 SP (Immediate_Offset (iword (&16))) *)
  w 0xf90013f5;         (* arm_STR X21 SP (Immediate_Offset (word 32)) *)
  w 0xaa0003f5;         (* arm_MOV X21 X0 *)
  w 0xaa0103f3;         (* arm_MOV X19 X1 *)
  w 0xaa0203f4;         (* arm_MOV X20 X2 *)
  w 0xd37df283;         (* arm_LSL X3 X20 3 *)
  w 0xd37dfe85;         (* arm_LSR X5 X20 61 *)
  w 0xf94022a0;         (* arm_LDR X0 X21 (Immediate_Offset (word 64)) *)
  w 0xf94026a2;         (* arm_LDR X2 X21 (Immediate_Offset (word 72)) *)
  w 0xab030000;         (* arm_ADDS X0 X0 X3 *)
  w 0x9a050042;         (* arm_ADC X2 X2 X5 *)
  w 0xa9040aa0;         (* arm_STP X0 X2 X21 (Immediate_Offset (iword (&64))) *)
  w 0x394342a4;         (* arm_LDRB W4 X21 (Immediate_Offset (word 208)) *)
  w 0xb40002a4;         (* arm_CBZ X4 (word 84) *)
  w 0xd2801000;         (* arm_MOV X0 (rvalue (word 128)) *)
  w 0xcb040000;         (* arm_SUB X0 X0 X4 *)
  w 0xeb14001f;         (* arm_CMP X0 X20 *)
  w 0x54000049;         (* arm_BLS (word 8) *)
  w 0xaa1403e0;         (* arm_MOV X0 X20 *)
  w 0x910142a1;         (* arm_ADD X1 X21 (rvalue (word 80)) *)
  w 0xaa1f03e2;         (* arm_MOV X2 XZR *)
  w 0x14000005;         (* arm_B (word 20) *)
  w 0x38626a63;         (* arm_LDRB W3 X19 (Register_Offset X2) *)
  w 0x38246823;         (* arm_STRB W3 X1 (Register_Offset X4) *)
  w 0x91000442;         (* arm_ADD X2 X2 (rvalue (word 1)) *)
  w 0x91000484;         (* arm_ADD X4 X4 (rvalue (word 1)) *)
  w 0xeb00005f;         (* arm_CMP X2 X0 *)
  w 0x54ffff61;         (* arm_BNE (word 2097132) *)
  w 0x8b000273;         (* arm_ADD X19 X19 X0 *)
  w 0xcb000294;         (* arm_SUB X20 X20 X0 *)
  w 0xf102009f;         (* arm_CMP X4 (rvalue (word 128)) *)
  w 0x54000281;         (* arm_BNE (word 80) *)
  w 0xaa1503e0;         (* arm_MOV X0 X21 *)
  w 0x97ffff44;         (* arm_BL (word 268434704) *)
  w 0xf102029f;         (* arm_CMP X20 (rvalue (word 128)) *)
  w 0x54000103;         (* arm_BCC (word 32) *)
  w 0xaa1503e0;         (* arm_MOV X0 X21 *)
  w 0xaa1303e1;         (* arm_MOV X1 X19 *)
  w 0xd347fe82;         (* arm_LSR X2 X20 7 *)
  w 0xd379e043;         (* arm_LSL X3 X2 7 *)
  w 0x8b030273;         (* arm_ADD X19 X19 X3 *)
  w 0x92401a94;         (* arm_AND X20 X20 (rvalue (word 127)) *)
  w 0x97ffff98;         (* arm_BL (word 268435040) *)
  w 0xaa1f03e4;         (* arm_MOV X4 XZR *)
  w 0x910142a1;         (* arm_ADD X1 X21 (rvalue (word 80)) *)
  w 0x14000004;         (* arm_B (word 16) *)
  w 0x38646a62;         (* arm_LDRB W2 X19 (Register_Offset X4) *)
  w 0x38246822;         (* arm_STRB W2 X1 (Register_Offset X4) *)
  w 0x91000484;         (* arm_ADD X4 X4 (rvalue (word 1)) *)
  w 0xeb14009f;         (* arm_CMP X4 X20 *)
  w 0x54ffff81;         (* arm_BNE (word 2097136) *)
  w 0x390342a4;         (* arm_STRB W4 X21 (Immediate_Offset (word 208)) *)
  w 0xa94153f3;         (* arm_LDP X19 X20 SP (Immediate_Offset (iword (&16))) *)
  w 0xf94013f5;         (* arm_LDR X21 SP (Immediate_Offset (word 32)) *)
  w 0xa8c37bfd;         (* arm_LDP X29 X30 SP (Postimmediate_Offset (iword (&48))) *)
  w 0xd65f03c0;         (* arm_RET X30 *)
  w 0xa9bd7bfd;         (* arm_STP X29 X30 SP (Preimmediate_Offset (iword (-- &48))) *)
  w 0x910003fd;         (* arm_ADD X29 SP (rvalue (word 0)) *)
  w 0xa90153f3;         (* arm_STP X19 X20 SP (Immediate_Offset (iword (&16))) *)
  w 0xaa0003f4;         (* arm_MOV X20 X0 *)
  w 0xaa0103f3;         (* arm_MOV X19 X1 *)
  w 0xf90013f5;         (* arm_STR X21 SP (Immediate_Offset (word 32)) *)
  w 0x91014275;         (* arm_ADD X21 X19 (rvalue (word 80)) *)
  w 0x39434262;         (* arm_LDRB W2 X19 (Immediate_Offset (word 208)) *)
  w 0x52801003;         (* arm_MOV W3 (rvalue (word 128)) *)
  w 0x38226aa3;         (* arm_STRB W3 X21 (Register_Offset X2) *)
  w 0x91000442;         (* arm_ADD X2 X2 (rvalue (word 1)) *)
  w 0xf101c05f;         (* arm_CMP X2 (rvalue (word 112)) *)
  w 0x54000149;         (* arm_BLS (word 40) *)
  w 0x14000003;         (* arm_B (word 12) *)
  w 0x38226abf;         (* arm_STRB WZR X21 (Register_Offset X2) *)
  w 0x91000442;         (* arm_ADD X2 X2 (rvalue (word 1)) *)
  w 0xf102005f;         (* arm_CMP X2 (rvalue (word 128)) *)
  w 0x54ffffa1;         (* arm_BNE (word 2097140) *)
  w 0xaa1303e0;         (* arm_MOV X0 X19 *)
  w 0xaa1503e1;         (* arm_MOV X1 X21 *)
  w 0x97ffff19;         (* arm_BL (word 268434532) *)
  w 0xaa1f03e2;         (* arm_MOV X2 XZR *)
  w 0x14000003;         (* arm_B (word 12) *)
  w 0x38226abf;         (* arm_STRB WZR X21 (Register_Offset X2) *)
  w 0x91000442;         (* arm_ADD X2 X2 (rvalue (word 1)) *)
  w 0xf101c05f;         (* arm_CMP X2 (rvalue (word 112)) *)
  w 0x54ffffa1;         (* arm_BNE (word 2097140) *)
  w 0xf9402660;         (* arm_LDR X0 X19 (Immediate_Offset (word 72)) *)
  w 0xdac00c00;         (* arm_REV X0 X0 *)
  w 0xf9006260;         (* arm_STR X0 X19 (Immediate_Offset (word 192)) *)
  w 0xf9402260;         (* arm_LDR X0 X19 (Immediate_Offset (word 64)) *)
  w 0xdac00c00;         (* arm_REV X0 X0 *)
  w 0xf9006660;         (* arm_STR X0 X19 (Immediate_Offset (word 200)) *)
  w 0xaa1303e0;         (* arm_MOV X0 X19 *)
  w 0xaa1503e1;         (* arm_MOV X1 X21 *)
  w 0x97ffff0a;         (* arm_BL (word 268434472) *)
  w 0xf9400260;         (* arm_LDR X0 X19 (Immediate_Offset (word 0)) *)
  w 0xdac00c00;         (* arm_REV X0 X0 *)
  w 0xf9000280;         (* arm_STR X0 X20 (Immediate_Offset (word 0)) *)
  w 0xf9400660;         (* arm_LDR X0 X19 (Immediate_Offset (word 8)) *)
  w 0xdac00c00;         (* arm_REV X0 X0 *)
  w 0xf9000680;         (* arm_STR X0 X20 (Immediate_Offset (word 8)) *)
  w 0xf9400a60;         (* arm_LDR X0 X19 (Immediate_Offset (word 16)) *)
  w 0xdac00c00;         (* arm_REV X0 X0 *)
  w 0xf9000a80;         (* arm_STR X0 X20 (Immediate_Offset (word 16)) *)
  w 0xf9400e60;         (* arm_LDR X0 X19 (Immediate_Offset (word 24)) *)
  w 0xdac00c00;         (* arm_REV X0 X0 *)
  w 0xf9000e80;         (* arm_STR X0 X20 (Immediate_Offset (word 24)) *)
  w 0xf9401260;         (* arm_LDR X0 X19 (Immediate_Offset (word 32)) *)
  w 0xdac00c00;         (* arm_REV X0 X0 *)
  w 0xf9001280;         (* arm_STR X0 X20 (Immediate_Offset (word 32)) *)
  w 0xf9401660;         (* arm_LDR X0 X19 (Immediate_Offset (word 40)) *)
  w 0xdac00c00;         (* arm_REV X0 X0 *)
  w 0xf9001680;         (* arm_STR X0 X20 (Immediate_Offset (word 40)) *)
  w 0xf9401a60;         (* arm_LDR X0 X19 (Immediate_Offset (word 48)) *)
  w 0xdac00c00;         (* arm_REV X0 X0 *)
  w 0xf9001a80;         (* arm_STR X0 X20 (Immediate_Offset (word 48)) *)
  w 0xf9401e60;         (* arm_LDR X0 X19 (Immediate_Offset (word 56)) *)
  w 0xdac00c00;         (* arm_REV X0 X0 *)
  w 0xf9001e80;         (* arm_STR X0 X20 (Immediate_Offset (word 56)) *)
  w 0xa94153f3;         (* arm_LDP X19 X20 SP (Immediate_Offset (iword (&16))) *)
  w 0xf94013f5;         (* arm_LDR X21 SP (Immediate_Offset (word 32)) *)
  w 0xa8c37bfd;         (* arm_LDP X29 X30 SP (Postimmediate_Offset (iword (&48))) *)
  w 0xd65f03c0          (* arm_RET X30 *)
]);;

let ED25519_EXEC = ARM_MK_EXEC_RULE ed25519_mc;;

(* void ed25519_public_key_from_seed_s2n_bignum(
    uint8_t A[ED25519_PUBLIC_KEY_LEN], const uint8_t seed[ED25519_SEED_LEN]) *)
let ED25519_PUBLIC_KEY_FROM_SEED_S2N_BIGNUM_CORRECT = prove
  (`!sp A_p seed_p seed pc retpc base_const double_const K_base.
    aligned 16 sp /\
    adrp_within_bounds (word base_const) (word (pc + 0x149c)) /\
    adrp_within_bounds (word K_base) (word (pc + 0x8fc8)) /\
    PAIRWISE nonoverlapping [(word pc, 37844); (A_p, 32); (seed_p, 32);
      (word_sub sp (word 1184), 1184); (word base_const,48576); (word K_base, 640)] /\
    LENGTH seed = 32 ==>
    ensures arm
      (\s. aligned_bytes_loaded s (word pc) (ed25519_mc pc base_const double_const K_base) /\
           read PC s = word pc /\
           read SP s = sp /\
           read X30 s = word retpc /\
           C_ARGUMENTS [A_p; seed_p] s /\
           byte_list_at seed seed_p s /\
           bytes_loaded s (word base_const) edwards25519_scalarmulbase_alt_constant_data /\
           constants_at (word K_base) s)
      (\s. read PC s = word retpc /\
           byte_list_at (public_key_of_seed seed) A_p s)
      (MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI ,,
       MAYCHANGE [memory :> bytes(A_p, 32)] ,,
       MAYCHANGE [memory :> bytes(word_sub sp (word 1184), 1184)])`,
  REWRITE_TAC[MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI; PAIRWISE; ALL;
      constants_at; bytes_loaded; C_ARGUMENTS; C_RETURN] THEN
    WORD_FORALL_OFFSET_TAC 1184 THEN
    REPEAT STRIP_TAC THEN
    ENSURES_EXISTING_PRESERVED_TAC `SP` THEN
    ENSURES_EXISTING_PRESERVED_TAC `X30` THEN
    ENSURES_PRESERVED_TAC "x19_init" `X19` THEN
    ENSURES_PRESERVED_TAC "x20_init" `X20` THEN

    SUBGOAL_THEN `LENGTH edwards25519_scalarmulbase_alt_constant_data = 48576`
      (fun th -> REWRITE_TAC [th] THEN ASSUME_TAC th) THENL
    [ REWRITE_TAC [LENGTH; edwards25519_scalarmulbase_alt_constant_data] THEN
        CONV_TAC NUM_REDUCE_CONV;
      ALL_TAC ] THEN
    ASM_REWRITE_TAC [byte_list_at] THEN
    ENSURES_INIT_TAC "s0" THEN
    ARM_STEPS_TAC ED25519_EXEC (1--6) THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
       SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, SHA512_INIT)
      [`sp + word 840:int64`; `pc + 0x8eb8`; `pc + 0x18`; `K_base:num`] 7 THEN
    RENAME_TAC `s7:armstate` `s6_ret:armstate` THEN
    ASSUM_EXPAND_SHA512_SPECS_TAC THEN
    ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `[]:byte list` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
    ARM_STEPS_TAC ED25519_EXEC (7--10) THEN
    ASSUME_TAC (CONJUNCT1 LENGTH) THEN
    SUBGOAL_THEN `sha512_ctx_at [] (sp + word 840) s10` ASSUME_TAC THENL
    [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
    SUBGOAL_THEN `adrp_within_bounds (word K_base) (word ((pc + 36536) + 272))` ASSUME_TAC THENL
    [ ASM_REWRITE_TAC [GSYM ADD_ASSOC; ARITH]; ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
       SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_UPDATE)
      [`sp + word 816:int64`; `sp + word 840:int64`; `[]:byte list`; `seed_p:int64`; `seed:byte list`;
       `pc + 0x8eb8`; `pc + 40`; `K_base : num`] 11 THEN
    RENAME_TAC `s11:armstate` `s10_ret:armstate` THEN
    MP_TAC (ASSUME `sha512_ctx_at ([] ++ seed) (sp + word 840) s10_ret`) THEN
    REWRITE_TAC [APPEND] THEN
    EXPAND_SHA512_SPECS_TAC THEN
    ASM_REWRITE_TAC [] THEN
    STRIP_TAC THEN
    ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `seed:byte list` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
    ARM_STEPS_TAC ED25519_EXEC (11--13) THEN
    SUBGOAL_THEN `sha512_ctx_at seed (sp + word 840) s13` ASSUME_TAC THENL
    [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
       SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_FINAL)
      [`sp + word 816:int64`; `sp + word 1056:int64`; `sp + word 840:int64`; `seed:byte list`;
       `pc + 0x8eb8`; `pc + 52`; `K_base : num`] 14 THEN
    RENAME_TAC `s14:armstate` `s13_ret:armstate` THEN
    SUBGOAL_THEN `byte_list_at (sha512_pad seed) (sp + word 1056) s13_ret` MP_TAC THENL
    [ ASM_REWRITE_TAC [byte_list_at; GSYM WORD_ADD_ASSOC; GSYM WORD_ADD]; ALL_TAC ] THEN
    ONCE_REWRITE_TAC [GSYM (ISPEC `sha512_pad seed` SUB_LIST_LENGTH)] THEN
    REWRITE_TAC [LENGTH_SHA512_PAD] THEN REWRITE_TAC [ARITH_RULE `64 = 1 + 30 + 1 + 32`] THEN
    REWRITE_TAC [SUB_LIST_SPLIT] THEN CONV_TAC (TOP_DEPTH_CONV NUM_ADD_CONV) THEN
    REWRITE_TAC [BYTE_LIST_AT_APPEND] THEN
    REWRITE_TAC [LENGTH_SUB_LIST; LENGTH_SHA512_PAD; MIN; ARITH; GSYM WORD_ADD_ASSOC; GSYM WORD_ADD] THEN
    REWRITE_TAC [SUB_LIST_1; LENGTH_SHA512_PAD; ARITH; EL; BYTE_LIST_AT_SING] THEN
    REWRITE_TAC [byte_list_at; LENGTH; LENGTH_SUB_LIST; MIN; LENGTH_SHA512_PAD; ARITH] THEN
    REWRITE_TAC [GSYM WORD_ADD_ASSOC; GSYM WORD_ADD] THEN
    STRIP_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC (14--23) THEN
    SUBGOAL_THEN `byte_list_at (secret_scalar_of_seed_digest (sha512_pad seed)) (sp + word 1056) s23` MP_TAC THENL
    [ REWRITE_TAC [secret_scalar_of_seed_digest] THEN
        REWRITE_TAC [BYTE_LIST_AT_APPEND; BYTE_LIST_AT_SING] THEN
        ASM_REWRITE_TAC [byte_list_at; LENGTH; LENGTH_SUB_LIST; MIN; GSYM WORD_ADD_ASSOC; 
          ADD_ASSOC; LENGTH_SHA512_PAD; GSYM WORD_ADD; ARITH] THEN
        CONV_TAC BITBLAST_RULE;
      ALL_TAC ] THEN
    REWRITE_TAC [BYTE_LIST_AT_NUM_OF_BYTELIST; LENGTH_ED25519_SECRET_SCALAR] THEN
    DISCH_THEN (ASSUME_TAC o REWRITE_RULE [ARITH_RULE `32 = 8 * 4`]) THEN
    SUBGOAL_THEN `adrp_within_bounds (word base_const) (word ((pc + 5104) + 172))` ASSUME_TAC THENL
    [ ASM_REWRITE_TAC [GSYM ADD_ASSOC; ARITH]; ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 5104,
       SPECL [`pc + 5104`; `base_const:num`] edwards25519_scalarmulbase_alt_mc,
       ASM_REWRITE_RULE [bytes_loaded] EDWARDS25519_SCALARMULBASE_ALT_SUBROUTINE_CORRECT)
      [`base_const:num`; `sp + word 1120:int64`; `sp + word 1056:int64`;
       `num_of_bytelist (secret_scalar_of_seed_digest (sha512_pad seed))`;
       `pc + 5104`; `sp + word 816:int64`; `word (pc + 92):int64`] 24 THEN
    RENAME_TAC `s24:armstate` `s23_ret:armstate` THEN
    ARM_STEPS_TAC ED25519_EXEC (24--26) THEN
    ABBREV_TAC `s_B = group_pow edwards25519_group E_25519
      (num_of_bytelist (secret_scalar_of_seed_digest (sha512_pad seed)))` THEN
    SUBGOAL_THEN `paired (modular_encode (256,p_25519)) s_B =
      modular_encode (256,p_25519) (FST s_B), modular_encode (256,p_25519) (SND s_B)` ASSUME_TAC THENL
    [ GEN_REWRITE_TAC (LAND_CONV o ONCE_DEPTH_CONV) [GSYM (ISPEC `s_B:int#int` PAIR)] THEN
        REWRITE_TAC [paired];
      ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (ed25519_mc, ED25519_EXEC, 4840, edwards25519_encode_mc, EDWARDS25519_ENCODE_SUBROUTINE_CORRECT)
      [`A_p:int64`; `sp + word 1120:int64`; `modular_encode (256,p_25519) (FST (s_B:int#int))`;
       `modular_encode (256,p_25519) (SND (s_B:int#int))`; `pc + 4840`; `word (pc + 104):int64`] 27 THEN
    RENAME_TAC `s27:armstate` `s26_ret:armstate` THEN
    ARM_STEPS_TAC ED25519_EXEC (27--29) THEN
    ENSURES_FINAL_STATE_TAC THEN
    ASM_REWRITE_TAC [] THEN
    REWRITE_TAC [public_key_of_seed] THEN
    CONV_TAC (TOP_DEPTH_CONV let_CONV) THEN
    SUBGOAL_THEN `~(p_25519=0)` ASSUME_TAC THENL
    [ REWRITE_TAC [p_25519] THEN ARITH_TAC; ALL_TAC ] THEN
    ASM_SIMP_TAC [GSYM byte_list_at; BYTE_LIST_AT_BYTELIST; LENGTH_BYTELIST_OF_NUM; MODULAR_ENCODE] THEN
    AP_TERM_TAC THEN
    GEN_REWRITE_TAC (RAND_CONV o ONCE_DEPTH_CONV) [GSYM (ISPEC `s_B:int#int` PAIR)] THEN
    REWRITE_TAC [ed25519_encode; modular_encode] THEN
    ASM_SIMP_TAC [NUM_OF_INT_REM_REM]);;

(* size_t dom2_common(
    uint8_t dom2_buffer[max_dom2_size], const uint64_t phflag,
    const uint8_t *context, size_t context_len) *)
let DOM2_COMMON_CORRECT = prove
  (`!dom2_buf_p flag ctx_p ctx pc retpc base_const double_const K_base.
    PAIRWISE nonoverlapping [(word pc, 37844); (dom2_buf_p, max_dom2_size); (ctx_p, LENGTH ctx)] /\
    LENGTH ctx <= 255 ==>
    ensures arm
    (\s. aligned_bytes_loaded s (word pc) (ed25519_mc pc base_const double_const K_base) /\
         read PC s = word (pc + 0x38c) /\
         read X30 s = word retpc /\
         C_ARGUMENTS [dom2_buf_p; flag; ctx_p; word (LENGTH ctx)] s /\
         byte_list_at ctx ctx_p s)
    (\s. read PC s = word retpc /\
         byte_list_at (dom2_prefix ++ [word (val flag)] ++ [word (LENGTH ctx)] ++ ctx) dom2_buf_p s /\
         C_RETURN s = word (LENGTH (dom2_prefix ++ [word (val flag)] ++ [word (LENGTH ctx)] ++ ctx)))
    (MAYCHANGE [PC; X0; X4; X5; X6] ,,
     MAYCHANGE [memory :> bytes(dom2_buf_p, max_dom2_size)] ,,
     MAYCHANGE SOME_FLAGS ,, MAYCHANGE [events])`,
  REWRITE_TAC[SOME_FLAGS; NONOVERLAPPING_CLAUSES; PAIRWISE; ALL; max_dom2_size; C_ARGUMENTS; C_RETURN] THEN
    REPEAT STRIP_TAC THEN
    ENSURES_WHILE_UP_OR_0_TAC
      `LENGTH (ctx:byte list)` `pc + 0x3f4` `pc + 0x3f4`
      `\i s. // loop invariant
        read X2 s = ctx_p /\ read X3 s = word (LENGTH ctx) /\
        read X4 s = dom2_buf_p + word 34 /\ read X5 s = word i /\ read X30 s = word retpc /\
        byte_list_at (dom2_prefix ++ [word (val (flag:int64))] ++ [word (LENGTH ctx)] ++ take i ctx) dom2_buf_p s /\
        byte_list_at ctx ctx_p s` THEN
    REPEAT CONJ_TAC THENL
    [ (* Subgoal 1: initialization *)
      ENSURES_INIT_TAC "s227" THEN
        RULE_ASSUM_TAC (REWRITE_RULE [byte_list_at]) THEN
        ARM_STEPS_TAC ED25519_EXEC (228--250) THEN
        ENSURES_FINAL_STATE_TAC THEN
        ASM_REWRITE_TAC [byte_list_at] THEN
        REWRITE_TAC [take; SUB_LIST_CLAUSES; APPEND_NIL] THEN
        REWRITE_TAC [LENGTH; LENGTH_APPEND; LENGTH_DOM2_PREFIX] THEN
        REWRITE_TAC [dom2_prefix; MAP; byte_of_char; ascii_of_char] THEN
        CONV_TAC NUM_REDUCE_CONV THEN
        CONV_TAC EXPAND_CASES_CONV THEN
        REWRITE_TAC [APPEND] THEN
        CONV_TAC (TOP_DEPTH_CONV EL_CONV) THEN
        RULE_ASSUM_TAC (REWRITE_RULE[READ_MEMORY_SPLIT_CONV 3 `read (memory :> bytes64 a) s = m`]) THEN
        RULE_ASSUM_TAC (CONV_RULE WORD_REDUCE_CONV) THEN
        REPEAT (POP_ASSUM MP_TAC) THEN
        REWRITE_TAC [GSYM WORD_ADD_ASSOC; GSYM WORD_ADD; WORD_ADD_0] THEN
        CONV_TAC (ONCE_DEPTH_CONV NUM_ADD_CONV) THEN
        REPEAT (DISCH_THEN STRIP_ASSUME_TAC) THEN
        ASM_REWRITE_TAC [] THEN
        REWRITE_TAC [GSYM VAL_EQ] THEN
        REWRITE_TAC [VAL_WORD_ZX_GEN; VAL_WORD; DIMINDEX_64; DIMINDEX_32; DIMINDEX_8] THEN
        REWRITE_TAC [MOD_MOD_EXP_MIN] THEN ARITH_TAC;
      (* Subgoal 2: loop body *)
      REPEAT STRIP_TAC THEN
        REWRITE_TAC [byte_list_at; LENGTH_APPEND; LENGTH; LENGTH_DOM2_PREFIX] THEN
        REWRITE_TAC [ADD_ASSOC; ARITH] THEN REWRITE_TAC [GSYM ADD_ASSOC] THEN
        SUBGOAL_THEN `LENGTH (take i (ctx:byte list)) = i` (fun th -> REWRITE_TAC [th]) THENL
        [ REWRITE_TAC [take; LENGTH_SUB_LIST] THEN SIMPLE_ARITH_TAC; ALL_TAC] THEN
        SUBGOAL_THEN `LENGTH (take (i+1) (ctx:byte list)) = i + 1` (fun th -> REWRITE_TAC [th]) THENL
        [ REWRITE_TAC [take; LENGTH_SUB_LIST] THEN SIMPLE_ARITH_TAC; ALL_TAC] THEN
        ENSURES_INIT_TAC "s253_0" THEN
        ARM_STEPS_TAC ED25519_EXEC (254--255) THEN
        POP_ASSUM MP_TAC THEN
        SUBGOAL_THEN `!x y. x <= 255 /\ y < x ==> ~(val (word_sub (word x) (word y):int64) = 0)`
          (fun th -> ASM_SIMP_TAC [th]) THENL
        [ REPEAT GEN_TAC THEN STRIP_TAC THEN
            REWRITE_TAC [VAL_EQ_0] THEN
            FIRST_ASSUM (fun th ->
              ASSUME_TAC (REWRITE_RULE [MATCH_MP LT_IMP_LE th] (ISPECL [`x:num`; `y:num`] WORD_SUB))) THEN
            POP_ASSUM (fun th -> REWRITE_TAC [GSYM th]) THEN
            REWRITE_TAC [GSYM VAL_EQ_0] THEN
            IMP_REWRITE_TAC [VAL_WORD_EQ] THEN REWRITE_TAC [DIMINDEX_64] THEN
            SIMPLE_ARITH_TAC;
          ALL_TAC ] THEN
        STRIP_TAC THEN
        SUBGOAL_THEN `read (memory :> bytes8 (ctx_p + word i)) s255 = EL i ctx` ASSUME_TAC THENL
        [ ASM_SIMP_TAC []; ALL_TAC ] THEN
        ARM_STEPS_TAC ED25519_EXEC (251--253) THEN
        ENSURES_FINAL_STATE_TAC THEN
        ASM_REWRITE_TAC [WORD_ADD] THEN
        REPEAT STRIP_TAC THEN
        ASM_CASES_TAC `i' < 34 + i` THENL
        [ ASM_SIMP_TAC [] THEN
            REWRITE_TAC [take; SUB_LIST_SPLIT] THEN
            REWRITE_TAC [APPEND_ASSOC] THEN
            GEN_REWRITE_TAC RAND_CONV [EL_APPEND] THEN
            REWRITE_TAC [LENGTH_APPEND; LENGTH_DOM2_PREFIX; LENGTH_SUB_LIST; LENGTH] THEN
            COND_CASES_TAC THENL [ REWRITE_TAC []; SIMPLE_ARITH_TAC ];
          SUBGOAL_THEN `i' = 34 + i` (fun th -> REWRITE_TAC [th]) THENL
            [ SIMPLE_ARITH_TAC; ALL_TAC ] THEN
            REWRITE_TAC [take; SUB_LIST_SPLIT] THEN
            REWRITE_TAC [APPEND_ASSOC] THEN
            GEN_REWRITE_TAC RAND_CONV [EL_APPEND] THEN
            REWRITE_TAC [LENGTH_APPEND; LENGTH_DOM2_PREFIX; LENGTH_SUB_LIST; LENGTH] THEN
            COND_CASES_TAC THENL [ SIMPLE_ARITH_TAC; ALL_TAC ] THEN
            ASM_REWRITE_TAC [] THEN
            SIMP_TAC [WORD_ZX_ZX; DIMINDEX_64; DIMINDEX_32; DIMINDEX_8; ARITH] THEN
            IMP_REWRITE_TAC [EL_SUB_LIST] THEN
            REWRITE_TAC [MIN; SUB_0; GSYM ADD1; LE_SUC_LT; ADD] THEN
            SUBGOAL_THEN `i <= LENGTH (ctx:byte list)` (fun th -> REWRITE_TAC [th]) THENL
            [ SIMPLE_ARITH_TAC; ALL_TAC ] THEN
            ASM_REWRITE_TAC [SUB_REFL; ADD_0; ARITH] ];
      (* Subgoal 3: back edge *)
      REPEAT STRIP_TAC THEN
        ARM_SIM_TAC ED25519_EXEC [];
      (* After the loop *)
      REWRITE_TAC [take; SUB_LIST_LENGTH] THEN
        REWRITE_TAC [byte_list_at; LENGTH_APPEND; LENGTH; LENGTH_DOM2_PREFIX] THEN
        ENSURES_INIT_TAC "s253" THEN
        ARM_STEPS_TAC ED25519_EXEC (254--257) THEN
        ENSURES_FINAL_STATE_TAC THEN
        ASM_REWRITE_TAC [] THEN
        CONV_TAC WORD_RULE ]);;

(* void ed25519_sign_common(
    uint8_t out_sig[ED25519_SIGNATURE_LEN], const uint8_t *message,
    size_t message_len, const uint8_t private_key[ED25519_PRIVATE_KEY_LEN],
    uint8_t *dom2_buffer, size_t dom2_buffer_len) *)
let ED25519_SIGN_COMMON_CORRECT = prove
  (`!sp sig_p msg_p msg priv_key_p seed dom2_buf_p alg ctx pc retpc base_const double_const K_base.
    aligned 16 sp /\
    adrp_within_bounds (word base_const) (word (pc + 0x149c)) /\
    adrp_within_bounds (word K_base) (word (pc + 0x8fc8)) /\
    PAIRWISE nonoverlapping [(word pc, 37844); (sig_p, 64); (msg_p, LENGTH (ph alg msg)); (priv_key_p, 64);
      (dom2_buf_p, LENGTH (dom2_of alg ctx)); (word_sub sp (word 1344), 1344); (word base_const,48576); (word K_base, 640)] /\
    LENGTH (ph alg msg) < 2 EXP 64 /\
    LENGTH seed = 32 /\
    dom2_valid alg ctx ==>
    ensures arm
    (\s. aligned_bytes_loaded s (word pc) (ed25519_mc pc base_const double_const K_base) /\
         read PC s = word (pc + 0x74) /\
         read SP s = sp /\
         read X30 s = word retpc /\
         C_ARGUMENTS [sig_p; msg_p; word (LENGTH (ph alg msg)); priv_key_p; dom2_buf_p; word (LENGTH (dom2_of alg ctx))] s /\
         byte_list_at (ph alg msg) msg_p s /\
         byte_list_at (seed ++ public_key_of_seed seed) priv_key_p s /\
         byte_list_at (dom2_of alg ctx) dom2_buf_p s /\
         bytes_loaded s (word base_const) edwards25519_scalarmulbase_alt_constant_data /\
         constants_at (word K_base) s)
    (\s. read PC s = word retpc /\
         byte_list_at (sign alg ctx seed msg) sig_p s)
    (MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI ,,
     MAYCHANGE [memory :> bytes(sig_p, 64)] ,,
     MAYCHANGE [memory :> bytes(word_sub sp (word 1344), 1344)])`,
  REWRITE_TAC[MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI; NONOVERLAPPING_CLAUSES; PAIRWISE; ALL;
      constants_at; bytes_loaded; C_ARGUMENTS; C_RETURN] THEN
    WORD_FORALL_OFFSET_TAC 1344 THEN
    REPEAT STRIP_TAC THEN
    ENSURES_EXISTING_PRESERVED_TAC `SP` THEN
    ENSURES_EXISTING_PRESERVED_TAC `X30` THEN
    ENSURES_PRESERVED_TAC "x19_init" `X19` THEN
    ENSURES_PRESERVED_TAC "x20_init" `X20` THEN
    ENSURES_PRESERVED_TAC "x21_init" `X21` THEN
    ENSURES_PRESERVED_TAC "x22_init" `X22` THEN
    ENSURES_PRESERVED_TAC "x23_init" `X23` THEN
    ENSURES_PRESERVED_TAC "x24_init" `X24` THEN

    SUBGOAL_THEN `LENGTH edwards25519_scalarmulbase_alt_constant_data = 48576`
      (fun th -> REWRITE_TAC [th] THEN ASSUME_TAC th) THENL
    [ REWRITE_TAC [LENGTH; edwards25519_scalarmulbase_alt_constant_data] THEN
        CONV_TAC NUM_REDUCE_CONV;
      ALL_TAC ] THEN
    REWRITE_TAC [BYTE_LIST_AT_APPEND] THEN
    ASM_REWRITE_TAC [byte_list_at; LENGTH_ED25519_PUBLIC_KEY] THEN
    ENSURES_INIT_TAC "s29" THEN
    ARM_STEPS_TAC ED25519_EXEC (30--42) THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
       SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, SHA512_INIT)
      [`sp + word 872:int64`; `pc + 0x8eb8`; `pc + 168`; `K_base:num`] 43 THEN
    RENAME_TAC `s43:armstate` `s42_ret:armstate` THEN
    ASSUM_EXPAND_SHA512_SPECS_TAC THEN
    ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `[]:byte list` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
    ARM_STEPS_TAC ED25519_EXEC (43--46) THEN
    ASSUME_TAC (CONJUNCT1 LENGTH) THEN
    SUBGOAL_THEN `sha512_ctx_at [] (sp + word 872) s46` ASSUME_TAC THENL
    [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
    SUBGOAL_THEN `adrp_within_bounds (word K_base) (word ((pc + 36536) + 272))` ASSUME_TAC THENL
    [ ASM_REWRITE_TAC [GSYM ADD_ASSOC; ARITH]; ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
       SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_UPDATE)
      [`sp + word 816:int64`; `sp + word 872:int64`; `[]:byte list`; `priv_key_p:int64`; `seed:byte list`;
       `pc + 0x8eb8`; `pc + 184`; `K_base : num`] 47 THEN
    RENAME_TAC `s47:armstate` `s46_ret:armstate` THEN
    MP_TAC (ASSUME `sha512_ctx_at ([] ++ seed) (sp + word 872) s46_ret`) THEN
    REWRITE_TAC [APPEND] THEN
    EXPAND_SHA512_SPECS_TAC THEN
    ASM_REWRITE_TAC [] THEN
    STRIP_TAC THEN
    ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `seed:byte list` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
    ARM_STEPS_TAC ED25519_EXEC (47--49) THEN
    SUBGOAL_THEN `sha512_ctx_at seed (sp + word 872) s49` ASSUME_TAC THENL
    [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
       SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_FINAL)
      [`sp + word 816:int64`; `sp + word 1088:int64`; `sp + word 872:int64`; `seed:byte list`;
       `pc + 0x8eb8`; `pc + 196`; `K_base : num`] 50 THEN
    RENAME_TAC `s50:armstate` `s49_ret:armstate` THEN
    SUBGOAL_THEN `byte_list_at (sha512_pad seed) (sp + word 1088) s49_ret` MP_TAC THENL
    [ ASM_REWRITE_TAC [byte_list_at; GSYM WORD_ADD_ASSOC; GSYM WORD_ADD]; ALL_TAC ] THEN
    ONCE_REWRITE_TAC [GSYM (ISPEC `sha512_pad seed` SUB_LIST_LENGTH)] THEN
    REWRITE_TAC [LENGTH_SHA512_PAD] THEN REWRITE_TAC [ARITH_RULE `64 = 1 + 30 + 1 + 32`] THEN
    REWRITE_TAC [SUB_LIST_SPLIT] THEN CONV_TAC (TOP_DEPTH_CONV NUM_ADD_CONV) THEN
    REWRITE_TAC [BYTE_LIST_AT_APPEND] THEN
    REWRITE_TAC [LENGTH_SUB_LIST; LENGTH_SHA512_PAD; MIN; ARITH; GSYM WORD_ADD_ASSOC; GSYM WORD_ADD] THEN
    REWRITE_TAC [SUB_LIST_1; LENGTH_SHA512_PAD; ARITH; EL; BYTE_LIST_AT_SING] THEN
    REWRITE_TAC [byte_list_at; LENGTH; LENGTH_SUB_LIST; MIN; LENGTH_SHA512_PAD; ARITH] THEN
    REWRITE_TAC [GSYM WORD_ADD_ASSOC; GSYM WORD_ADD] THEN
    STRIP_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC (50--58) THEN
    SUBGOAL_THEN `byte_list_at (secret_scalar_of_seed_digest (sha512_pad seed)) (sp + word 1088) s58` MP_TAC THENL
    [ REWRITE_TAC [secret_scalar_of_seed_digest] THEN
        REWRITE_TAC [BYTE_LIST_AT_APPEND; BYTE_LIST_AT_SING] THEN
        ASM_REWRITE_TAC [byte_list_at; LENGTH; LENGTH_SUB_LIST; MIN; GSYM WORD_ADD_ASSOC; 
          ADD_ASSOC; LENGTH_SHA512_PAD; GSYM WORD_ADD; ARITH] THEN
        CONV_TAC BITBLAST_RULE;
      ALL_TAC ] THEN
    REWRITE_TAC [byte_list_at] THEN
    SUBGOAL_THEN `LENGTH (secret_scalar_of_seed_digest (sha512_pad seed)) = 32` MP_TAC THENL
    [ REWRITE_TAC [secret_scalar_of_seed_digest; LENGTH_APPEND; LENGTH_SHA512_PAD; LENGTH;
        LENGTH_SUB_LIST; MIN; ARITH]; ALL_TAC ] THEN
    DISCH_THEN (fun th -> REWRITE_TAC [th]) THEN
    DISCH_TAC THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
       SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, SHA512_INIT)
      [`sp + word 872:int64`; `pc + 0x8eb8`; `pc + 232`; `K_base:num`] 59 THEN
    RENAME_TAC `s59:armstate` `s58_ret:armstate` THEN
    ASSUM_EXPAND_SHA512_SPECS_TAC THEN
    ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `[]:byte list` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
    ARM_STEPS_TAC ED25519_EXEC [59] THEN

    POP_ASSUM MP_TAC THEN
    IMP_REWRITE_TAC [VAL_WORD_EQ; DIMINDEX_64] THEN
    MP_TAC (REWRITE_RULE [max_dom2_size] (SPEC_ALL MAX_VALID_DOM2_SIZE)) THEN
    ASM_REWRITE_TAC [] THEN DISCH_TAC THEN
    ANTS_TAC THENL
    [ MATCH_MP_TAC LET_TRANS THEN EXISTS_TAC `289` THEN ASM_REWRITE_TAC [ARITH]; ALL_TAC ] THEN
    COND_CASES_TAC THENL
    [ (* dom2_buffer empty *)
      SUBGOAL_THEN `[] = dom2_of alg ctx` (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th])) THENL
        [ FIRST_ASSUM (MP_TAC o REWRITE_RULE [LENGTH_EQ_NIL]) THEN
            DISCH_THEN (fun th -> REWRITE_TAC [th]);
          ALL_TAC ] THEN
        SUBGOAL_THEN `sha512_ctx_at (dom2_of alg ctx) (sp + word 872) s59` MP_TAC THENL
        [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC [];
          ALL_TAC];
      (* dom2_buffer non-empty, hash dom2_buffer *)
      STRIP_TAC THEN
        ARM_STEPS_TAC ED25519_EXEC (60--63) THEN
        SUBGOAL_THEN `sha512_ctx_at [] (sp + word 872) s63` ASSUME_TAC THENL
        [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
        ASSUME_TAC (CONJUNCT1 LENGTH) THEN
        SUBGOAL_THEN `LENGTH (dom2_of alg ctx) < 2 EXP 64 /\ 0 + LENGTH (dom2_of alg ctx) < 2 EXP 125` ASSUME_TAC THENL
        [ SIMPLE_ARITH_TAC; ALL_TAC ] THEN
        ARM_SUBROUTINE_SIM_TAC
          (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
          SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_UPDATE)
          [`sp + word 816:int64`; `sp + word 872:int64`; `[]:byte list`; `dom2_buf_p:int64`;
          `dom2_of alg ctx`; `pc + 0x8eb8`; `pc + 252`; `K_base : num`] 64 THEN
        RENAME_TAC `s64:armstate` `s63_ret:armstate` THEN
        UNDISCH_THEN `sha512_ctx_at ([] ++ dom2_of alg ctx) (sp + word 872) s63_ret` MP_TAC THEN
        REWRITE_TAC [APPEND] ] THEN

    (* dom2_buffer has been hashed in both cases *)
    ( EXPAND_SHA512_SPECS_TAC THEN
      REPEAT STRIP_TAC THEN
      ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `dom2_of alg ctx` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
      ARM_STEPS_TAC ED25519_EXEC (64--67) THEN
      SUBGOAL_THEN `sha512_ctx_at (dom2_of alg ctx) (sp + word 872) s67` ASSUME_TAC THENL
      [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
      SUBGOAL_THEN `LENGTH (SUB_LIST (32,32) (sha512_pad seed)) = 32` ASSUME_TAC THENL
      [ REWRITE_TAC [ LENGTH_SUB_LIST; LENGTH_SHA512_PAD] THEN ARITH_TAC; ALL_TAC ] THEN
      SUBGOAL_THEN `LENGTH (dom2_of alg ctx) + 32 < 2 EXP 125` ASSUME_TAC THENL
      [ SIMPLE_ARITH_TAC; ALL_TAC ] THEN
      ARM_SUBROUTINE_SIM_TAC
        (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
        SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_UPDATE)
        [`sp + word 816:int64`; `sp + word 872:int64`; `dom2_of alg ctx`; `sp + word 1120:int64`; `SUB_LIST (32, 32) (sha512_pad seed):byte list`;
        `pc + 0x8eb8`; `pc + 268`; `K_base : num`] 68 THEN
      RENAME_TAC `s68:armstate` `s67_ret:armstate` THEN
      UNDISCH_THEN `sha512_ctx_at (dom2_of alg ctx ++ SUB_LIST (32,32) (sha512_pad seed)) (sp + word 872) s67_ret` MP_TAC THEN
      EXPAND_SHA512_SPECS_TAC THEN
      REPEAT STRIP_TAC THEN
      ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `dom2_of alg ctx ++ SUB_LIST (32,32) (sha512_pad seed)` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
      ARM_STEPS_TAC ED25519_EXEC (68--71) THEN
      SUBGOAL_THEN `sha512_ctx_at (dom2_of alg ctx ++ SUB_LIST (32,32) (sha512_pad seed)) (sp + word 872) s71` ASSUME_TAC THENL
      [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
      SUBGOAL_THEN `LENGTH (dom2_of alg ctx ++ SUB_LIST (32,32) (sha512_pad seed)) + LENGTH (ph alg msg) < 2 EXP 125` ASSUME_TAC THENL
      [ REWRITE_TAC [LENGTH_APPEND; LENGTH_SUB_LIST; LENGTH_SHA512_PAD] THEN SIMPLE_ARITH_TAC; ALL_TAC ] THEN
      ARM_SUBROUTINE_SIM_TAC
        (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
        SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_UPDATE)
        [`sp + word 816:int64`; `sp + word 872:int64`; `dom2_of alg ctx ++ SUB_LIST (32,32) (sha512_pad seed)`; `msg_p:int64`;
        `ph alg msg`; `pc + 0x8eb8`; `pc + 284`; `K_base : num`] 72 THEN
      RENAME_TAC `s72:armstate` `s71_ret:armstate` THEN
      UNDISCH_THEN `sha512_ctx_at ((dom2_of alg ctx ++ SUB_LIST (32,32) (sha512_pad seed)) ++ ph alg msg) (sp + word 872) s71_ret` MP_TAC THEN
      EXPAND_SHA512_SPECS_TAC THEN
      REPEAT STRIP_TAC THEN
      ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `(dom2_of alg ctx ++ SUB_LIST (32,32) (sha512_pad seed)) ++ ph alg msg` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
      ARM_STEPS_TAC ED25519_EXEC (72--74) THEN
      SUBGOAL_THEN `sha512_ctx_at ((dom2_of alg ctx ++ SUB_LIST (32,32) (sha512_pad seed)) ++ ph alg msg) (sp + word 872) s74` MP_TAC THENL
      [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
      DISCH_THEN (ASSUME_TAC o REWRITE_RULE [GSYM APPEND_ASSOC]) THEN
      SUBGOAL_THEN `LENGTH (dom2_of alg ctx ++ SUB_LIST (32,32) (sha512_pad seed) ++ ph alg msg) < 2 EXP 125` ASSUME_TAC THENL
      [ REWRITE_TAC [LENGTH_APPEND; LENGTH_SUB_LIST; LENGTH_SHA512_PAD] THEN SIMPLE_ARITH_TAC; ALL_TAC ] THEN
      ARM_SUBROUTINE_SIM_TAC
        (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
        SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_FINAL)
        [`sp + word 816:int64`; `sp + word 1152:int64`; `sp + word 872:int64`; `dom2_of alg ctx ++ SUB_LIST (32,32) (sha512_pad seed) ++ ph alg msg`;
        `pc + 0x8eb8`; `pc + 296`; `K_base : num`] 75 THEN
      RENAME_TAC `s75:armstate` `s74_ret:armstate` THEN
      ABBREV_TAC `bytelist_r = sha512_pad (dom2_of alg ctx ++ SUB_LIST (32,32) (sha512_pad seed) ++ ph alg msg)` THEN
      SUBGOAL_THEN `LENGTH (bytelist_r:byte list) = 64` ASSUME_TAC THENL
      [ POP_ASSUM (fun th -> REWRITE_TAC [GSYM th; LENGTH_SHA512_PAD]); ALL_TAC ] THEN
      POP_ASSUM (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th]) THEN ASSUME_TAC th) THEN
      ARM_STEPS_TAC ED25519_EXEC (75--78) THEN
      SUBGOAL_THEN `byte_list_at bytelist_r (sp + word 1152) s78` MP_TAC THENL
      [ ASM_REWRITE_TAC [byte_list_at; GSYM WORD_ADD_ASSOC; GSYM WORD_ADD]; ALL_TAC ] THEN
      ASM_REWRITE_TAC [BYTE_LIST_AT_NUM_OF_BYTELIST] THEN
      REWRITE_TAC [WORD_ARITH `64 = 8 * val(word 8:int64)`] THEN
      DISCH_TAC THEN
      ARM_SUBROUTINE_SIM_TAC
        (ed25519_mc, ED25519_EXEC, 2488,
        bignum_mod_n25519_mc, BIGNUM_MOD_N25519_SUBROUTINE_CORRECT)
        [`sp + word 1152:int64`; `word 8:int64`; `sp + word 1152:int64`;
        `num_of_bytelist bytelist_r`; `pc + 2488`; `word (pc + 312):int64`] 79 THEN
      RENAME_TAC `s79:armstate` `s78_ret:armstate` THEN
      ARM_STEPS_TAC ED25519_EXEC (79--81) THEN
      SUBGOAL_THEN `adrp_within_bounds (word base_const) (word ((pc + 5104) + 172))` ASSUME_TAC THENL
      [ ASM_REWRITE_TAC [GSYM ADD_ASSOC; ARITH]; ALL_TAC ] THEN
      ARM_SUBROUTINE_SIM_TAC (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 5104,
        SPECL [`pc + 5104`; `base_const:num`] edwards25519_scalarmulbase_alt_mc,
        ASM_REWRITE_RULE [bytes_loaded] EDWARDS25519_SCALARMULBASE_ALT_SUBROUTINE_CORRECT)
        [`base_const:num`; `sp + word 1216:int64`; `sp + word 1152:int64`; `num_of_bytelist bytelist_r MOD n_25519`;
        `pc + 5104`; `sp + word 816:int64`; `word (pc + 324):int64`] 82 THEN
      RENAME_TAC `s82:armstate` `s81_ret:armstate` THEN
      SUBGOAL_THEN `!r. group_pow edwards25519_group E_25519 (r MOD n_25519) = group_pow edwards25519_group E_25519 r`
        (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th])) THENL
      [ REWRITE_TAC [GSYM GROUP_ELEMENT_ORDER_EDWARDS25519_E25519] THEN
          SIMP_TAC [GROUP_POW_MOD_ELEMENT_ORDER; GENERATOR_IN_GROUP_CARRIER_EDWARDS25519];
        ALL_TAC ] THEN
      ARM_STEPS_TAC ED25519_EXEC (82--84) THEN
      ABBREV_TAC `r_B = group_pow edwards25519_group E_25519 (num_of_bytelist bytelist_r)` THEN
      SUBGOAL_THEN `paired (modular_encode (256,p_25519)) r_B =
        modular_encode (256,p_25519) (FST r_B), modular_encode (256,p_25519) (SND r_B)` ASSUME_TAC THENL
      [ GEN_REWRITE_TAC (LAND_CONV o ONCE_DEPTH_CONV) [GSYM (ISPEC `s_B:int#int` PAIR)] THEN
          REWRITE_TAC [paired];
        ALL_TAC ] THEN
      ARM_SUBROUTINE_SIM_TAC
        (ed25519_mc, ED25519_EXEC, 4840, edwards25519_encode_mc, EDWARDS25519_ENCODE_SUBROUTINE_CORRECT)
        [`sig_p:int64`; `sp + word 1216:int64`; `modular_encode (256,p_25519) (FST (r_B:int#int))`;
        `modular_encode (256,p_25519) (SND (r_B:int#int))`; `pc + 4840`; `word (pc + 336):int64`] 85 THEN
      RENAME_TAC `s85:armstate` `s84_ret:armstate` THEN
      RULE_ASSUM_TAC (REWRITE_RULE [ED25519_ENCODE_MODULAR_ENCODE_P25519;
        REWRITE_RULE [GSYM MODULAR_ENCODE] P25519_NEQ_0]) THEN
      ARM_STEPS_TAC ED25519_EXEC (85--86) THEN
      ARM_SUBROUTINE_SIM_TAC
        (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
        SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, SHA512_INIT)
        [`sp + word 872:int64`; `pc + 0x8eb8`; `pc + 344`; `K_base:num`] 87 THEN
      RENAME_TAC `s87:armstate` `s86_ret:armstate` THEN
      UNDISCH_THEN `sha512_ctx_at [] (sp + word 872) s86_ret` MP_TAC THEN
      EXPAND_SHA512_SPECS_TAC THEN STRIP_TAC THEN
      ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `[]:byte list` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
      ARM_STEPS_TAC ED25519_EXEC [87] ) THENL

    [ SUBGOAL_THEN `[] = dom2_of alg ctx` (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th])) THENL
        [ MATCH_MP_TAC EQ_SYM THEN ASM_REWRITE_TAC [GSYM LENGTH_EQ_NIL]; ALL_TAC ] THEN
        SUBGOAL_THEN `sha512_ctx_at (dom2_of alg ctx) (sp + word 872) s87` MP_TAC THENL
        [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC];
      POP_ASSUM MP_TAC THEN
        ASM_SIMP_TAC [VAL_WORD_EQ; DIMINDEX_64] THEN
        STRIP_TAC THEN
        ARM_STEPS_TAC ED25519_EXEC (88--91) THEN
        SUBGOAL_THEN `sha512_ctx_at [] (sp + word 872) s91` ASSUME_TAC THENL
        [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
        SUBGOAL_THEN `LENGTH ([]:byte list) + LENGTH (dom2_of alg ctx) < 2 EXP 125` ASSUME_TAC THENL
        [ REWRITE_TAC [LENGTH] THEN SIMPLE_ARITH_TAC; ALL_TAC ] THEN
        ARM_SUBROUTINE_SIM_TAC
          (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
          SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_UPDATE)
          [`sp + word 816:int64`; `sp + word 872:int64`; `[]:byte list`; `dom2_buf_p:int64`;
          `dom2_of alg ctx`; `pc + 0x8eb8`; `pc + 364`; `K_base : num`] 92 THEN
        RENAME_TAC `s92:armstate` `s91_ret:armstate` THEN
        UNDISCH_THEN `sha512_ctx_at ([] ++ dom2_of alg ctx) (sp + word 872) s91_ret` MP_TAC THEN
        REWRITE_TAC [APPEND] ] THEN
      
    ( EXPAND_SHA512_SPECS_TAC THEN
      STRIP_TAC THEN
      ARM_STEPS_TAC ED25519_EXEC (92--95) THEN
      SUBGOAL_THEN `sha512_ctx_at (dom2_of alg ctx) (sp + word 872) s95` ASSUME_TAC THENL
      [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
      ASSUME_TAC LENGTH_BYTELIST_OF_NUM THEN
      SUBGOAL_THEN `byte_list_at (bytelist_of_num 32 (ed25519_encode r_B)) sig_p s95` MP_TAC THENL
      [ ASM_REWRITE_TAC [BYTE_LIST_AT_BYTELIST; LENGTH_BYTELIST_OF_NUM]; ALL_TAC ] THEN
      DISCH_THEN (ASSUME_TAC o REWRITE_RULE [byte_list_at; LENGTH_BYTELIST_OF_NUM]) THEN
      ARM_SUBROUTINE_SIM_TAC
        (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
        SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_UPDATE)
        [`sp + word 816:int64`; `sp + word 872:int64`; `dom2_of alg ctx`; `sig_p:int64`; `bytelist_of_num 32 (ed25519_encode r_B)`;
        `pc + 0x8eb8`; `pc + 380`; `K_base : num`] 96 THEN
      RENAME_TAC `s96:armstate` `s95_ret:armstate` THEN
      UNDISCH_THEN `sha512_ctx_at (dom2_of alg ctx ++ bytelist_of_num 32 (ed25519_encode r_B)) (sp + word 872) s95_ret` MP_TAC THEN
      EXPAND_SHA512_SPECS_TAC THEN
      REPEAT STRIP_TAC THEN
      ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `dom2_of alg ctx ++ bytelist_of_num 32 (ed25519_encode r_B)` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
      ARM_STEPS_TAC ED25519_EXEC (96--99) THEN
      SUBGOAL_THEN `sha512_ctx_at (dom2_of alg ctx ++ bytelist_of_num 32 (ed25519_encode r_B)) (sp + word 872) s99` ASSUME_TAC THENL
      [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
      ASSUME_TAC LENGTH_ED25519_PUBLIC_KEY THEN
      SUBGOAL_THEN `LENGTH (dom2_of alg ctx ++ bytelist_of_num 32 (ed25519_encode r_B)) + 32 < 2 EXP 125` ASSUME_TAC THENL
      [ ASM_REWRITE_TAC [LENGTH_APPEND] THEN SIMPLE_ARITH_TAC; ALL_TAC ] THEN
      ASSUME_TAC (WORD_RULE `!x. x + word (32 + i):int64 = (x + word 32) + word i`) THEN
      ARM_SUBROUTINE_SIM_TAC
        (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
        SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_UPDATE)
        [`sp + word 816:int64`; `sp + word 872:int64`; `dom2_of alg ctx ++ bytelist_of_num 32 (ed25519_encode r_B)`;
        `priv_key_p + word 32:int64`; `public_key_of_seed seed`;
        `pc + 0x8eb8`; `pc + 396`; `K_base : num`] 100 THEN
      RENAME_TAC `s100:armstate` `s99_ret:armstate` THEN
      UNDISCH_THEN `sha512_ctx_at ((dom2_of alg ctx ++ bytelist_of_num 32 (ed25519_encode r_B)) ++ public_key_of_seed seed)
        (sp + word 872) s99_ret` (MP_TAC o REWRITE_RULE [GSYM APPEND_ASSOC]) THEN
      EXPAND_SHA512_SPECS_TAC THEN
      STRIP_TAC THEN
      ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `dom2_of alg ctx ++ bytelist_of_num 32 (ed25519_encode r_B) ++ public_key_of_seed seed` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
      ARM_STEPS_TAC ED25519_EXEC (100--103) THEN
      SUBGOAL_THEN `sha512_ctx_at (dom2_of alg ctx ++ bytelist_of_num 32 (ed25519_encode r_B) ++ public_key_of_seed seed) (sp + word 872) s103` ASSUME_TAC THENL
      [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
      SUBGOAL_THEN `LENGTH (dom2_of alg ctx ++ bytelist_of_num 32 (ed25519_encode r_B) ++ public_key_of_seed seed) + LENGTH (ph alg msg) < 2 EXP 125` ASSUME_TAC THENL
      [ ASM_REWRITE_TAC [LENGTH_APPEND] THEN SIMPLE_ARITH_TAC; ALL_TAC ] THEN
      ARM_SUBROUTINE_SIM_TAC
        (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
        SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_UPDATE)
        [`sp + word 816:int64`; `sp + word 872:int64`; `dom2_of alg ctx ++ bytelist_of_num 32 (ed25519_encode r_B) ++ public_key_of_seed seed`;
        `msg_p:int64`; `ph alg msg`; `pc + 0x8eb8`; `pc + 412`; `K_base : num`] 104 THEN
      RENAME_TAC `s104:armstate` `s103_ret:armstate` THEN
      UNDISCH_THEN `sha512_ctx_at
        ((dom2_of alg ctx ++ bytelist_of_num 32 (ed25519_encode r_B) ++ public_key_of_seed seed) ++ ph alg msg) (sp + word 872) s103_ret`
        (MP_TAC o REWRITE_RULE [GSYM APPEND_ASSOC]) THEN
      EXPAND_SHA512_SPECS_TAC THEN
      STRIP_TAC THEN
      ARM_STEPS_TAC ED25519_EXEC (104--106) THEN
      SUBGOAL_THEN `sha512_ctx_at (dom2_of alg ctx ++ bytelist_of_num 32 (ed25519_encode r_B) ++ public_key_of_seed seed ++ ph alg msg) (sp + word 872) s106` ASSUME_TAC THENL
      [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
      SUBGOAL_THEN `LENGTH (dom2_of alg ctx ++ bytelist_of_num 32 (ed25519_encode r_B) ++ public_key_of_seed seed ++ ph alg msg) < 2 EXP 125` ASSUME_TAC THENL
      [ ASM_REWRITE_TAC [LENGTH_APPEND] THEN SIMPLE_ARITH_TAC; ALL_TAC ] THEN
      ARM_SUBROUTINE_SIM_TAC
        (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
        SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_FINAL)
        [`sp + word 816:int64`; `sp + word 1280:int64`; `sp + word 872:int64`;
        `dom2_of alg ctx ++ bytelist_of_num 32 (ed25519_encode r_B) ++ public_key_of_seed seed ++ ph alg msg`;
        `pc + 0x8eb8`; `pc + 424`; `K_base : num`] 107 THEN
      RENAME_TAC `s107:armstate` `s106_ret:armstate` THEN
      ABBREV_TAC `bytelist_k = sha512_pad (dom2_of alg ctx ++ bytelist_of_num 32 (ed25519_encode r_B) ++
        public_key_of_seed seed ++ ph alg msg)` THEN
      SUBGOAL_THEN `LENGTH (bytelist_k:byte list) = 64` ASSUME_TAC THENL
      [ POP_ASSUM (fun th -> REWRITE_TAC [GSYM th; LENGTH_SHA512_PAD]); ALL_TAC ] THEN
      POP_ASSUM (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th]) THEN ASSUME_TAC th) THEN
      ARM_STEPS_TAC ED25519_EXEC (107--110) THEN
      SUBGOAL_THEN `byte_list_at bytelist_k (sp + word 1280) s110` MP_TAC THENL
      [ ASM_REWRITE_TAC [byte_list_at; GSYM WORD_ADD_ASSOC; GSYM WORD_ADD]; ALL_TAC ] THEN
      ASM_REWRITE_TAC [BYTE_LIST_AT_NUM_OF_BYTELIST] THEN
      REWRITE_TAC [WORD_ARITH `64 = 8 * val(word 8:int64)`] THEN
      DISCH_TAC THEN
      ARM_SUBROUTINE_SIM_TAC
        (ed25519_mc, ED25519_EXEC, 2488,
        bignum_mod_n25519_mc, BIGNUM_MOD_N25519_SUBROUTINE_CORRECT)
        [`sp + word 1280:int64`; `word 8:int64`; `sp + word 1280:int64`;
        `num_of_bytelist bytelist_k`; `pc + 2488`; `word (pc + 440):int64`] 111 THEN
      RENAME_TAC `s111:armstate` `s110_ret:armstate` THEN
      ARM_STEPS_TAC ED25519_EXEC (111--115) THEN
      SUBGOAL_THEN `byte_list_at (secret_scalar_of_seed_digest (sha512_pad seed)) (sp + word 1088) s115` MP_TAC THENL
      [ ASM_REWRITE_TAC[byte_list_at; LENGTH_ED25519_SECRET_SCALAR]; ALL_TAC ] THEN
      REWRITE_TAC [BYTE_LIST_AT_NUM_OF_BYTELIST; LENGTH_ED25519_SECRET_SCALAR] THEN
      REWRITE_TAC [ARITH_RULE `32 = 8 * 4`] THEN
      DISCH_TAC THEN
      ARM_SUBROUTINE_SIM_TAC
        (ed25519_mc, ED25519_EXEC, 1708,
        bignum_madd_n25519_alt_mc, BIGNUM_MADD_N25519_ALT_SUBROUTINE_CORRECT)
        [`sig_p + word 32:int64`; `sp + word 1280:int64`; `num_of_bytelist bytelist_k MOD n_25519`;
        `sp + word 1088:int64`; `num_of_bytelist (secret_scalar_of_seed_digest (sha512_pad seed))`;
        `sp + word 1152:int64`; `num_of_bytelist bytelist_r MOD n_25519`;
        `pc + 1708`; `sp + word 816:int64`; `word (pc + 460):int64`] 116 THEN
      RENAME_TAC `s116:armstate` `s115_ret:armstate` THEN
      ARM_STEPS_TAC ED25519_EXEC (116--121) THEN
      REWRITE_TAC [WORD_ARITH `8 * val(word 8:int64) = 64`] THEN
      ENSURES_FINAL_STATE_TAC THEN
      ASM_REWRITE_TAC [] THEN
      REWRITE_TAC [GSYM byte_list_at] THEN
      REWRITE_TAC [sign] THEN
      CONV_TAC (TOP_DEPTH_CONV let_CONV) THEN
      ASM_REWRITE_TAC [BYTE_LIST_AT_APPEND] THEN
      CONJ_TAC THENL [ ASM_REWRITE_TAC [byte_list_at]; ALL_TAC ] THEN
      RULE_ASSUM_TAC (CONV_RULE (TOP_DEPTH_CONV NUM_MULT_CONV)) THEN
      ASM_REWRITE_TAC [BYTE_LIST_AT_NUM_OF_BYTELIST] THEN
      SUBGOAL_THEN `!a b c n. (a MOD n * b + c MOD n) MOD n = (a * b + c) MOD n` (fun th -> REWRITE_TAC [th]) THENL
      [ REPEAT GEN_TAC THEN
          GEN_REWRITE_TAC ONCE_DEPTH_CONV [GSYM MOD_ADD_MOD] THEN
          REWRITE_TAC [MOD_MULT_LMOD; MOD_MOD_REFL];
        ALL_TAC ] THEN
      RULE_ASSUM_TAC (REWRITE_RULE [public_key_of_seed]) THEN
      RULE_ASSUM_TAC (CONV_RULE (TOP_DEPTH_CONV let_CONV)) THEN
      ASM_REWRITE_TAC [] THEN
      IMP_REWRITE_TAC [NUM_OF_BYTELIST_OF_NUM_EQ] THEN
      REWRITE_TAC [ADD_SYM] THEN
      SUBGOAL_THEN `~(n_25519 = 0)` MP_TAC THENL
      [ REWRITE_TAC [n_25519] THEN ARITH_TAC; ALL_TAC ] THEN
      DISCH_THEN (ASSUME_TAC o REWRITE_RULE [GSYM MOD_LT_EQ]) THEN
      SUBGOAL_THEN `n_25519 < 256 EXP 32` ASSUME_TAC THENL
      [ REWRITE_TAC [n_25519] THEN ARITH_TAC; ALL_TAC ] THEN
      SIMPLE_ARITH_TAC ));;

(* int ed25519_sign_no_self_test_s2n_bignum(
    uint8_t out_sig[ED25519_SIGNATURE_LEN], const uint8_t *message,
    size_t message_len, const uint8_t private_key[ED25519_PRIVATE_KEY_LEN]) *)
let ED25519_SIGN_NO_SELF_TEST_S2N_BIGNUM_CORRECT = prove
  (`!sp sig_p msg_p msg priv_key_p seed pc retpc base_const double_const K_base.
    aligned 16 sp /\
    adrp_within_bounds (word base_const) (word (pc + 0x149c)) /\
    adrp_within_bounds (word K_base) (word (pc + 0x8fc8)) /\
    PAIRWISE nonoverlapping [(word pc, 37844); (sig_p, 64); (msg_p, LENGTH msg);
      (priv_key_p, 64); (word_sub sp (word 1360), 1360); (word base_const,48576); (word K_base, 640)] /\
    LENGTH msg < 2 EXP 64 /\
    LENGTH seed = 32 ==>
    ensures arm
    (\s. aligned_bytes_loaded s (word pc) (ed25519_mc pc base_const double_const K_base) /\
         read PC s = word (pc + 0x358) /\
         read SP s = sp /\
         read X30 s = word retpc /\
         C_ARGUMENTS [sig_p; msg_p; word (LENGTH msg); priv_key_p] s /\
         byte_list_at msg msg_p s /\
         byte_list_at (seed ++ public_key_of_seed seed) priv_key_p s /\
         bytes_loaded s (word base_const) edwards25519_scalarmulbase_alt_constant_data /\
         constants_at (word K_base) s)
    (\s. read PC s = word retpc /\
         byte_list_at (sign 0 [] seed msg) sig_p s /\
         C_RETURN s = word 1)
    (MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI ,,
     MAYCHANGE [memory :> bytes(sig_p, 64)] ,,
     MAYCHANGE [memory :> bytes(word_sub sp (word 1360), 1360)])`,
  REWRITE_TAC[MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI; NONOVERLAPPING_CLAUSES; PAIRWISE; ALL;
      constants_at; bytes_loaded; C_ARGUMENTS; C_RETURN] THEN
    WORD_FORALL_OFFSET_TAC 1360 THEN
    REPEAT STRIP_TAC THEN
    ENSURES_EXISTING_PRESERVED_TAC `SP` THEN
    ENSURES_EXISTING_PRESERVED_TAC `X30` THEN
    ENSURES_PRESERVED_TAC "x29_init" `X29` THEN

    SUBGOAL_THEN `LENGTH edwards25519_scalarmulbase_alt_constant_data = 48576`
      (fun th -> REWRITE_TAC [th] THEN ASSUME_TAC th) THENL
    [ REWRITE_TAC [LENGTH; edwards25519_scalarmulbase_alt_constant_data] THEN
        CONV_TAC NUM_REDUCE_CONV;
      ALL_TAC ] THEN
    ENSURES_INIT_TAC "s214" THEN
    RULE_ASSUM_TAC (REWRITE_RULE [byte_list_at]) THEN
    SUBGOAL_THEN `LENGTH (seed ++ public_key_of_seed seed : byte list) = 64`
      (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th]) THEN ASSUME_TAC th) THENL
    [ ASM_REWRITE_TAC [LENGTH_APPEND; LENGTH_ED25519_PUBLIC_KEY] THEN
        ARITH_TAC;
      ALL_TAC ] THEN
    ARM_STEPS_TAC ED25519_EXEC (215--218) THEN
    ASSUME_TAC ED25519_PH THEN
    SUBGOAL_THEN `dom2_valid 0 [] /\ dom2_of 0 [] = []` ASSUME_TAC THENL
    [ REWRITE_TAC [dom2_valid; dom2_of; ARITH; LENGTH]; ALL_TAC ] THEN
    ASSUME_TAC (CONJUNCT1 LENGTH) THEN
    ASSUME_TAC NONOVERLAPPING_MODULO_LEN_0 THEN
    ASSUME_TAC (REWRITE_RULE [byte_list_at; LENGTH] BYTE_LIST_AT_NIL) THEN
    SUBGOAL_THEN `aligned 16 (sp + word 1344:int64)` ASSUME_TAC THENL
    [ ALIGNED_WORD_TAC; ALL_TAC ] THEN
    SUBGOAL_THEN  `nonoverlapping_modulo (2 EXP 64) (pc,37844) (val (sp:int64),1344) /\
      nonoverlapping_modulo (2 EXP 64) (val (sig_p:int64),64) (val sp,1344) /\
      nonoverlapping_modulo (2 EXP 64) (val (msg_p:int64),LENGTH (msg:byte list)) (val sp,1344) /\
      nonoverlapping_modulo (2 EXP 64) (val (priv_key_p:int64),64) (val sp,1344) /\
      nonoverlapping_modulo (2 EXP 64) (val sp,1344) (K_base,640) /\
      nonoverlapping_modulo (2 EXP 64) (val sp,1344) (base_const,48576)` ASSUME_TAC THENL
    [ REPEAT CONJ_TAC THEN NONOVERLAPPING_TAC; ALL_TAC ] THEN (* ??? *)
    ARM_SUBROUTINE_SIM_TAC
      (SPEC_ALL ed25519_mc, ED25519_EXEC, 0,
        SPEC_ALL ed25519_mc, (REWRITE_RULE [byte_list_at; constants_at; bytes_loaded] ED25519_SIGN_COMMON_CORRECT))
      [`sp + word 1344 : int64`; `sig_p:int64`; `msg_p:int64`; `msg:byte list`; `priv_key_p:int64`; `seed:byte list`;
        `word 0:int64`; `0`; `[]:byte list`; `pc:num`; `pc + 872`; `base_const:num`; `double_const:num`; `K_base:num`] 219 THEN
    RENAME_TAC `s219:armstate` `s218_ret:armstate` THEN
    RULE_ASSUM_TAC (REWRITE_RULE [byte_list_at]) THEN
    ASSUME_TAC LENGTH_ED25519_SIGN THEN
    ARM_STEPS_TAC ED25519_EXEC (219--221) THEN
    ENSURES_FINAL_STATE_TAC THEN
    ASM_REWRITE_TAC [byte_list_at]);;

(* int ed25519ctx_sign_no_self_test_s2n_bignum(
    uint8_t out_sig[ED25519_SIGNATURE_LEN], const uint8_t *message,
    size_t message_len, const uint8_t private_key[ED25519_PRIVATE_KEY_LEN],
    const uint8_t *context, size_t context_len) *)
let ED25519CTX_SIGN_NO_SELF_TEST_S2N_BIGNUM_CORRECT = prove
  (`!sp sig_p msg_p msg priv_key_p seed ctx_p ctx pc retpc base_const double_const K_base.
    aligned 16 sp /\
    adrp_within_bounds (word base_const) (word (pc + 0x149c)) /\
    adrp_within_bounds (word K_base) (word (pc + 0x8fc8)) /\
    PAIRWISE nonoverlapping [(word pc, 37844); (sig_p, 64); (msg_p, LENGTH msg); (priv_key_p, 64);
      (ctx_p, LENGTH ctx); (word_sub sp (word 1680), 1680); (word base_const,48576); (word K_base, 640)] /\
    LENGTH msg < 2 EXP 64 /\
    LENGTH seed = 32 /\
    LENGTH ctx < 2 EXP 64 ==>
    ensures arm
    (\s. aligned_bytes_loaded s (word pc) (ed25519_mc pc base_const double_const K_base) /\
         read PC s = word (pc + 0x404) /\
         read SP s = sp /\
         read X30 s = word retpc /\
         C_ARGUMENTS [sig_p; msg_p; word (LENGTH msg); priv_key_p; ctx_p; word (LENGTH ctx)] s /\
         byte_list_at msg msg_p s /\
         byte_list_at (seed ++ public_key_of_seed seed) priv_key_p s /\
         byte_list_at ctx ctx_p s /\
         bytes_loaded s (word base_const) edwards25519_scalarmulbase_alt_constant_data /\
         constants_at (word K_base) s)
    (\s. read PC s = word retpc /\
      if dom2_valid 1 ctx
        then C_RETURN s = word 1 /\ byte_list_at (sign 1 ctx seed msg) sig_p s
        else C_RETURN s = word 0)
    (MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI ,,
     MAYCHANGE [memory :> bytes(sig_p, 64)] ,,
     MAYCHANGE [memory :> bytes(word_sub sp (word 1680), 1680)])`,
  REWRITE_TAC[MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI; NONOVERLAPPING_CLAUSES; PAIRWISE; ALL;
      constants_at; bytes_loaded; C_ARGUMENTS; C_RETURN] THEN
    WORD_FORALL_OFFSET_TAC 1680 THEN
    REPEAT STRIP_TAC THEN
    ENSURES_EXISTING_PRESERVED_TAC `SP` THEN
    ENSURES_EXISTING_PRESERVED_TAC `X30` THEN
    ENSURES_PRESERVED_TAC "x19_init" `X19` THEN
    ENSURES_PRESERVED_TAC "x20_init" `X20` THEN
    ENSURES_PRESERVED_TAC "x21_init" `X21` THEN
    ENSURES_PRESERVED_TAC "x22_init" `X22` THEN

    SUBGOAL_THEN `LENGTH edwards25519_scalarmulbase_alt_constant_data = 48576`
      (fun th -> REWRITE_TAC [th] THEN ASSUME_TAC th) THENL
    [ REWRITE_TAC [LENGTH; edwards25519_scalarmulbase_alt_constant_data] THEN
        CONV_TAC NUM_REDUCE_CONV;
      ALL_TAC ] THEN
    ENSURES_INIT_TAC "s257" THEN
    RULE_ASSUM_TAC (REWRITE_RULE [byte_list_at]) THEN
    SUBGOAL_THEN `LENGTH (seed ++ public_key_of_seed seed) = 64` ASSUME_TAC THENL
    [ ASM_REWRITE_TAC [LENGTH_APPEND; LENGTH_ED25519_PUBLIC_KEY; ARITH]; ALL_TAC ] THEN
    POP_ASSUM (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th]) THEN ASSUME_TAC th) THEN
    ASSUME_TAC LENGTH_ED25519_SIGN THEN
    ARM_STEPS_TAC ED25519_EXEC (258--265) THEN
    POP_ASSUM MP_TAC THEN
    ASM_SIMP_TAC [VAL_WORD_EQ; DIMINDEX_64] THEN
    COND_CASES_TAC THEN
    DISCH_TAC THENL
    [ (* LENGTH ctx = 0 *)
        SUBGOAL_THEN `~(dom2_valid 1 ctx)` (fun th -> REWRITE_TAC [th]) THENL
        [ ASM_REWRITE_TAC [dom2_valid; ARITH; GSYM LENGTH_EQ_NIL]; ALL_TAC ] THEN
        ARM_STEPS_TAC ED25519_EXEC (282--286) THEN
        ENSURES_FINAL_STATE_TAC THEN
        ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    (* ~(LENGTH ctx = 0) *)
    ARM_STEPS_TAC ED25519_EXEC (266--267) THEN
    POP_ASSUM MP_TAC THEN
    ASM_SIMP_TAC [VAL_WORD_EQ; DIMINDEX_64; VAL_WORD_SUB_EQ_0] THEN
    SIMP_TAC [VAL_WORD_EQ; DIMINDEX_64; ARITH] THEN
    COND_CASES_TAC THEN
    DISCH_TAC THENL
    [ (* 255 < LENGTH ctx *)
      SUBGOAL_THEN `~(dom2_valid 1 ctx)` (fun th -> REWRITE_TAC [th]) THENL
        [ ASM_REWRITE_TAC [dom2_valid; ARITH; GSYM LENGTH_EQ_NIL] THEN
            REWRITE_TAC [NOT_LE; LT_LE] THEN
            ONCE_REWRITE_TAC [EQ_SYM] THEN
            ASM_REWRITE_TAC [];
          ALL_TAC ] THEN
        ARM_STEPS_TAC ED25519_EXEC (282--286) THEN
        ENSURES_FINAL_STATE_TAC THEN
        ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    SUBGOAL_THEN `dom2_valid 1 ctx` (fun th -> REWRITE_TAC [th]) THENL
    [ ASM_REWRITE_TAC [dom2_valid; ARITH; GSYM LENGTH_EQ_NIL] THEN
          REWRITE_TAC [GSYM NOT_LT] THEN REWRITE_TAC [LT_LE] THEN
          ONCE_REWRITE_TAC [ARITH_RULE `!x y:num. ~(x=y) <=> ~(y=x)`] THEN
          ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    ARM_STEPS_TAC ED25519_EXEC (268--272) THEN
    SUBGOAL_THEN `LENGTH (ctx:byte list) <= 255` ASSUME_TAC THENL
    [ REWRITE_TAC [GSYM NOT_LT] THEN REWRITE_TAC [LT_LE] THEN
        ONCE_REWRITE_TAC [ARITH_RULE `!x y:num. ~(x=y) <=> ~(y=x)`] THEN
        ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPEC_ALL ed25519_mc, ED25519_EXEC, 0, SPEC_ALL ed25519_mc, REWRITE_RULE [max_dom2_size; byte_list_at] DOM2_COMMON_CORRECT)
      [`sp + word 1384 : int64`; `word 0:int64`; `ctx_p:int64`; `ctx:byte list`; `pc:num`; `pc + 1088`; `base_const:num`; `double_const:num`; `K_base:num`] 273 THEN
    RENAME_TAC `s273:armstate` `s272_ret:armstate` THEN
    SUBGOAL_THEN `LENGTH (dom2_prefix ++ [word (val (word 0 : int64))] ++ [word (LENGTH ctx)] ++ ctx) <= 289` ASSUME_TAC THENL
    [ REWRITE_TAC [LENGTH_APPEND; LENGTH; LENGTH_DOM2_PREFIX] THEN SIMPLE_ARITH_TAC; ALL_TAC ] THEN
    ARM_STEPS_TAC ED25519_EXEC (273--279) THEN
    RULE_ASSUM_TAC (REWRITE_RULE [WORD_RULE `word (val (word 0:int64)):byte = word 0`]) THEN
    ASSUME_TAC ED25519_PH THEN
    SUBGOAL_THEN `dom2_prefix ++ [word 0] ++ [word (LENGTH ctx)] ++ ctx = dom2_of 1 ctx` (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th])) THENL
    [ REWRITE_TAC [dom2_of; phflag; ARITH]; ALL_TAC ] THEN
    SUBGOAL_THEN `dom2_valid 1 ctx` ASSUME_TAC THENL
    [ REWRITE_TAC [dom2_valid; ARITH] THEN ASM_REWRITE_TAC [GSYM LENGTH_EQ_NIL]; ALL_TAC] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPEC_ALL ed25519_mc, ED25519_EXEC, 0,
        SPEC_ALL ed25519_mc, (REWRITE_RULE [byte_list_at; constants_at; bytes_loaded] ED25519_SIGN_COMMON_CORRECT))
      [`sp + word 1344 : int64`; `sig_p:int64`; `msg_p:int64`; `msg:byte list`; `priv_key_p:int64`; `seed:byte list`;
        `sp + word 1384:int64`; `1`; `ctx:byte list`; `pc:num`; `pc + 1116`; `base_const:num`; `double_const:num`; `K_base:num`] 280 THEN
    RENAME_TAC `s280:armstate` `s279_ret:armstate` THEN
    ARM_STEPS_TAC ED25519_EXEC (280--281) THEN
    ARM_STEPS_TAC ED25519_EXEC (283--286) THEN
    ENSURES_FINAL_STATE_TAC THEN
    ASM_REWRITE_TAC [byte_list_at]);;

(* int ed25519ph_sign_no_self_test_s2n_bignum(
    uint8_t out_sig[ED25519_SIGNATURE_LEN], const uint8_t *message,
    size_t message_len, const uint8_t private_key[ED25519_PRIVATE_KEY_LEN],
    const uint8_t *context, size_t context_len) *)
let ED25519PH_SIGN_NO_SELF_TEST_S2N_BIGNUM_CORRECT = prove
  (`!sp sig_p msg_p msg priv_key_p seed ctx_p ctx pc retpc base_const double_const K_base.
    aligned 16 sp /\
    adrp_within_bounds (word base_const) (word (pc + 0x149c)) /\
    adrp_within_bounds (word K_base) (word (pc + 0x8fc8)) /\
    PAIRWISE nonoverlapping [(word pc, 37844); (sig_p, 64); (msg_p, LENGTH msg); (priv_key_p, 64);
      (ctx_p, LENGTH ctx); (word_sub sp (word 1968), 1968); (word base_const,48576); (word K_base, 640)] /\
    LENGTH msg < 2 EXP 64 /\
    LENGTH seed = 32 /\
    LENGTH ctx < 2 EXP 64 ==>
    ensures arm
    (\s. aligned_bytes_loaded s (word pc) (ed25519_mc pc base_const double_const K_base) /\
         read PC s = word (pc + 0x4e8) /\
         read SP s = sp /\
         read X30 s = word retpc /\
         C_ARGUMENTS [sig_p; msg_p; word (LENGTH msg); priv_key_p; ctx_p; word (LENGTH ctx)] s /\
         byte_list_at msg msg_p s /\
         byte_list_at (seed ++ public_key_of_seed seed) priv_key_p s /\
         byte_list_at ctx ctx_p s /\
         bytes_loaded s (word base_const) edwards25519_scalarmulbase_alt_constant_data /\
         constants_at (word K_base) s)
    (\s. read PC s = word retpc /\
      if dom2_valid 2 ctx
        then C_RETURN s = word 1 /\ byte_list_at (sign 2 ctx seed msg) sig_p s
        else C_RETURN s = word 0)
    (MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI ,,
     MAYCHANGE [memory :> bytes(sig_p, 64)] ,,
     MAYCHANGE [memory :> bytes(word_sub sp (word 1968), 1968)])`,
  REWRITE_TAC[MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI; NONOVERLAPPING_CLAUSES; PAIRWISE; ALL;
      constants_at; bytes_loaded; C_ARGUMENTS; C_RETURN] THEN
    WORD_FORALL_OFFSET_TAC 1968 THEN
    REPEAT STRIP_TAC THEN
    ENSURES_EXISTING_PRESERVED_TAC `SP` THEN
    ENSURES_EXISTING_PRESERVED_TAC `X30` THEN
    ENSURES_PRESERVED_TAC "x19_init" `X19` THEN
    ENSURES_PRESERVED_TAC "x20_init" `X20` THEN
    ENSURES_PRESERVED_TAC "x21_init" `X21` THEN
    ENSURES_PRESERVED_TAC "x22_init" `X22` THEN

    SUBGOAL_THEN `LENGTH edwards25519_scalarmulbase_alt_constant_data = 48576`
      (fun th -> REWRITE_TAC [th] THEN ASSUME_TAC th) THENL
    [ REWRITE_TAC [LENGTH; edwards25519_scalarmulbase_alt_constant_data] THEN
        CONV_TAC NUM_REDUCE_CONV;
      ALL_TAC ] THEN
    ENSURES_INIT_TAC "s314" THEN
    RULE_ASSUM_TAC (REWRITE_RULE [byte_list_at]) THEN
    SUBGOAL_THEN `LENGTH (seed ++ public_key_of_seed seed) = 64`
      (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th]) THEN ASSUME_TAC th) THENL
    [ ASM_REWRITE_TAC[LENGTH_APPEND; LENGTH_ED25519_PUBLIC_KEY; ARITH]; ALL_TAC ] THEN
    ARM_STEPS_TAC ED25519_EXEC (315--324) THEN
    POP_ASSUM MP_TAC THEN
    ASM_SIMP_TAC [VAL_WORD_EQ; DIMINDEX_64; VAL_WORD_SUB_EQ_0] THEN
    SIMP_TAC [VAL_WORD_EQ; DIMINDEX_64; ARITH] THEN
    COND_CASES_TAC THEN
    DISCH_TAC THENL
    [ (* 255 < LENGTH ctx *)
      SUBGOAL_THEN `~(dom2_valid 2 ctx)` (fun th -> REWRITE_TAC [th]) THENL
        [ ASM_REWRITE_TAC [dom2_valid; ARITH; GSYM LENGTH_EQ_NIL] THEN
            REWRITE_TAC [NOT_LE; LT_LE] THEN
            ONCE_REWRITE_TAC [EQ_SYM] THEN
            ASM_REWRITE_TAC [];
          ALL_TAC ] THEN
        ARM_STEPS_TAC ED25519_EXEC (349--354) THEN
        ENSURES_FINAL_STATE_TAC THEN
        ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    SUBGOAL_THEN `dom2_valid 2 ctx` (fun th -> REWRITE_TAC [th]) THENL
    [ ASM_REWRITE_TAC [dom2_valid; ARITH; GSYM LENGTH_EQ_NIL] THEN
          REWRITE_TAC [GSYM NOT_LT] THEN REWRITE_TAC [LT_LE] THEN
          ONCE_REWRITE_TAC [ARITH_RULE `!x y:num. ~(x=y) <=> ~(y=x)`] THEN
          ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    ARM_STEPS_TAC ED25519_EXEC (325--329) THEN
    SUBGOAL_THEN `LENGTH (ctx:byte list) <= 255` ASSUME_TAC THENL
    [ REWRITE_TAC [GSYM NOT_LT] THEN REWRITE_TAC [LT_LE] THEN
        ONCE_REWRITE_TAC [ARITH_RULE `!x y:num. ~(x=y) <=> ~(y=x)`] THEN
        ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPEC_ALL ed25519_mc, ED25519_EXEC, 0, SPEC_ALL ed25519_mc, REWRITE_RULE [max_dom2_size; byte_list_at] DOM2_COMMON_CORRECT)
      [`sp + word 1384 : int64`; `word 1:int64`; `ctx_p:int64`; `ctx:byte list`; `pc:num`; `pc + 1316`; `base_const:num`; `double_const:num`; `K_base:num`] 330 THEN
    RENAME_TAC `s330:armstate` `s329_ret:armstate` THEN
    SUBGOAL_THEN `LENGTH (dom2_prefix ++ [word (val (word 1 : int64))] ++ [word (LENGTH ctx)] ++ ctx) <= 289` ASSUME_TAC THENL
    [ REWRITE_TAC [LENGTH_APPEND; LENGTH; LENGTH_DOM2_PREFIX] THEN SIMPLE_ARITH_TAC; ALL_TAC ] THEN
    ABBREV_TAC `dom2_len = LENGTH (dom2_prefix ++ [word (val (word 1 : int64))] ++ [word (LENGTH ctx)] ++ ctx)` THEN
    ARM_STEPS_TAC ED25519_EXEC (330--332) THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
       SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, SHA512_INIT)
      [`sp + word 1688:int64`; `pc + 0x8eb8`; `pc + 1328`; `K_base:num`] 333 THEN
    RENAME_TAC `s333:armstate` `s332_ret:armstate` THEN
    UNDISCH_THEN `sha512_ctx_at [] (sp + word 1688) s332_ret` MP_TAC THEN
    EXPAND_SHA512_SPECS_TAC THEN
    ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `[]:byte list` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
    STRIP_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC (333--336) THEN
    SUBGOAL_THEN `sha512_ctx_at [] (sp + word 1688) s336` ASSUME_TAC THENL
    [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
    ASSUME_TAC (CONJUNCT1 LENGTH) THEN
    SUBGOAL_THEN `adrp_within_bounds (word K_base) (word ((pc + 36536) + 272))` ASSUME_TAC THENL
    [ ASM_REWRITE_TAC [GSYM ADD_ASSOC; ARITH]; ALL_TAC ] THEN
    SUBGOAL_THEN `0 + LENGTH (msg:byte list) < 2 EXP 125` ASSUME_TAC THENL
    [ SIMPLE_ARITH_TAC; ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
       SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_UPDATE)
      [`sp + word 1344:int64`; `sp + word 1688:int64`; `[]:byte list`; `msg_p:int64`; `msg:byte list`;
       `pc + 0x8eb8`; `pc + 1344`; `K_base : num`] 337 THEN
    RENAME_TAC `s337:armstate` `s336_ret:armstate` THEN
    MP_TAC (ASSUME `sha512_ctx_at ([] ++ msg) (sp + word 1688) s336_ret`) THEN
    REWRITE_TAC [APPEND] THEN
    EXPAND_SHA512_SPECS_TAC THEN
    ASM_REWRITE_TAC [] THEN
    STRIP_TAC THEN
    ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `msg:byte list` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
    ARM_STEPS_TAC ED25519_EXEC (337--339) THEN
    SUBGOAL_THEN `sha512_ctx_at msg (sp + word 1688) s339` ASSUME_TAC THENL
    [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
    SUBGOAL_THEN `LENGTH (msg:byte list) < 2 EXP 125` ASSUME_TAC THENL
    [ SIMPLE_ARITH_TAC; ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
       SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_FINAL)
      [`sp + word 1344:int64`; `sp + word 1904:int64`; `sp + word 1688:int64`; `msg:byte list`;
       `pc + 0x8eb8`; `pc + 1356`; `K_base : num`] 340 THEN
    RENAME_TAC `s340:armstate` `s339_ret:armstate` THEN
    RULE_ASSUM_TAC (REWRITE_RULE [LENGTH_SHA512_PAD]) THEN
    ARM_STEPS_TAC ED25519_EXEC (340--346) THEN
    RULE_ASSUM_TAC (REWRITE_RULE [WORD_ARITH `word (val (word 1:int64)):byte = word 1`]) THEN
    SUBGOAL_THEN `dom2_prefix ++ [word 1] ++ [word (LENGTH ctx)] ++ ctx = dom2_of 2 ctx` (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th])) THENL
    [ REWRITE_TAC [dom2_of; phflag; ARITH]; ALL_TAC ] THEN
    SUBGOAL_THEN `dom2_valid 2 ctx` ASSUME_TAC THENL
    [ REWRITE_TAC [dom2_valid; ARITH] THEN ASM_REWRITE_TAC [GSYM LENGTH_EQ_NIL]; ALL_TAC] THEN
    ASSUME_TAC ED25519_PH THEN
    ASSUME_TAC LENGTH_SHA512_PAD THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPEC_ALL ed25519_mc, ED25519_EXEC, 0,
        SPEC_ALL ed25519_mc, (REWRITE_RULE [byte_list_at; constants_at; bytes_loaded] ED25519_SIGN_COMMON_CORRECT))
      [`sp + word 1344 : int64`; `sig_p:int64`; `sp + word 1904:int64`; `msg:byte list`; `priv_key_p:int64`; `seed:byte list`;
        `sp + word 1384:int64`; `2`; `ctx:byte list`; `pc:num`; `pc + 1384`; `base_const:num`; `double_const:num`; `K_base:num`] 347 THEN
    RENAME_TAC `s347:armstate` `s346_ret:armstate` THEN
    ARM_STEPS_TAC ED25519_EXEC (347--348) THEN
    ARM_STEPS_TAC ED25519_EXEC (350--354) THEN
    ENSURES_FINAL_STATE_TAC THEN
    ASM_REWRITE_TAC []);;

(* int ed25519_verify_common(
    const uint8_t *message, size_t message_len,
    const uint8_t signature[ED25519_SIGNATURE_LEN],
    const uint8_t public_key[ED25519_PUBLIC_KEY_LEN],
    uint8_t *dom2_buffer, size_t dom2_buffer_len) *)
let ED25519_VERIFY_COMMON_CORRECT = prove
  (`!sp msg_p msg sig_p sig A_p A dom2_buf_p alg ctx pc retpc base_const double_const K_base.
    aligned 16 sp /\
    adrp_within_bounds (word double_const) (word (pc + 0x3b20)) /\
    adrp_within_bounds (word double_const) (word (pc + 0x41d4)) /\
    adrp_within_bounds (word K_base) (word (pc + 0x8fc8)) /\
    PAIRWISE nonoverlapping [(word pc, 37844); (msg_p, LENGTH (ph alg msg)); (sig_p, 64); (A_p, 32);
      (dom2_buf_p, LENGTH (dom2_of alg ctx)); (word_sub sp (word 2224), 2224); (word double_const, 768); (word K_base, 640)] /\
    LENGTH (ph alg msg) < 2 EXP 64 /\
    LENGTH sig = 64 /\
    LENGTH A = 32 /\
    dom2_valid alg ctx ==>
    ensures arm
    (\s. aligned_bytes_loaded s (word pc) (ed25519_mc pc base_const double_const K_base) /\
         read PC s = word (pc + 0x1e4) /\
         read SP s = sp /\
         read X30 s = word retpc /\
         C_ARGUMENTS [msg_p; word (LENGTH (ph alg msg)); sig_p; A_p; dom2_buf_p; word (LENGTH (dom2_of alg ctx))] s /\
         byte_list_at (ph alg msg) msg_p s /\
         byte_list_at sig sig_p s /\
         byte_list_at A A_p s /\
         byte_list_at (dom2_of alg ctx) dom2_buf_p s /\
         bytes_loaded s (word double_const) edwards25519_scalarmuldouble_alt_constant_data /\
         constants_at (word K_base) s)
    (\s. read PC s = word retpc /\
         if verify_args_valid A sig /\ verify alg ctx A sig msg
            then C_RETURN s = word 1
            else C_RETURN s = word 0)
    (MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI ,,
     MAYCHANGE [memory :> bytes(word_sub sp (word 2224), 2224)])`,
  REWRITE_TAC[MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI; NONOVERLAPPING_CLAUSES; PAIRWISE; ALL;
      constants_at; bytes_loaded; C_ARGUMENTS; C_RETURN] THEN
    WORD_FORALL_OFFSET_TAC 2224 THEN
    REPEAT STRIP_TAC THEN
    ENSURES_EXISTING_PRESERVED_TAC `SP` THEN
    ENSURES_EXISTING_PRESERVED_TAC `X30` THEN
    ENSURES_PRESERVED_TAC "x19_init" `X19` THEN
    ENSURES_PRESERVED_TAC "x20_init" `X20` THEN
    ENSURES_PRESERVED_TAC "x21_init" `X21` THEN
    ENSURES_PRESERVED_TAC "x22_init" `X22` THEN
    ENSURES_PRESERVED_TAC "x23_init" `X23` THEN
    ENSURES_PRESERVED_TAC "x24_init" `X24` THEN

    SUBGOAL_THEN `LENGTH edwards25519_scalarmuldouble_alt_constant_data = 768`
      (fun th -> REWRITE_TAC [th] THEN ASSUME_TAC th) THENL
    [ REWRITE_TAC [LENGTH; edwards25519_scalarmuldouble_alt_constant_data] THEN
        CONV_TAC NUM_REDUCE_CONV;
      ALL_TAC ] THEN
    ENSURES_INIT_TAC "s121" THEN
    SUBGOAL_THEN `byte_list_at (SUB_LIST (0, 32) sig ++ SUB_LIST (0 + 32, 32) sig) sig_p s121` MP_TAC THENL 
    [ REWRITE_TAC [GSYM SUB_LIST_SPLIT; ARITH] THEN
        SUBGOAL_THEN `64 = LENGTH (sig:byte list)` (fun th -> REWRITE_TAC [th]) THENL
        [ ASM_REWRITE_TAC []; ALL_TAC ] THEN
        REWRITE_TAC [SUB_LIST_LENGTH] THEN
        ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    ASM_REWRITE_TAC [BYTE_LIST_AT_APPEND; ARITH; LENGTH_SUB_LIST; BYTE_LIST_AT_NUM_OF_BYTELIST; MIN] THEN
    STRIP_TAC THEN
    UNDISCH_THEN `byte_list_at A A_p s121` (fun th -> MP_TAC th THEN ASSUME_TAC th) THEN
    REWRITE_TAC [BYTE_LIST_AT_NUM_OF_BYTELIST] THEN
    ASM_REWRITE_TAC [] THEN DISCH_TAC THEN

    RULE_ASSUM_TAC (REWRITE_RULE [byte_list_at]) THEN
    UNDISCH_THEN `LENGTH (sig:byte list) = 64` (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th]) THEN ASSUME_TAC th) THEN
    UNDISCH_THEN `LENGTH (A:byte list) = 32` (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th]) THEN ASSUME_TAC th) THEN
    ARM_STEPS_TAC ED25519_EXEC (122--150) THEN
    SUBGOAL_THEN `bignum_from_memory(sp + word 1752, 4) s150 = n_25519` MP_TAC THENL
    [ REWRITE_TAC [BIGNUM_FROM_MEMORY; NUMSEG_LT; ARITH] THEN
        CONV_TAC (ONCE_DEPTH_CONV EXPAND_NSUM_CONV) THEN
        CONV_TAC (TOP_DEPTH_CONV NUM_MULT_CONV) THEN
        REWRITE_TAC [GSYM WORD_ADD_ASSOC; GSYM WORD_ADD] THEN
        CONV_TAC (TOP_DEPTH_CONV NUM_ADD_CONV) THEN
        ASM_REWRITE_TAC [n_25519] THEN
        SIMP_TAC [VAL_WORD_EQ; DIMINDEX_64; ARITH];
      ALL_TAC ] THEN
    REWRITE_TAC [BIGNUM_FROM_MEMORY_BYTES] THEN DISCH_TAC THEN
    VAL_INT64_TAC `4` THEN
    ASSUME_TAC (ARITH_RULE `8 * 4 = 32`) THEN
    ARM_SUBROUTINE_SIM_TAC (SPEC_ALL ed25519_mc, ED25519_EXEC, 0x624, bignum_le_mc, BIGNUM_LE_SUBROUTINE_CORRECT)
      [`word 4:int64`; `sp + word 1752:int64`; `n_25519:num`;
       `word 4:int64`; `sig_p + word 32:int64`; `num_of_bytelist (SUB_LIST (32,32) sig)`;
       `pc + 0x624`; `word (pc + 600):int64`] 151 THEN
    RENAME_TAC `s151:armstate` `s150_ret:armstate` THEN
    ARM_STEPS_TAC ED25519_EXEC [151] THEN
    POP_ASSUM MP_TAC THEN COND_CASES_TAC THENL
    [ (* n_25519 is less than or equal to the second half of the signature (invalid) *)
      REWRITE_TAC [verify_args_valid; sig_valid] THEN
        SUBGOAL_THEN `~(num_of_bytelist (SUB_LIST (32,32) sig) < n_25519)` (fun th -> REWRITE_TAC [th]) THENL
        [ REWRITE_TAC [NOT_LT] THEN POP_ASSUM MP_TAC THEN
            COND_CASES_TAC THEN WORD_ARITH_TAC;
          ALL_TAC ] THEN
        STRIP_TAC THEN
        ARM_STEPS_TAC ED25519_EXEC (208--214) THEN
        ENSURES_FINAL_STATE_TAC THEN
        ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    (* the second half of the signature is valid *)
    SUBGOAL_THEN `num_of_bytelist (SUB_LIST (32,32) sig) < n_25519` ASSUME_TAC THENL
    [ REWRITE_TAC [GSYM NOT_LE] THEN POP_ASSUM MP_TAC THEN
        COND_CASES_TAC THEN WORD_ARITH_TAC; ALL_TAC ] THEN
    STRIP_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC (152--154) THEN
    ARM_SUBROUTINE_SIM_TAC (SPEC_ALL ed25519_mc, ED25519_EXEC, 2872, edwards25519_decode_alt_mc, EDWARDS25519_DECODE_ALT_SUBROUTINE_CORRECT)
      [`sp + word 1784:int64`; `A_p:int64`; `num_of_bytelist A`;
       `pc + 2872`; `sp + word 1696:int64`; `word (pc + 616):int64`] 155 THEN
    RENAME_TAC `s155:armstate` `s154_ret:armstate` THEN
    ARM_STEPS_TAC ED25519_EXEC [155] THEN
    POP_ASSUM MP_TAC THEN REWRITE_TAC [VAL_WORD_BITVAL] THEN
    COND_CASES_TAC THENL
    [ (* A is not the valid encoding of a point on the curve *)
      POP_ASSUM MP_TAC THEN
        REWRITE_TAC [bitval] THEN
        COND_CASES_TAC THENL [ ALL_TAC; ARITH_TAC ] THEN
        ASM_REWRITE_TAC [verify_args_valid; ed25519_valid_bytelist] THEN
        REPEAT STRIP_TAC THEN
        ARM_STEPS_TAC ED25519_EXEC (208--214) THEN
        ENSURES_FINAL_STATE_TAC THEN
        ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    (* A is the valid encoding of a point on the curve *)
    SUBGOAL_THEN `ed25519_validencode (num_of_bytelist A)` ASSUME_TAC THENL
    [ POP_ASSUM MP_TAC THEN
        REWRITE_TAC [bitval] THEN
        COND_CASES_TAC THEN ARITH_TAC;
      ALL_TAC ] THEN
    STRIP_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC (156--157) THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
       SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, SHA512_INIT)
      [`sp + word 1848:int64`; `pc + 0x8eb8`; `pc + 628`; `K_base:num`] 158 THEN
    RENAME_TAC `s158:armstate` `s157_ret:armstate` THEN
    UNDISCH_THEN `sha512_ctx_at [] (sp + word 1848) s157_ret` MP_TAC THEN
    EXPAND_SHA512_SPECS_TAC THEN
    ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `[]:byte list` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
    STRIP_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC [158] THEN
    POP_ASSUM MP_TAC THEN
    IMP_REWRITE_TAC [VAL_WORD_EQ; DIMINDEX_64] THEN
    MP_TAC (REWRITE_RULE [max_dom2_size] (SPEC_ALL MAX_VALID_DOM2_SIZE)) THEN
    ASM_REWRITE_TAC [] THEN DISCH_TAC THEN
    ANTS_TAC THENL
    [ MATCH_MP_TAC LET_TRANS THEN EXISTS_TAC `289` THEN ASM_REWRITE_TAC [ARITH]; ALL_TAC ] THEN
    COND_CASES_TAC THENL
    [ (* dom2_buffer empty *)
      SUBGOAL_THEN `[] = dom2_of alg ctx` (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th])) THENL
        [ FIRST_ASSUM (MP_TAC o REWRITE_RULE [LENGTH_EQ_NIL]) THEN
            DISCH_THEN (fun th -> REWRITE_TAC [th]);
          ALL_TAC ] THEN
        SUBGOAL_THEN `sha512_ctx_at (dom2_of alg ctx) (sp + word 1848) s158` MP_TAC THENL
        [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC [];
          ALL_TAC];
      (* dom2_buffer non-empty, hash dom2_buffer *)
      STRIP_TAC THEN
        ASSUM_EXPAND_SHA512_SPECS_TAC THEN
        ARM_STEPS_TAC ED25519_EXEC (159--162) THEN
        SUBGOAL_THEN `sha512_ctx_at [] (sp + word 1848) s162` ASSUME_TAC THENL
        [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
        ASSUME_TAC (CONJUNCT1 LENGTH) THEN
        SUBGOAL_THEN `LENGTH (dom2_of alg ctx) < 2 EXP 64 /\ 0 + LENGTH (dom2_of alg ctx) < 2 EXP 125` ASSUME_TAC THENL
        [ SIMPLE_ARITH_TAC; ALL_TAC ] THEN
        SUBGOAL_THEN `adrp_within_bounds (word K_base) (word ((pc + 36536) + 272))` ASSUME_TAC THENL
        [ ASM_REWRITE_TAC [GSYM ADD_ASSOC; ARITH]; ALL_TAC ] THEN
        ARM_SUBROUTINE_SIM_TAC
          (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
          SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_UPDATE)
          [`sp + word 1696:int64`; `sp + word 1848:int64`; `[]:byte list`; `dom2_buf_p:int64`;
          `dom2_of alg ctx`; `pc + 0x8eb8`; `pc + 648`; `K_base : num`] 163 THEN
        RENAME_TAC `s163:armstate` `s162_ret:armstate` THEN
        UNDISCH_THEN `sha512_ctx_at ([] ++ dom2_of alg ctx) (sp + word 1848) s162_ret` MP_TAC THEN
        REWRITE_TAC [APPEND] ] THEN
    (* dom2_buffer has been hashed in both cases *)
    (EXPAND_SHA512_SPECS_TAC THEN
    REPEAT STRIP_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC (163--166) THEN
    SUBGOAL_THEN `sha512_ctx_at (dom2_of alg ctx)  (sp + word 1848) s166` ASSUME_TAC THENL
    [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
    SUBGOAL_THEN `LENGTH (SUB_LIST (0,32) sig:byte list) = 32 /\ LENGTH (dom2_of alg ctx) + 32 < 2 EXP 125` STRIP_ASSUME_TAC THENL
    [ REWRITE_TAC [LENGTH_SUB_LIST] THEN SIMPLE_ARITH_TAC; ALL_TAC ] THEN
    SUBGOAL_THEN `adrp_within_bounds (word K_base) (word ((pc + 36536) + 272))` ASSUME_TAC THENL
    [ ASM_REWRITE_TAC [GSYM ADD_ASSOC; ARITH]; ALL_TAC ] THEN
    SUBGOAL_THEN `byte_list_at (SUB_LIST (0,32) sig) sig_p s166` MP_TAC THENL
    [ ASM_REWRITE_TAC [BYTE_LIST_AT_NUM_OF_BYTELIST]; ALL_TAC ] THEN
    ASM_REWRITE_TAC [byte_list_at] THEN DISCH_TAC THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
      SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_UPDATE)
      [`sp + word 1696:int64`; `sp + word 1848:int64`; `dom2_of alg ctx`; `sig_p:int64`;
       `SUB_LIST (0,32) sig:byte list`; `pc + 0x8eb8`; `pc + 664`; `K_base : num`] 167 THEN
    RENAME_TAC `s167:armstate` `s166_ret:armstate` THEN
    UNDISCH_THEN `sha512_ctx_at (dom2_of alg ctx ++ SUB_LIST (0,32) sig) (sp + word 1848) s166_ret` MP_TAC THEN
    EXPAND_SHA512_SPECS_TAC THEN STRIP_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC (167--170) THEN
    SUBGOAL_THEN `sha512_ctx_at (dom2_of alg ctx ++ SUB_LIST (0,32) sig) (sp + word 1848) s170` ASSUME_TAC THENL
    [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
    SUBGOAL_THEN `LENGTH (dom2_of alg ctx ++ SUB_LIST (0,32) sig) + 32 < 2 EXP 125` ASSUME_TAC THENL
    [ ASM_REWRITE_TAC [LENGTH_APPEND] THEN SIMPLE_ARITH_TAC; ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
      SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_UPDATE)
      [`sp + word 1696:int64`; `sp + word 1848:int64`; `dom2_of alg ctx ++ SUB_LIST (0,32) sig`; `A_p:int64`;
       `A:byte list`; `pc + 0x8eb8`; `pc + 680`; `K_base : num`] 171 THEN
    RENAME_TAC `s171:armstate` `s170_ret:armstate` THEN
    UNDISCH_THEN `sha512_ctx_at ((dom2_of alg ctx ++ SUB_LIST (0,32) sig) ++ A) (sp + word 1848) s170_ret` MP_TAC THEN
    REWRITE_TAC [GSYM APPEND_ASSOC] THEN
    EXPAND_SHA512_SPECS_TAC THEN STRIP_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC (171--174) THEN
    SUBGOAL_THEN `sha512_ctx_at (dom2_of alg ctx ++ SUB_LIST (0,32) sig ++ A) (sp + word 1848) s174` ASSUME_TAC THENL
    [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
    SUBGOAL_THEN `LENGTH (dom2_of alg ctx ++ SUB_LIST (0,32) sig ++ A) + LENGTH (ph alg msg) < 2 EXP 125` ASSUME_TAC THENL
    [ ASM_REWRITE_TAC [LENGTH_APPEND] THEN SIMPLE_ARITH_TAC; ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
      SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_UPDATE)
      [`sp + word 1696:int64`; `sp + word 1848:int64`; `dom2_of alg ctx ++ SUB_LIST (0,32) sig ++ A`; `msg_p:int64`;
       `ph alg msg:byte list`; `pc + 0x8eb8`; `pc + 696`; `K_base : num`] 175 THEN
    RENAME_TAC `s175:armstate` `s174_ret:armstate` THEN
    UNDISCH_THEN `sha512_ctx_at ((dom2_of alg ctx ++ SUB_LIST (0,32) sig ++ A) ++ ph alg msg) (sp + word 1848) s174_ret` MP_TAC THEN
    REWRITE_TAC [GSYM APPEND_ASSOC] THEN
    EXPAND_SHA512_SPECS_TAC THEN STRIP_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC (175--177) THEN
    SUBGOAL_THEN `sha512_ctx_at (dom2_of alg ctx ++ SUB_LIST (0,32) sig ++ A ++ ph alg msg) (sp + word 1848) s177` ASSUME_TAC THENL
    [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
    SUBGOAL_THEN `LENGTH (dom2_of alg ctx ++ SUB_LIST (0,32) sig ++ A ++ ph alg msg) < 2 EXP 125` ASSUME_TAC THENL
    [ ASM_REWRITE_TAC [LENGTH_APPEND] THEN SIMPLE_ARITH_TAC; ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
      SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_FINAL)
      [`sp + word 1696:int64`; `sp + word 2064:int64`; `sp + word 1848:int64`;
      `dom2_of alg ctx ++ SUB_LIST (0,32) sig ++ A ++ ph alg msg`;
      `pc + 0x8eb8`; `pc + 708`; `K_base : num`] 178 THEN
    RENAME_TAC `s178:armstate` `s177_ret:armstate` THEN
    RULE_ASSUM_TAC (CONV_RULE (TOP_DEPTH_CONV NUM_MULT_CONV)) THEN
    ABBREV_TAC `bytelist_k = sha512_pad (dom2_of alg ctx ++ SUB_LIST (0,32) sig ++ A ++ ph alg msg)` THEN
    SUBGOAL_THEN `LENGTH (bytelist_k:byte list) = 64` MP_TAC THENL
    [ POP_ASSUM (fun th -> REWRITE_TAC [GSYM th; LENGTH_SHA512_PAD]); ALL_TAC ] THEN
    DISCH_THEN (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th]) THEN ASSUME_TAC th) THEN
    ARM_STEPS_TAC ED25519_EXEC (178--180) THEN
    ABBREV_TAC `dec_A = ed25519_decode (num_of_bytelist A)` THEN
    SUBGOAL_THEN `read (memory :> bytes (sp + word 1784,(8*4))) s180, read (memory :> bytes ((sp + word 1784) + word 32,8*4)) s180 =
      paired (modular_encode (256,p_25519)) dec_A` MP_TAC THENL
    [ ASM_SIMP_TAC [ARITH]; ALL_TAC ] THEN
    ONCE_REWRITE_TAC [GSYM (ISPEC `dec_A:int#int` PAIR)] THEN
    REWRITE_TAC [paired; PAIR_EQ; modular_encode] THEN STRIP_TAC THEN 
    ARM_SUBROUTINE_SIM_TAC
      (ed25519_mc, ED25519_EXEC, 2792, bignum_neg_p25519_mc, BIGNUM_NEG_P25519_SUBROUTINE_CORRECT)
      [`sp + word 1784:int64`; `sp + word 1784:int64`; `num_of_int (FST (dec_A:int#int) rem &p_25519)`;
       `pc + 2792`; `word (pc + 720):int64`] 181 THEN
    RENAME_TAC `s181:armstate` `s180_ret:armstate` THEN
    ARM_STEPS_TAC ED25519_EXEC (181--184) THEN
    SUBGOAL_THEN `read (memory :> bytes (sp + word 2064,LENGTH bytelist_k)) s184 = num_of_bytelist bytelist_k` MP_TAC THENL
    [ REWRITE_TAC [GSYM BYTE_LIST_AT_NUM_OF_BYTELIST] THEN
        ASM_REWRITE_TAC [byte_list_at; GSYM WORD_ADD; GSYM WORD_ADD_ASSOC];
      ALL_TAC ] THEN
    ASM_REWRITE_TAC [WORD_ARITH `64 = 8 * val (word 8:int64)`] THEN
    DISCH_TAC THEN
    ARM_SUBROUTINE_SIM_TAC
        (ed25519_mc, ED25519_EXEC, 2488,
        bignum_mod_n25519_mc, BIGNUM_MOD_N25519_SUBROUTINE_CORRECT)
        [`sp + word 2064:int64`; `word 8:int64`; `sp + word 2064:int64`;
        `num_of_bytelist bytelist_k`; `pc + 2488`; `word (pc + 736):int64`] 185 THEN
      RENAME_TAC `s185:armstate` `s184_ret:armstate` THEN
      ARM_STEPS_TAC ED25519_EXEC (185--189) THEN
    SUBGOAL_THEN `adrp_within_bounds (word double_const) (word ((pc + 14352) + 784)) /\
      adrp_within_bounds (word double_const) (word ((pc + 14352) + 2500))` ASSUME_TAC THENL
    [ ASM_REWRITE_TAC [GSYM ADD_ASSOC; ARITH]; ALL_TAC ] THEN
    SUBGOAL_THEN `~(&p_25519 = &0:int)` ASSUME_TAC THENL
    [ REWRITE_TAC [p_25519] THEN INT_ARITH_TAC; ALL_TAC ] THEN
    SUBGOAL_THEN `num_of_int (FST (dec_A:int#int) rem &p_25519) <= p_25519` ASSUME_TAC THENL
    [ REWRITE_TAC [GSYM INT_OF_NUM_LE] THEN
        POP_ASSUM (ASSUME_TAC o MATCH_MP INT_REM_POS) THEN
        ASM_SIMP_TAC [INT_OF_NUM_OF_INT] THEN
        MATCH_MP_TAC INT_LT_IMP_LE THEN
        MATCH_MP_TAC INT_LT_REM THEN
        REWRITE_TAC [p_25519] THEN
        ARITH_TAC;
      ALL_TAC ] THEN
    ASSUME_TAC (ARITH_RULE `8 * 4 = 32`) THEN
    SUBGOAL_THEN `read (memory :> bytes (sp + word 1784,32)) s189, read (memory :> bytes ((sp + word 1784) + word 32,32)) s189 =
      (p_25519 - num_of_int (FST dec_A rem &p_25519)) MOD p_25519, num_of_int (SND dec_A rem &p_25519)` ASSUME_TAC THENL
    [ RULE_ASSUM_TAC (CONV_RULE (TOP_DEPTH_CONV NUM_MULT_CONV)) THEN ASM_SIMP_TAC [PAIR_EQ]; ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 14352,
      SPECL [`pc + 14352`; `double_const:num`] edwards25519_scalarmuldouble_alt_mc,
      ASM_REWRITE_RULE [bytes_loaded] EDWARDS25519_SCALARMULDOUBLE_ALT_SUBROUTINE_CORRECT)
      [`double_const:num`; `sp + word 2128:int64`; `sp + word 2064:int64`; `sp + word 1784:int64`; `sig_p + word 32:int64`;
      `num_of_bytelist bytelist_k MOD n_25519`; `(p_25519 - num_of_int (FST dec_A rem &p_25519)) MOD p_25519, num_of_int (SND dec_A rem &p_25519)`;
      `num_of_bytelist (SUB_LIST (32,32) sig)`; `pc + 14352`; `sp + word 1696:int64`; `word (pc + 756):int64`] 190 THEN
      RENAME_TAC `s190:armstate` `s189_ret:armstate` THEN
    SUBGOAL_THEN `dec_A IN group_carrier edwards25519_group` ASSUME_TAC THENL
    [ FIRST_X_ASSUM (MP_TAC o MATCH_MP ED25519_ENCODE_DECODE) THEN
        ASM_SIMP_TAC [];
      ALL_TAC ] THEN
    FIRST_X_ASSUM (MP_TAC o SPEC `group_inv edwards25519_group dec_A`) THEN
    ANTS_TAC THENL
    [ ASM_SIMP_TAC [GROUP_INV] THEN
        REWRITE_TAC [EDWARDS25519_GROUP] THEN
        GEN_REWRITE_TAC (RAND_CONV o RAND_CONV o ONCE_DEPTH_CONV) [GSYM PAIR] THEN
        PURE_REWRITE_TAC [edwards_neg; paired; modular_decode] THEN
        SIMP_TAC [NUM_OF_INT_REM_REM; P25519_NEQ_0] THEN
        FIRST_ASSUM(MP_TAC o GEN_REWRITE_RULE RAND_CONV [EDWARDS25519_GROUP]) THEN
        REWRITE_TAC [IN] THEN
        GEN_REWRITE_TAC (LAND_CONV o RAND_CONV o ONCE_DEPTH_CONV) [GSYM PAIR] THEN
        REWRITE_TAC [edwards_curve] THEN
        REWRITE_TAC [IN_INTEGER_MOD_RING_CARRIER] THEN
        REWRITE_TAC [P25519_NEQ_0; INT_OF_NUM_EQ] THEN
        STRIP_TAC THEN REWRITE_TAC [INTEGER_MOD_RING] THEN
        ASM_SIMP_TAC [PAIR_EQ] THEN
        ASM_REWRITE_TAC [INT_REM_EQ_SELF; INT_ABS_NUM] THEN
        REWRITE_TAC [GSYM INT_OF_NUM_REM; INT_REM_REM] THEN
        ASM_SIMP_TAC [GSYM INT_OF_NUM_SUB] THEN
        REWRITE_TAC [INT_ARITH `p - n = p * &1 + (--n):int`] THEN
        REWRITE_TAC [INT_REM_MUL_ADD] THEN
        ASM_SIMP_TAC [INT_OF_NUM_OF_INT; INT_REM_POS_EQ; INT_OF_NUM_EQ] THEN
        CONV_TAC INT_REM_DOWN_CONV THEN
        REFL_TAC;
      ALL_TAC ] THEN
    GEN_REWRITE_TAC (LAND_CONV o RAND_CONV o RAND_CONV o ONCE_DEPTH_CONV) [GSYM PAIR] THEN
    PURE_REWRITE_TAC [paired] THEN
    DISCH_TAC THEN
    ABBREV_TAC `computed_R = group_mul edwards25519_group
      (group_pow edwards25519_group (group_inv edwards25519_group dec_A)
      (num_of_bytelist bytelist_k MOD n_25519))
      (group_pow edwards25519_group E_25519
      (num_of_bytelist (SUB_LIST (32,32) sig)))` THEN
    POP_ASSUM (LABEL_TAC "Heq_R") THEN
    SUBGOAL_THEN `computed_R IN group_carrier edwards25519_group` ASSUME_TAC THENL
    [ USE_THEN "Heq_R" (fun th -> REWRITE_TAC [GSYM th]) THEN
        MATCH_MP_TAC GROUP_MUL THEN STRIP_TAC THEN
        MATCH_MP_TAC GROUP_POW THENL
        [ MATCH_MP_TAC GROUP_INV THEN ASM_REWRITE_TAC [];
          REWRITE_TAC [GENERATOR_IN_GROUP_CARRIER_EDWARDS25519] ];
      ALL_TAC ] THEN
    ARM_STEPS_TAC ED25519_EXEC (190--192) THEN
    ARM_SUBROUTINE_SIM_TAC
      (ed25519_mc, ED25519_EXEC, 4840, edwards25519_encode_mc, EDWARDS25519_ENCODE_SUBROUTINE_CORRECT)
      [`sp + word 2192:int64`; `sp + word 2128:int64`;
       `modular_encode (256,p_25519) (FST (computed_R:int#int))`;
       `modular_encode (256,p_25519) (SND (computed_R:int#int))`;
       `pc + 4840`; `word (pc + 768):int64`] 193 THEN
    RENAME_TAC `s193:armstate` `s192_ret:armstate` THEN
    RULE_ASSUM_TAC (REWRITE_RULE [REWRITE_RULE [GSYM MODULAR_ENCODE] P25519_NEQ_0]) THEN
    RULE_ASSUM_TAC (REWRITE_RULE [ED25519_ENCODE_MODULAR_ENCODE_P25519]) THEN
    ABBREV_TAC `expected_R0 = read (memory :> bytes64 sig_p) s192_ret` THEN
    ABBREV_TAC `expected_R1 = read (memory :> bytes64 (sig_p + word 8)) s192_ret` THEN
    ABBREV_TAC `expected_R2 = read (memory :> bytes64 (sig_p + word 16)) s192_ret` THEN
    ABBREV_TAC `expected_R3 = read (memory :> bytes64 (sig_p + word 24)) s192_ret` THEN
    ABBREV_TAC `computed_R0 = read (memory :> bytes64 (sp + word 2192)) s192_ret` THEN
    ABBREV_TAC `computed_R1 = read (memory :> bytes64 (sp + word 2200)) s192_ret` THEN
    ABBREV_TAC `computed_R2 = read (memory :> bytes64 (sp + word 2208)) s192_ret` THEN
    ABBREV_TAC `computed_R3 = read (memory :> bytes64 (sp + word 2216)) s192_ret` THEN
    SUBGOAL_THEN `byte_list_at (int64_to_bytes expected_R0 ++ int64_to_bytes expected_R1 ++
      int64_to_bytes expected_R2 ++ int64_to_bytes expected_R3) sig_p s192_ret` MP_TAC THENL
    [ REWRITE_TAC [BYTE_LIST_AT_APPEND] THEN
        ASM_REWRITE_TAC [GSYM INT64_BYTE_LIST; LENGTH_INT64_TO_BYTES; ARITH; GSYM WORD_ADD_ASSOC; GSYM WORD_ADD];
      ALL_TAC ] THEN
    REWRITE_TAC [BYTE_LIST_AT_NUM_OF_BYTELIST; LENGTH_APPEND; LENGTH_INT64_TO_BYTES] THEN
    CONV_TAC (TOP_DEPTH_CONV NUM_ADD_CONV) THEN
    ASM_REWRITE_TAC [] THEN
    DISCH_THEN (ASSUME_TAC o MATCH_MP EQ_SYM) THEN
    SUBGOAL_THEN `byte_list_at (int64_to_bytes computed_R0 ++ int64_to_bytes computed_R1 ++
      int64_to_bytes computed_R2 ++ int64_to_bytes computed_R3) (sp + word 2192) s192_ret` MP_TAC THENL
    [ REWRITE_TAC [BYTE_LIST_AT_APPEND] THEN
        ASM_REWRITE_TAC [GSYM INT64_BYTE_LIST; LENGTH_INT64_TO_BYTES; ARITH; GSYM WORD_ADD_ASSOC; GSYM WORD_ADD];
      ALL_TAC ] THEN
    REWRITE_TAC [BYTE_LIST_AT_NUM_OF_BYTELIST; LENGTH_APPEND; LENGTH_INT64_TO_BYTES] THEN
    CONV_TAC (TOP_DEPTH_CONV NUM_ADD_CONV) THEN
    SUBGOAL_THEN `read (memory :> bytes (sp + word 2192,32)) s192_ret =
      num_of_bytelist (bytelist_of_num 32 (ed25519_encode computed_R))` MP_TAC THENL
    [ GEN_REWRITE_TAC (LAND_CONV o ONCE_DEPTH_CONV)
        [GSYM (SPECL [`32`; `ed25519_encode computed_R`] LENGTH_BYTELIST_OF_NUM)] THEN
        REWRITE_TAC [GSYM BYTE_LIST_AT_NUM_OF_BYTELIST] THEN
        ASM_REWRITE_TAC [BYTE_LIST_AT_BYTELIST; LENGTH_BYTELIST_OF_NUM];
      ALL_TAC ] THEN
    SIMP_TAC [NUM_OF_BYTELIST_OF_NUM_EQ; ED25519_ENCODE_LT_256_EXP_32] THEN
    DISCH_TAC THEN
    DISCH_THEN (ASSUME_TAC o MATCH_MP EQ_SYM) THEN
    SUBGOAL_THEN `expected_R0 = computed_R0 /\ expected_R1 = computed_R1 /\ expected_R2 = computed_R2 /\ expected_R3 = computed_R3
      <=> int64_to_bytes expected_R0 ++ int64_to_bytes expected_R1 ++
        int64_to_bytes expected_R2 ++ int64_to_bytes expected_R3 =
        int64_to_bytes computed_R0 ++ int64_to_bytes computed_R1 ++
        int64_to_bytes computed_R2 ++ int64_to_bytes computed_R3` MP_TAC THENL
    [ REPEAT (POP_ASSUM (K ALL_TAC)) THEN
        REWRITE_TAC [DOUBLE_INCL] THEN STRIP_TAC THENL
        [ STRIP_TAC THEN ASM_REWRITE_TAC [];
          SIMP_TAC [LENGTH_EQ_APPEND_EQ; LENGTH_INT64_TO_BYTES; INT64_TO_BYTES_BIJECTIVE] ];
      ALL_TAC ] THEN
    SUBGOAL_THEN `LENGTH (int64_to_bytes expected_R0 ++ int64_to_bytes expected_R1 ++
      int64_to_bytes expected_R2 ++ int64_to_bytes expected_R3) =
      LENGTH (int64_to_bytes computed_R0 ++ int64_to_bytes computed_R1 ++
      int64_to_bytes computed_R2 ++ int64_to_bytes computed_R3)` MP_TAC THENL
    [ REWRITE_TAC [LENGTH_APPEND; LENGTH_INT64_TO_BYTES; ARITH]; ALL_TAC ] THEN
    DISCH_THEN (fun th -> ASM_REWRITE_TAC [GSYM (MATCH_MP LENGTH_EQ_NUM_OF_BYTELIST_BIJECTIVE th)]) THEN

    DISCH_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC (193--196) THEN
    POP_ASSUM MP_TAC THEN REWRITE_TAC [VAL_WORD_SUB_EQ_0; VAL_EQ] THEN
    COND_CASES_TAC THEN POP_ASSUM (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th])) THENL
    [ (* Verification equation does not hold *)
      DISCH_TAC THEN
        ARM_STEPS_TAC ED25519_EXEC (208--214) THEN
        ENSURES_FINAL_STATE_TAC THEN
        ASM_REWRITE_TAC [] THEN
        ASM_CASES_TAC `ed25519_validencode (num_of_bytelist (SUB_LIST (0,32) sig))` THENL
        [ ALL_TAC;
          ASM_REWRITE_TAC [verify_args_valid; sig_valid; ed25519_valid_bytelist] ] THEN
        REWRITE_TAC [verify] THEN
        CONV_TAC (TOP_DEPTH_CONV let_CONV) THEN
        ASM_REWRITE_TAC [] THEN
        MP_TAC (SPECL [`num_of_bytelist (SUB_LIST (0,32) sig)`; `computed_R:int#int`] NEQ_ED25519_ENCODE_IMP_ED25519_DECODE_NEQ) THEN
        ASM_REWRITE_TAC [] THEN DISCH_TAC THEN
        IMP_REWRITE_TAC [GSYM ED25519_VERIFICATION_EQNS_EQUIV] THEN
        UNDISCH_THEN `ed25519_validencode (num_of_bytelist (SUB_LIST (0,32) sig))` MP_TAC THEN
        MESON_TAC [ed25519_decode; ed25519_validencode];
      ALL_TAC ] THEN
    DISCH_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC (197--198) THEN
    POP_ASSUM MP_TAC THEN REWRITE_TAC [VAL_WORD_SUB_EQ_0; VAL_EQ] THEN
    COND_CASES_TAC THEN POP_ASSUM (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th])) THENL
    [ (* Verification equation does not hold *)
      DISCH_TAC THEN
        ARM_STEPS_TAC ED25519_EXEC (208--214) THEN
        ENSURES_FINAL_STATE_TAC THEN
        ASM_REWRITE_TAC [] THEN
        ASM_CASES_TAC `ed25519_validencode (num_of_bytelist (SUB_LIST (0,32) sig))` THENL
        [ ALL_TAC;
          ASM_REWRITE_TAC [verify_args_valid; sig_valid; ed25519_valid_bytelist] ] THEN
        REWRITE_TAC [verify] THEN
        CONV_TAC (TOP_DEPTH_CONV let_CONV) THEN
        ASM_REWRITE_TAC [] THEN
        MP_TAC (SPECL [`num_of_bytelist (SUB_LIST (0,32) sig)`; `computed_R:int#int`] NEQ_ED25519_ENCODE_IMP_ED25519_DECODE_NEQ) THEN
        ASM_REWRITE_TAC [] THEN DISCH_TAC THEN
        IMP_REWRITE_TAC [GSYM ED25519_VERIFICATION_EQNS_EQUIV] THEN
        UNDISCH_THEN `ed25519_validencode (num_of_bytelist (SUB_LIST (0,32) sig))` MP_TAC THEN
        MESON_TAC [ed25519_decode; ed25519_validencode];
      ALL_TAC ] THEN
    DISCH_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC (199--203) THEN
    POP_ASSUM MP_TAC THEN REWRITE_TAC [VAL_WORD_SUB_EQ_0; VAL_EQ] THEN
    COND_CASES_TAC THEN POP_ASSUM (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th])) THENL
    [ (* Verification equation does not hold *)
      DISCH_TAC THEN
        ARM_STEPS_TAC ED25519_EXEC (208--214) THEN
        ENSURES_FINAL_STATE_TAC THEN
        ASM_REWRITE_TAC [] THEN
        ASM_CASES_TAC `ed25519_validencode (num_of_bytelist (SUB_LIST (0,32) sig))` THENL
        [ ALL_TAC;
          ASM_REWRITE_TAC [verify_args_valid; sig_valid; ed25519_valid_bytelist] ] THEN
        REWRITE_TAC [verify] THEN
        CONV_TAC (TOP_DEPTH_CONV let_CONV) THEN
        ASM_REWRITE_TAC [] THEN
        MP_TAC (SPECL [`num_of_bytelist (SUB_LIST (0,32) sig)`; `computed_R:int#int`] NEQ_ED25519_ENCODE_IMP_ED25519_DECODE_NEQ) THEN
        ASM_REWRITE_TAC [] THEN DISCH_TAC THEN
        IMP_REWRITE_TAC [GSYM ED25519_VERIFICATION_EQNS_EQUIV] THEN
        UNDISCH_THEN `ed25519_validencode (num_of_bytelist (SUB_LIST (0,32) sig))` MP_TAC THEN
        MESON_TAC [ed25519_decode; ed25519_validencode];
      ALL_TAC ] THEN
    DISCH_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC (204--205) THEN
    POP_ASSUM MP_TAC THEN REWRITE_TAC [VAL_WORD_SUB_EQ_0; VAL_EQ] THEN
    COND_CASES_TAC THEN POP_ASSUM (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th])) THENL
    [ (* Verification equation does not hold *)
      DISCH_TAC THEN
        ARM_STEPS_TAC ED25519_EXEC (208--214) THEN
        ENSURES_FINAL_STATE_TAC THEN
        ASM_REWRITE_TAC [] THEN
        ASM_CASES_TAC `ed25519_validencode (num_of_bytelist (SUB_LIST (0,32) sig))` THENL
        [ ALL_TAC;
          ASM_REWRITE_TAC [verify_args_valid; sig_valid; ed25519_valid_bytelist] ] THEN
        REWRITE_TAC [verify] THEN
        CONV_TAC (TOP_DEPTH_CONV let_CONV) THEN
        ASM_REWRITE_TAC [] THEN
        MP_TAC (SPECL [`num_of_bytelist (SUB_LIST (0,32) sig)`; `computed_R:int#int`] NEQ_ED25519_ENCODE_IMP_ED25519_DECODE_NEQ) THEN
        ASM_REWRITE_TAC [] THEN DISCH_TAC THEN
        IMP_REWRITE_TAC [GSYM ED25519_VERIFICATION_EQNS_EQUIV] THEN
        UNDISCH_THEN `ed25519_validencode (num_of_bytelist (SUB_LIST (0,32) sig))` MP_TAC THEN
        MESON_TAC [ed25519_decode; ed25519_validencode];
      ALL_TAC ] THEN
    DISCH_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC (206--207) THEN
    ARM_STEPS_TAC ED25519_EXEC (209--214) THEN
    ENSURES_FINAL_STATE_TAC THEN
    ASM_REWRITE_TAC [verify_args_valid; sig_valid; ed25519_valid_bytelist] THEN
    ASM_SIMP_TAC [ED25519_VALIDENCODE_ENCODE] THEN
    REWRITE_TAC [verify] THEN
    CONV_TAC (TOP_DEPTH_CONV let_CONV) THEN
    ASM_REWRITE_TAC [] THEN
    MP_TAC (SPECL [`num_of_bytelist (SUB_LIST (0,32) sig)`; `computed_R:int#int`] EQ_ED25519_ENCODE_IMP_ED25519_DECODE_EQ) THEN
    ASM_REWRITE_TAC [] THEN DISCH_TAC THEN
    IMP_REWRITE_TAC [GSYM ED25519_VERIFICATION_EQNS_EQUIV] THEN
    UNDISCH_THEN `ed25519_validencode (num_of_bytelist (SUB_LIST (0,32) sig))` MP_TAC THEN
    MESON_TAC [ed25519_decode; ed25519_validencode] ) );;

(* int ed25519_verify_no_self_test_s2n_bignum(
    const uint8_t *message, size_t message_len,
    const uint8_t signature[ED25519_SIGNATURE_LEN],
    const uint8_t public_key[ED25519_PUBLIC_KEY_LEN]) *)
let ED25519_VERIFY_NO_SELF_TEST_S2N_BIGNUM_CORRECT = prove
  (`!sp msg_p msg sig_p sig A_p A pc retpc base_const double_const K_base.
    aligned 16 sp /\
    adrp_within_bounds (word double_const) (word (pc + 0x3b20)) /\
    adrp_within_bounds (word double_const) (word (pc + 0x41d4)) /\
    adrp_within_bounds (word K_base) (word (pc + 0x8fc8)) /\
    PAIRWISE nonoverlapping [(word pc, 37844); (msg_p, LENGTH msg); (sig_p, 64);
      (A_p, 32); (word_sub sp (word 2240), 2240); (word double_const, 768); (word K_base, 640)] /\
    LENGTH msg < 2 EXP 64 /\
    LENGTH sig = 64 /\
    LENGTH A = 32 ==>
    ensures arm
    (\s. aligned_bytes_loaded s (word pc) (ed25519_mc pc base_const double_const K_base) /\
         read PC s = word (pc + 0x374) /\
         read SP s = sp /\
         read X30 s = word retpc /\
         C_ARGUMENTS [msg_p; word (LENGTH msg); sig_p; A_p] s /\
         byte_list_at msg msg_p s /\
         byte_list_at sig sig_p s /\
         byte_list_at A A_p s /\
         bytes_loaded s (word double_const) edwards25519_scalarmuldouble_alt_constant_data /\
         constants_at (word K_base) s)
    (\s. read PC s = word retpc /\
         if verify_args_valid A sig /\ verify 0 [] A sig msg
            then C_RETURN s = word 1
            else C_RETURN s = word 0)
    (MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI ,,
     MAYCHANGE [memory :> bytes(word_sub sp (word 2240), 2240)])`,
  REWRITE_TAC[MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI; NONOVERLAPPING_CLAUSES; PAIRWISE; ALL;
      constants_at; bytes_loaded; C_ARGUMENTS; C_RETURN] THEN
    WORD_FORALL_OFFSET_TAC 2240 THEN
    REPEAT STRIP_TAC THEN
    ENSURES_EXISTING_PRESERVED_TAC `SP` THEN
    ENSURES_EXISTING_PRESERVED_TAC `X30` THEN
    ENSURES_PRESERVED_TAC "x29_init" `X29` THEN

    SUBGOAL_THEN `LENGTH edwards25519_scalarmuldouble_alt_constant_data = 768`
      (fun th -> REWRITE_TAC [th] THEN ASSUME_TAC th) THENL
    [ REWRITE_TAC [LENGTH; edwards25519_scalarmuldouble_alt_constant_data] THEN
        CONV_TAC NUM_REDUCE_CONV;
      ALL_TAC ] THEN
    ENSURES_INIT_TAC "s221" THEN
    RULE_ASSUM_TAC (REWRITE_RULE [byte_list_at]) THEN
    SUBGOAL_THEN `LENGTH (sig:byte list) = 64`
      (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th]) THEN ASSUME_TAC th) THENL
    [ ASM_REWRITE_TAC []; ALL_TAC ] THEN
    ARM_STEPS_TAC ED25519_EXEC (222--225) THEN
    ASSUME_TAC ED25519_PH THEN
    ASSUME_TAC dom2_of THEN
    ASSUME_TAC (CONJUNCT1 LENGTH) THEN
    SUBGOAL_THEN `dom2_valid 0 []` ASSUME_TAC THENL
    [ REWRITE_TAC [dom2_valid; ARITH; LENGTH]; ALL_TAC ] THEN
    ASSUME_TAC NONOVERLAPPING_MODULO_LEN_0 THEN
    ASSUME_TAC (REWRITE_RULE [byte_list_at; LENGTH] BYTE_LIST_AT_NIL) THEN
    SUBGOAL_THEN `LENGTH (A:byte list) = 32`
      (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th]) THEN ASSUME_TAC th) THENL
    [ ASM_REWRITE_TAC []; ALL_TAC ] THEN
    SUBGOAL_THEN `aligned 16 (sp + word 2224:int64)` ASSUME_TAC THENL
    [ ALIGNED_WORD_TAC; ALL_TAC ] THEN
    SUBGOAL_THEN `nonoverlapping_modulo (2 EXP 64) (pc,37844) (val (sp:int64),2224) /\
      nonoverlapping_modulo (2 EXP 64) (val (msg_p:int64),LENGTH (msg:byte list)) (val sp,2224) /\
      nonoverlapping_modulo (2 EXP 64) (val (sig_p:int64),64) (val sp,2224) /\
      nonoverlapping_modulo (2 EXP 64) (val (A_p:int64),32) (val sp,2224) /\
      nonoverlapping_modulo (2 EXP 64) (val sp,2224) (K_base,640) /\
      nonoverlapping_modulo (2 EXP 64) (val sp,2224) (double_const,768)` ASSUME_TAC THENL
    [ REPEAT CONJ_TAC THEN TRY NONOVERLAPPING_TAC; ALL_TAC ] THEN (* ??? *)
    ARM_SUBROUTINE_SIM_TAC
      (SPEC_ALL ed25519_mc, ED25519_EXEC, 0,
        SPEC_ALL ed25519_mc, (REWRITE_RULE [byte_list_at; constants_at; bytes_loaded] ED25519_VERIFY_COMMON_CORRECT))
      [`sp + word 2224 : int64`; `msg_p:int64`; `msg:byte list`; `sig_p:int64`; `sig:byte list`;
        `A_p:int64`; `A:byte list`; `word 0:int64`; `0`; `[]:byte list`; `pc:num`; `pc + 900`; `base_const:num`; `double_const:num`; `K_base:num`] 226 THEN
    RENAME_TAC `s226:armstate` `s225_ret:armstate` THEN
    ARM_STEPS_TAC ED25519_EXEC (226--227) THEN
    ENSURES_FINAL_STATE_TAC THEN
    ASM_REWRITE_TAC []);;

(* int ed25519ctx_verify_no_self_test_s2n_bignum(
    const uint8_t *message, size_t message_len,
    const uint8_t signature[ED25519_SIGNATURE_LEN],
    const uint8_t public_key[ED25519_PUBLIC_KEY_LEN], const uint8_t *context,
    size_t context_len) *)
let ED25519CTX_VERIFY_NO_SELF_TEST_S2N_BIGNUM_CORRECT = prove
  (`!sp msg_p msg sig_p sig A_p A ctx_p ctx pc retpc.
    aligned 16 sp /\
    adrp_within_bounds (word double_const) (word (pc + 0x3b20)) /\
    adrp_within_bounds (word double_const) (word (pc + 0x41d4)) /\
    adrp_within_bounds (word K_base) (word (pc + 0x8fc8)) /\
    PAIRWISE nonoverlapping [(word pc, 37844); (msg_p, LENGTH msg); (sig_p, 64);
      (A_p, 32); (ctx_p, LENGTH ctx); (word_sub sp (word 2560), 2560); (word double_const, 768); (word K_base, 640)] /\
    LENGTH msg < 2 EXP 64 /\
    LENGTH sig = 64 /\
    LENGTH A = 32 /\
    LENGTH ctx < 2 EXP 64 ==>
    ensures arm
    (\s. aligned_bytes_loaded s (word pc) (ed25519_mc pc base_const double_const K_base) /\
         read PC s = word (pc + 0x478) /\
         read SP s = sp /\
         read X30 s = word retpc /\
         C_ARGUMENTS [msg_p; word (LENGTH msg); sig_p; A_p; ctx_p; word (LENGTH ctx)] s /\
         byte_list_at msg msg_p s /\
         byte_list_at sig sig_p s /\
         byte_list_at A A_p s /\
         byte_list_at ctx ctx_p s /\
         bytes_loaded s (word double_const) edwards25519_scalarmuldouble_alt_constant_data /\
         constants_at (word K_base) s)
    (\s. read PC s = word retpc /\
         if dom2_valid 1 ctx /\ verify_args_valid A sig /\ verify 1 ctx A sig msg
            then C_RETURN s = word 1
            else C_RETURN s = word 0)
    (MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI ,,
     MAYCHANGE [memory :> bytes(sig_p, 64)] ,,
     MAYCHANGE [memory :> bytes(word_sub sp (word 2560), 2560)])`,
  REWRITE_TAC[MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI; NONOVERLAPPING_CLAUSES; PAIRWISE; ALL;
      constants_at; bytes_loaded; C_ARGUMENTS; C_RETURN] THEN
    WORD_FORALL_OFFSET_TAC 2560 THEN
    REPEAT STRIP_TAC THEN
    ENSURES_EXISTING_PRESERVED_TAC `SP` THEN
    ENSURES_EXISTING_PRESERVED_TAC `X30` THEN
    ENSURES_PRESERVED_TAC "x19_init" `X19` THEN
    ENSURES_PRESERVED_TAC "x20_init" `X20` THEN
    ENSURES_PRESERVED_TAC "x21_init" `X21` THEN
    ENSURES_PRESERVED_TAC "x22_init" `X22` THEN

    SUBGOAL_THEN `LENGTH edwards25519_scalarmuldouble_alt_constant_data = 768`
      (fun th -> REWRITE_TAC [th] THEN ASSUME_TAC th) THENL
    [ REWRITE_TAC [LENGTH; edwards25519_scalarmuldouble_alt_constant_data] THEN
        CONV_TAC NUM_REDUCE_CONV;
      ALL_TAC ] THEN
    ASM_REWRITE_TAC [byte_list_at] THEN
    SUBGOAL_THEN `LENGTH (sig:byte list) = 64`
      (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th]) THEN ASSUME_TAC th) THENL
    [ ASM_REWRITE_TAC []; ALL_TAC ] THEN
    ENSURES_INIT_TAC "s286" THEN
    ARM_STEPS_TAC ED25519_EXEC (287--294) THEN
    POP_ASSUM MP_TAC THEN
    ASM_SIMP_TAC [VAL_WORD_EQ; DIMINDEX_64] THEN
    COND_CASES_TAC THEN
    DISCH_TAC THENL
    [ (* LENGTH ctx = 0 *)
        SUBGOAL_THEN `~(dom2_valid 1 ctx)` (fun th -> REWRITE_TAC [th]) THENL
        [ ASM_REWRITE_TAC [dom2_valid; ARITH; GSYM LENGTH_EQ_NIL]; ALL_TAC ] THEN
        ARM_STEPS_TAC ED25519_EXEC (310--314) THEN
        ENSURES_FINAL_STATE_TAC THEN
        ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    (* ~(LENGTH ctx = 0) *)
    ARM_STEPS_TAC ED25519_EXEC (295--296) THEN
    POP_ASSUM MP_TAC THEN
    ASM_SIMP_TAC [VAL_WORD_EQ; DIMINDEX_64; VAL_WORD_SUB_EQ_0] THEN
    SIMP_TAC [VAL_WORD_EQ; DIMINDEX_64; ARITH] THEN
    COND_CASES_TAC THEN
    DISCH_TAC THENL
    [ (* 255 < LENGTH ctx *)
      SUBGOAL_THEN `~(dom2_valid 1 ctx)` (fun th -> REWRITE_TAC [th]) THENL
        [ ASM_REWRITE_TAC [dom2_valid; ARITH; GSYM LENGTH_EQ_NIL] THEN
            REWRITE_TAC [NOT_LE; LT_LE] THEN
            ONCE_REWRITE_TAC [EQ_SYM] THEN
            ASM_REWRITE_TAC [];
          ALL_TAC ] THEN
        ARM_STEPS_TAC ED25519_EXEC (310--314) THEN
        ENSURES_FINAL_STATE_TAC THEN
        ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    SUBGOAL_THEN `dom2_valid 1 ctx` (fun th -> REWRITE_TAC [th]) THENL
    [ ASM_REWRITE_TAC [dom2_valid; ARITH; GSYM LENGTH_EQ_NIL] THEN
          REWRITE_TAC [GSYM NOT_LT] THEN REWRITE_TAC [LT_LE] THEN
          ONCE_REWRITE_TAC [ARITH_RULE `!x y:num. ~(x=y) <=> ~(y=x)`] THEN
          ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    ARM_STEPS_TAC ED25519_EXEC (297--301) THEN
    SUBGOAL_THEN `LENGTH (ctx:byte list) <= 255` ASSUME_TAC THENL
    [ ASM_REWRITE_TAC [ARITH_RULE `!x y. x <= y <=> ~(y <= x /\ ~(x = y))`]; ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPEC_ALL ed25519_mc, ED25519_EXEC, 0, SPEC_ALL ed25519_mc, REWRITE_RULE [max_dom2_size; byte_list_at] DOM2_COMMON_CORRECT)
      [`sp + word 2264 : int64`; `word 0:int64`; `ctx_p:int64`; `ctx:byte list`; `pc:num`; `pc + 1204`;`base_const:num`; `double_const:num`; `K_base:num`] 302 THEN
    RENAME_TAC `s302:armstate` `s301_ret:armstate` THEN
    SUBGOAL_THEN `LENGTH (dom2_prefix ++ [word (val (word 0 : int64))] ++ [word (LENGTH ctx)] ++ ctx) <= 289` ASSUME_TAC THENL
    [ REWRITE_TAC [LENGTH_APPEND; LENGTH; LENGTH_DOM2_PREFIX] THEN SIMPLE_ARITH_TAC; ALL_TAC ] THEN
    ARM_STEPS_TAC ED25519_EXEC (302--308) THEN
    RULE_ASSUM_TAC (REWRITE_RULE [WORD_RULE `word (val (word 0:int64)):byte = word 0`]) THEN
    ASSUME_TAC ED25519_PH THEN
    SUBGOAL_THEN `dom2_prefix ++ [word 0] ++ [word (LENGTH ctx)] ++ ctx = dom2_of 1 ctx` (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th])) THENL
    [ REWRITE_TAC [dom2_of; phflag; ARITH]; ALL_TAC ] THEN
    SUBGOAL_THEN `dom2_valid 1 ctx` ASSUME_TAC THENL
    [ REWRITE_TAC [dom2_valid; ARITH] THEN ASM_REWRITE_TAC [GSYM LENGTH_EQ_NIL]; ALL_TAC] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPEC_ALL ed25519_mc, ED25519_EXEC, 0,
        SPEC_ALL ed25519_mc, (REWRITE_RULE [byte_list_at; constants_at; bytes_loaded] ED25519_VERIFY_COMMON_CORRECT))
      [`sp + word 2224:int64`; `msg_p:int64`; `msg:byte list`; `sig_p:int64`; `sig:byte list`; `A_p:int64`; `A:byte list`;
        `sp + word 2264:int64`; `1`; `ctx:byte list`; `pc:num`; `pc + 1232`;`base_const:num`; `double_const:num`; `K_base:num`] 309 THEN
    RENAME_TAC `s309:armstate` `s308_ret:armstate` THEN
    ARM_STEPS_TAC ED25519_EXEC [309] THEN
    ARM_STEPS_TAC ED25519_EXEC (311--314) THEN
    ENSURES_FINAL_STATE_TAC THEN
    ASM_REWRITE_TAC []);;

(* int ed25519ph_verify_no_self_test_s2n_bignum(
    const uint8_t *message, size_t message_len,
    const uint8_t signature[ED25519_SIGNATURE_LEN],
    const uint8_t public_key[ED25519_PUBLIC_KEY_LEN], const uint8_t *context,
    size_t context_len) *)
let ED25519PH_VERIFY_NO_SELF_TEST_S2N_BIGNUM_CORRECT = prove
  (`!sp msg_p msg sig_p sig A_p A ctx_p ctx pc retpc.
    aligned 16 sp /\
    adrp_within_bounds (word double_const) (word (pc + 0x3b20)) /\
    adrp_within_bounds (word double_const) (word (pc + 0x41d4)) /\
    adrp_within_bounds (word K_base) (word (pc + 0x8fc8)) /\
    PAIRWISE nonoverlapping [(word pc, 37844); (msg_p, LENGTH msg); (sig_p, 64);
      (A_p, 32); (ctx_p, LENGTH ctx); (word_sub sp (word 2848), 2848); (word double_const, 768); (word K_base, 640)] /\
    LENGTH msg < 2 EXP 64 /\
    LENGTH sig = 64 /\
    LENGTH A = 32 /\
    LENGTH ctx < 2 EXP 64 ==>
    ensures arm
    (\s. aligned_bytes_loaded s (word pc) (ed25519_mc pc base_const double_const K_base) /\
         read PC s = word (pc + 0x588) /\
         read SP s = sp /\
         read X30 s = word retpc /\
         C_ARGUMENTS [msg_p; word (LENGTH msg); sig_p; A_p; ctx_p; word (LENGTH ctx)] s /\
         byte_list_at msg msg_p s /\
         byte_list_at sig sig_p s /\
         byte_list_at A A_p s /\
         byte_list_at ctx ctx_p s /\
         bytes_loaded s (word double_const) edwards25519_scalarmuldouble_alt_constant_data /\
         constants_at (word K_base) s)
    (\s. read PC s = word retpc /\
         if dom2_valid 2 ctx /\ verify_args_valid A sig /\ verify 2 ctx A sig msg
            then C_RETURN s = word 1
            else C_RETURN s = word 0)
    (MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI ,,
     MAYCHANGE [memory :> bytes(sig_p, 64)] ,,
     MAYCHANGE [memory :> bytes(word_sub sp (word 2848), 2848)])`,
  REWRITE_TAC[MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI; NONOVERLAPPING_CLAUSES; PAIRWISE; ALL;
      constants_at; bytes_loaded; C_ARGUMENTS; C_RETURN] THEN
    WORD_FORALL_OFFSET_TAC 2848 THEN
    REPEAT STRIP_TAC THEN
    ENSURES_EXISTING_PRESERVED_TAC `SP` THEN
    ENSURES_EXISTING_PRESERVED_TAC `X30` THEN
    ENSURES_PRESERVED_TAC "x19_init" `X19` THEN
    ENSURES_PRESERVED_TAC "x20_init" `X20` THEN
    ENSURES_PRESERVED_TAC "x21_init" `X21` THEN
    ENSURES_PRESERVED_TAC "x22_init" `X22` THEN

    SUBGOAL_THEN `LENGTH edwards25519_scalarmuldouble_alt_constant_data = 768`
      (fun th -> REWRITE_TAC [th] THEN ASSUME_TAC th) THENL
    [ REWRITE_TAC [LENGTH; edwards25519_scalarmuldouble_alt_constant_data] THEN
        CONV_TAC NUM_REDUCE_CONV;
      ALL_TAC ] THEN
    ASM_REWRITE_TAC [byte_list_at] THEN
    ENSURES_INIT_TAC "s354" THEN
    ARM_STEPS_TAC ED25519_EXEC (355--364) THEN
    POP_ASSUM MP_TAC THEN
    ASM_SIMP_TAC [VAL_WORD_EQ; DIMINDEX_64; VAL_WORD_SUB_EQ_0] THEN
    SIMP_TAC [VAL_WORD_EQ; DIMINDEX_64; ARITH] THEN
    COND_CASES_TAC THEN
    DISCH_TAC THENL
    [ (* 255 < LENGTH ctx *)
      SUBGOAL_THEN `~(dom2_valid 2 ctx)` (fun th -> REWRITE_TAC [th]) THENL
        [ ASM_REWRITE_TAC [dom2_valid; ARITH; GSYM LENGTH_EQ_NIL] THEN
            REWRITE_TAC [NOT_LE; LT_LE] THEN
            ONCE_REWRITE_TAC [EQ_SYM] THEN
            ASM_REWRITE_TAC [];
          ALL_TAC ] THEN
        ARM_STEPS_TAC ED25519_EXEC (388--393) THEN
        ENSURES_FINAL_STATE_TAC THEN
        ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    SUBGOAL_THEN `dom2_valid 2 ctx` (fun th -> REWRITE_TAC [th]) THENL
    [ ASM_REWRITE_TAC [dom2_valid; ARITH; GSYM LENGTH_EQ_NIL] THEN
          REWRITE_TAC [GSYM NOT_LT] THEN REWRITE_TAC [LT_LE] THEN
          ONCE_REWRITE_TAC [ARITH_RULE `!x y:num. ~(x=y) <=> ~(y=x)`] THEN
          ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    ARM_STEPS_TAC ED25519_EXEC (365--369) THEN
    SUBGOAL_THEN `LENGTH (ctx:byte list) <= 255` ASSUME_TAC THENL
    [ REWRITE_TAC [GSYM NOT_LT] THEN REWRITE_TAC [LT_LE] THEN
        ONCE_REWRITE_TAC [ARITH_RULE `!x y:num. ~(x=y) <=> ~(y=x)`] THEN
        ASM_REWRITE_TAC [];
      ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPEC_ALL ed25519_mc, ED25519_EXEC, 0, SPEC_ALL ed25519_mc, REWRITE_RULE [max_dom2_size; byte_list_at] DOM2_COMMON_CORRECT)
      [`sp + word 2264 : int64`; `word 1:int64`; `ctx_p:int64`; `ctx:byte list`; `pc:num`; `pc + 1476`; `base_const:num`; `double_const:num`; `K_base:num`] 370 THEN
    RENAME_TAC `s370:armstate` `s369_ret:armstate` THEN
    SUBGOAL_THEN `LENGTH (dom2_prefix ++ [word (val (word 1 : int64))] ++ [word (LENGTH ctx)] ++ ctx) <= 289` ASSUME_TAC THENL
    [ REWRITE_TAC [LENGTH_APPEND; LENGTH; LENGTH_DOM2_PREFIX] THEN SIMPLE_ARITH_TAC; ALL_TAC ] THEN
    ABBREV_TAC `dom2_len = LENGTH (dom2_prefix ++ [word (val (word 1 : int64))] ++ [word (LENGTH ctx)] ++ ctx)` THEN
    ARM_STEPS_TAC ED25519_EXEC (370--372) THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
       SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, SHA512_INIT)
      [`sp + word 2568:int64`; `pc + 0x8eb8`; `pc + 1488`; `K_base:num`] 373 THEN
    RENAME_TAC `s373:armstate` `s372_ret:armstate` THEN
    UNDISCH_THEN `sha512_ctx_at [] (sp + word 2568) s372_ret` MP_TAC THEN
    EXPAND_SHA512_SPECS_TAC THEN
    ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `[]:byte list` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
    STRIP_TAC THEN
    ARM_STEPS_TAC ED25519_EXEC (373--376) THEN
    SUBGOAL_THEN `sha512_ctx_at [] (sp + word 2568) s376` ASSUME_TAC THENL
    [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
    ASSUME_TAC (CONJUNCT1 LENGTH) THEN
    SUBGOAL_THEN `adrp_within_bounds (word K_base) (word ((pc + 36536) + 272))` ASSUME_TAC THENL
    [ ASM_REWRITE_TAC [GSYM ADD_ASSOC; ARITH]; ALL_TAC ] THEN
    SUBGOAL_THEN `0 + LENGTH (msg:byte list) < 2 EXP 125` ASSUME_TAC THENL
    [ SIMPLE_ARITH_TAC; ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
       SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_UPDATE)
      [`sp + word 2224:int64`; `sp + word 2568:int64`; `[]:byte list`; `msg_p:int64`; `msg:byte list`;
       `pc + 0x8eb8`; `pc + 1504`; `K_base : num`] 377 THEN
    RENAME_TAC `s377:armstate` `s376_ret:armstate` THEN
    MP_TAC (ASSUME `sha512_ctx_at ([] ++ msg) (sp + word 2568) s376_ret`) THEN
    REWRITE_TAC [APPEND] THEN
    EXPAND_SHA512_SPECS_TAC THEN
    ASM_REWRITE_TAC [] THEN
    STRIP_TAC THEN
    ASSUME_TAC (REWRITE_RULE [num_bytes_per_block] (SPEC `msg:byte list` LENGTH_BYTES_MOD_BLOCKS_LT)) THEN
    ARM_STEPS_TAC ED25519_EXEC (377--379) THEN
    SUBGOAL_THEN `sha512_ctx_at msg (sp + word 2568) s379` ASSUME_TAC THENL
    [ EXPAND_SHA512_SPECS_TAC THEN ASM_REWRITE_TAC []; ALL_TAC ] THEN
    SUBGOAL_THEN `LENGTH (msg:byte list) < 2 EXP 125` ASSUME_TAC THENL
    [ SIMPLE_ARITH_TAC; ALL_TAC ] THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPECL [`pc:num`; `base_const:num`; `double_const:num`; `K_base:num`] ed25519_mc, ED25519_EXEC, 0x8eb8,
       SPECL [`pc + 0x8eb8:num`; `K_base:num`] sha512_mc, REWRITE_RULE [byte_list_at; constants_at] SHA512_FINAL)
      [`sp + word 2224:int64`; `sp + word 2784:int64`; `sp + word 2568:int64`; `msg:byte list`;
       `pc + 0x8eb8`; `pc + 1516`; `K_base : num`] 380 THEN
    RENAME_TAC `s380:armstate` `s379_ret:armstate` THEN
    RULE_ASSUM_TAC (REWRITE_RULE [LENGTH_SHA512_PAD]) THEN
    ARM_STEPS_TAC ED25519_EXEC (380--386) THEN
    RULE_ASSUM_TAC (REWRITE_RULE [WORD_ARITH `word (val (word 1:int64)):byte = word 1`]) THEN
    SUBGOAL_THEN `dom2_prefix ++ [word 1] ++ [word (LENGTH ctx)] ++ ctx = dom2_of 2 ctx` (fun th -> RULE_ASSUM_TAC (REWRITE_RULE [th])) THENL
    [ REWRITE_TAC [dom2_of; phflag; ARITH]; ALL_TAC ] THEN
    SUBGOAL_THEN `dom2_valid 2 ctx` ASSUME_TAC THENL
    [ REWRITE_TAC [dom2_valid; ARITH] THEN ASM_REWRITE_TAC [GSYM LENGTH_EQ_NIL]; ALL_TAC] THEN
    ASSUME_TAC ED25519_PH THEN
    ASSUME_TAC LENGTH_SHA512_PAD THEN
    ARM_SUBROUTINE_SIM_TAC
      (SPEC_ALL ed25519_mc, ED25519_EXEC, 0,
        SPEC_ALL ed25519_mc, (REWRITE_RULE [byte_list_at; constants_at; bytes_loaded] ED25519_VERIFY_COMMON_CORRECT))
      [`sp + word 2224 : int64`; `sp + word 2784:int64`; `msg:byte list`; `sig_p:int64`; `sig:byte list`; `A_p:int64`; `A:byte list`;
       `sp + word 2264:int64`; `2`; `ctx:byte list`; `pc:num`; `pc + 1544`;`base_const:num`; `double_const:num`; `K_base:num`] 387 THEN
    RENAME_TAC `s387:armstate` `s386_ret:armstate` THEN
    ARM_STEPS_TAC ED25519_EXEC [387] THEN
    ARM_STEPS_TAC ED25519_EXEC (389--393) THEN
    ENSURES_FINAL_STATE_TAC THEN
    ASM_REWRITE_TAC []);;
